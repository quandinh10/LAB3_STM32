
LAB3_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000289c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080029a8  080029a8  000129a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029cc  080029cc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080029cc  080029cc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029cc  080029cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029cc  080029cc  000129cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029d0  080029d0  000129d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080029d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  2000005c  08002a30  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08002a30  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009961  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b2e  00000000  00000000  000299e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002bf60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d00  00000000  00000000  0002c8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba39  00000000  00000000  000435a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008238b  00000000  00000000  0004efd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002894  00000000  00000000  000d13b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002990 	.word	0x08002990

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002990 	.word	0x08002990

0800014c <isButtonPressed>:
int KeyReg3[NUM_BUTTON]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200,200,200};
int button_flag[NUM_BUTTON] = {0,0,0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <subKeyProcess>:

void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000078 	.word	0x20000078

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e069      	b.n	8000280 <getKeyInput+0xe0>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a38      	ldr	r2, [pc, #224]	; (8000290 <getKeyInput+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4937      	ldr	r1, [pc, #220]	; (8000294 <getKeyInput+0xf4>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a36      	ldr	r2, [pc, #216]	; (8000298 <getKeyInput+0xf8>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4932      	ldr	r1, [pc, #200]	; (8000290 <getKeyInput+0xf0>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, mode[i]);
 80001cc:	4a33      	ldr	r2, [pc, #204]	; (800029c <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4832      	ldr	r0, [pc, #200]	; (80002a0 <getKeyInput+0x100>)
 80001d8:	f001 fba2 	bl	8001920 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	4619      	mov	r1, r3
 80001e0:	4a2d      	ldr	r2, [pc, #180]	; (8000298 <getKeyInput+0xf8>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){ //avoid noise
 80001e8:	4a29      	ldr	r2, [pc, #164]	; (8000290 <getKeyInput+0xf0>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	4929      	ldr	r1, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d13e      	bne.n	800027a <getKeyInput+0xda>
 80001fc:	4a24      	ldr	r2, [pc, #144]	; (8000290 <getKeyInput+0xf0>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	4923      	ldr	r1, [pc, #140]	; (8000294 <getKeyInput+0xf4>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020c:	429a      	cmp	r2, r3
 800020e:	d134      	bne.n	800027a <getKeyInput+0xda>
			if (KeyReg2[i] != KeyReg3[i]){ //change state
 8000210:	4a20      	ldr	r2, [pc, #128]	; (8000294 <getKeyInput+0xf4>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4922      	ldr	r1, [pc, #136]	; (80002a4 <getKeyInput+0x104>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d016      	beq.n	8000252 <getKeyInput+0xb2>
				KeyReg3[i] = KeyReg2[i];
 8000224:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <getKeyInput+0xf4>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	491d      	ldr	r1, [pc, #116]	; (80002a4 <getKeyInput+0x104>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000234:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <getKeyInput+0x104>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d11c      	bne.n	800027a <getKeyInput+0xda>
					TimeOutForKeyPress[i] = 200;
 8000240:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <getKeyInput+0x108>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	21c8      	movs	r1, #200	; 0xc8
 8000246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e013      	b.n	800027a <getKeyInput+0xda>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 8000252:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <getKeyInput+0x108>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	1e5a      	subs	r2, r3, #1
 800025c:	4912      	ldr	r1, [pc, #72]	; (80002a8 <getKeyInput+0x108>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <getKeyInput+0x108>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d104      	bne.n	800027a <getKeyInput+0xda>
					KeyReg3[i] = NORMAL_STATE;
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <getKeyInput+0x104>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2101      	movs	r1, #1
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NUM_BUTTON; i++){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3301      	adds	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	dd92      	ble.n	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000014 	.word	0x20000014
 8000294:	20000020 	.word	0x20000020
 8000298:	20000008 	.word	0x20000008
 800029c:	20000000 	.word	0x20000000
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000038 	.word	0x20000038

080002ac <clearSignal>:
 *      Author: dinhq
 */

#include "display7SEG.h"

void clearSignal(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <clearSignal+0x38>)
 80002b8:	f001 fb49 	bl	800194e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <clearSignal+0x38>)
 80002c4:	f001 fb43 	bl	800194e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <clearSignal+0x38>)
 80002d0:	f001 fb3d 	bl	800194e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <clearSignal+0x38>)
 80002dc:	f001 fb37 	bl	800194e <HAL_GPIO_WritePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010800 	.word	0x40010800

080002e8 <display7SEG>:

void display7SEG(int num){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (num==0){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d123      	bne.n	800033e <display7SEG+0x56>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2101      	movs	r1, #1
 80002fa:	48c2      	ldr	r0, [pc, #776]	; (8000604 <display7SEG+0x31c>)
 80002fc:	f001 fb27 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2102      	movs	r1, #2
 8000304:	48bf      	ldr	r0, [pc, #764]	; (8000604 <display7SEG+0x31c>)
 8000306:	f001 fb22 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2104      	movs	r1, #4
 800030e:	48bd      	ldr	r0, [pc, #756]	; (8000604 <display7SEG+0x31c>)
 8000310:	f001 fb1d 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2108      	movs	r1, #8
 8000318:	48ba      	ldr	r0, [pc, #744]	; (8000604 <display7SEG+0x31c>)
 800031a:	f001 fb18 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2110      	movs	r1, #16
 8000322:	48b8      	ldr	r0, [pc, #736]	; (8000604 <display7SEG+0x31c>)
 8000324:	f001 fb13 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2120      	movs	r1, #32
 800032c:	48b5      	ldr	r0, [pc, #724]	; (8000604 <display7SEG+0x31c>)
 800032e:	f001 fb0e 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000332:	2201      	movs	r2, #1
 8000334:	2140      	movs	r1, #64	; 0x40
 8000336:	48b3      	ldr	r0, [pc, #716]	; (8000604 <display7SEG+0x31c>)
 8000338:	f001 fb09 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
	}
}
 800033c:	e15d      	b.n	80005fa <display7SEG+0x312>
	else if (num==1){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d123      	bne.n	800038c <display7SEG+0xa4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2101      	movs	r1, #1
 8000348:	48ae      	ldr	r0, [pc, #696]	; (8000604 <display7SEG+0x31c>)
 800034a:	f001 fb00 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	2102      	movs	r1, #2
 8000352:	48ac      	ldr	r0, [pc, #688]	; (8000604 <display7SEG+0x31c>)
 8000354:	f001 fafb 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2104      	movs	r1, #4
 800035c:	48a9      	ldr	r0, [pc, #676]	; (8000604 <display7SEG+0x31c>)
 800035e:	f001 faf6 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2108      	movs	r1, #8
 8000366:	48a7      	ldr	r0, [pc, #668]	; (8000604 <display7SEG+0x31c>)
 8000368:	f001 faf1 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2110      	movs	r1, #16
 8000370:	48a4      	ldr	r0, [pc, #656]	; (8000604 <display7SEG+0x31c>)
 8000372:	f001 faec 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2120      	movs	r1, #32
 800037a:	48a2      	ldr	r0, [pc, #648]	; (8000604 <display7SEG+0x31c>)
 800037c:	f001 fae7 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	489f      	ldr	r0, [pc, #636]	; (8000604 <display7SEG+0x31c>)
 8000386:	f001 fae2 	bl	800194e <HAL_GPIO_WritePin>
}
 800038a:	e136      	b.n	80005fa <display7SEG+0x312>
	else if (num==2){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d123      	bne.n	80003da <display7SEG+0xf2>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2101      	movs	r1, #1
 8000396:	489b      	ldr	r0, [pc, #620]	; (8000604 <display7SEG+0x31c>)
 8000398:	f001 fad9 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2102      	movs	r1, #2
 80003a0:	4898      	ldr	r0, [pc, #608]	; (8000604 <display7SEG+0x31c>)
 80003a2:	f001 fad4 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2104      	movs	r1, #4
 80003aa:	4896      	ldr	r0, [pc, #600]	; (8000604 <display7SEG+0x31c>)
 80003ac:	f001 facf 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2108      	movs	r1, #8
 80003b4:	4893      	ldr	r0, [pc, #588]	; (8000604 <display7SEG+0x31c>)
 80003b6:	f001 faca 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	4891      	ldr	r0, [pc, #580]	; (8000604 <display7SEG+0x31c>)
 80003c0:	f001 fac5 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2120      	movs	r1, #32
 80003c8:	488e      	ldr	r0, [pc, #568]	; (8000604 <display7SEG+0x31c>)
 80003ca:	f001 fac0 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	488c      	ldr	r0, [pc, #560]	; (8000604 <display7SEG+0x31c>)
 80003d4:	f001 fabb 	bl	800194e <HAL_GPIO_WritePin>
}
 80003d8:	e10f      	b.n	80005fa <display7SEG+0x312>
	else if (num==3){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d123      	bne.n	8000428 <display7SEG+0x140>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	4887      	ldr	r0, [pc, #540]	; (8000604 <display7SEG+0x31c>)
 80003e6:	f001 fab2 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2102      	movs	r1, #2
 80003ee:	4885      	ldr	r0, [pc, #532]	; (8000604 <display7SEG+0x31c>)
 80003f0:	f001 faad 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2104      	movs	r1, #4
 80003f8:	4882      	ldr	r0, [pc, #520]	; (8000604 <display7SEG+0x31c>)
 80003fa:	f001 faa8 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	4880      	ldr	r0, [pc, #512]	; (8000604 <display7SEG+0x31c>)
 8000404:	f001 faa3 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	487d      	ldr	r0, [pc, #500]	; (8000604 <display7SEG+0x31c>)
 800040e:	f001 fa9e 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2120      	movs	r1, #32
 8000416:	487b      	ldr	r0, [pc, #492]	; (8000604 <display7SEG+0x31c>)
 8000418:	f001 fa99 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4878      	ldr	r0, [pc, #480]	; (8000604 <display7SEG+0x31c>)
 8000422:	f001 fa94 	bl	800194e <HAL_GPIO_WritePin>
}
 8000426:	e0e8      	b.n	80005fa <display7SEG+0x312>
	else if (num==4){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b04      	cmp	r3, #4
 800042c:	d123      	bne.n	8000476 <display7SEG+0x18e>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2101      	movs	r1, #1
 8000432:	4874      	ldr	r0, [pc, #464]	; (8000604 <display7SEG+0x31c>)
 8000434:	f001 fa8b 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2102      	movs	r1, #2
 800043c:	4871      	ldr	r0, [pc, #452]	; (8000604 <display7SEG+0x31c>)
 800043e:	f001 fa86 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2104      	movs	r1, #4
 8000446:	486f      	ldr	r0, [pc, #444]	; (8000604 <display7SEG+0x31c>)
 8000448:	f001 fa81 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2108      	movs	r1, #8
 8000450:	486c      	ldr	r0, [pc, #432]	; (8000604 <display7SEG+0x31c>)
 8000452:	f001 fa7c 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2110      	movs	r1, #16
 800045a:	486a      	ldr	r0, [pc, #424]	; (8000604 <display7SEG+0x31c>)
 800045c:	f001 fa77 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2120      	movs	r1, #32
 8000464:	4867      	ldr	r0, [pc, #412]	; (8000604 <display7SEG+0x31c>)
 8000466:	f001 fa72 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	4865      	ldr	r0, [pc, #404]	; (8000604 <display7SEG+0x31c>)
 8000470:	f001 fa6d 	bl	800194e <HAL_GPIO_WritePin>
}
 8000474:	e0c1      	b.n	80005fa <display7SEG+0x312>
	else if (num==5){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b05      	cmp	r3, #5
 800047a:	d123      	bne.n	80004c4 <display7SEG+0x1dc>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2101      	movs	r1, #1
 8000480:	4860      	ldr	r0, [pc, #384]	; (8000604 <display7SEG+0x31c>)
 8000482:	f001 fa64 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2102      	movs	r1, #2
 800048a:	485e      	ldr	r0, [pc, #376]	; (8000604 <display7SEG+0x31c>)
 800048c:	f001 fa5f 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2104      	movs	r1, #4
 8000494:	485b      	ldr	r0, [pc, #364]	; (8000604 <display7SEG+0x31c>)
 8000496:	f001 fa5a 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2108      	movs	r1, #8
 800049e:	4859      	ldr	r0, [pc, #356]	; (8000604 <display7SEG+0x31c>)
 80004a0:	f001 fa55 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2110      	movs	r1, #16
 80004a8:	4856      	ldr	r0, [pc, #344]	; (8000604 <display7SEG+0x31c>)
 80004aa:	f001 fa50 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2120      	movs	r1, #32
 80004b2:	4854      	ldr	r0, [pc, #336]	; (8000604 <display7SEG+0x31c>)
 80004b4:	f001 fa4b 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	4851      	ldr	r0, [pc, #324]	; (8000604 <display7SEG+0x31c>)
 80004be:	f001 fa46 	bl	800194e <HAL_GPIO_WritePin>
}
 80004c2:	e09a      	b.n	80005fa <display7SEG+0x312>
	else if (num==6){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d123      	bne.n	8000512 <display7SEG+0x22a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2101      	movs	r1, #1
 80004ce:	484d      	ldr	r0, [pc, #308]	; (8000604 <display7SEG+0x31c>)
 80004d0:	f001 fa3d 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2102      	movs	r1, #2
 80004d8:	484a      	ldr	r0, [pc, #296]	; (8000604 <display7SEG+0x31c>)
 80004da:	f001 fa38 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2104      	movs	r1, #4
 80004e2:	4848      	ldr	r0, [pc, #288]	; (8000604 <display7SEG+0x31c>)
 80004e4:	f001 fa33 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2108      	movs	r1, #8
 80004ec:	4845      	ldr	r0, [pc, #276]	; (8000604 <display7SEG+0x31c>)
 80004ee:	f001 fa2e 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	4843      	ldr	r0, [pc, #268]	; (8000604 <display7SEG+0x31c>)
 80004f8:	f001 fa29 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2120      	movs	r1, #32
 8000500:	4840      	ldr	r0, [pc, #256]	; (8000604 <display7SEG+0x31c>)
 8000502:	f001 fa24 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	483e      	ldr	r0, [pc, #248]	; (8000604 <display7SEG+0x31c>)
 800050c:	f001 fa1f 	bl	800194e <HAL_GPIO_WritePin>
}
 8000510:	e073      	b.n	80005fa <display7SEG+0x312>
	else if (num==7){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b07      	cmp	r3, #7
 8000516:	d123      	bne.n	8000560 <display7SEG+0x278>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	4839      	ldr	r0, [pc, #228]	; (8000604 <display7SEG+0x31c>)
 800051e:	f001 fa16 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2102      	movs	r1, #2
 8000526:	4837      	ldr	r0, [pc, #220]	; (8000604 <display7SEG+0x31c>)
 8000528:	f001 fa11 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2104      	movs	r1, #4
 8000530:	4834      	ldr	r0, [pc, #208]	; (8000604 <display7SEG+0x31c>)
 8000532:	f001 fa0c 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2108      	movs	r1, #8
 800053a:	4832      	ldr	r0, [pc, #200]	; (8000604 <display7SEG+0x31c>)
 800053c:	f001 fa07 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	482f      	ldr	r0, [pc, #188]	; (8000604 <display7SEG+0x31c>)
 8000546:	f001 fa02 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2120      	movs	r1, #32
 800054e:	482d      	ldr	r0, [pc, #180]	; (8000604 <display7SEG+0x31c>)
 8000550:	f001 f9fd 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	482a      	ldr	r0, [pc, #168]	; (8000604 <display7SEG+0x31c>)
 800055a:	f001 f9f8 	bl	800194e <HAL_GPIO_WritePin>
}
 800055e:	e04c      	b.n	80005fa <display7SEG+0x312>
	else if (num==8){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b08      	cmp	r3, #8
 8000564:	d123      	bne.n	80005ae <display7SEG+0x2c6>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	4826      	ldr	r0, [pc, #152]	; (8000604 <display7SEG+0x31c>)
 800056c:	f001 f9ef 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <display7SEG+0x31c>)
 8000576:	f001 f9ea 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	4821      	ldr	r0, [pc, #132]	; (8000604 <display7SEG+0x31c>)
 8000580:	f001 f9e5 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	481e      	ldr	r0, [pc, #120]	; (8000604 <display7SEG+0x31c>)
 800058a:	f001 f9e0 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2110      	movs	r1, #16
 8000592:	481c      	ldr	r0, [pc, #112]	; (8000604 <display7SEG+0x31c>)
 8000594:	f001 f9db 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <display7SEG+0x31c>)
 800059e:	f001 f9d6 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <display7SEG+0x31c>)
 80005a8:	f001 f9d1 	bl	800194e <HAL_GPIO_WritePin>
}
 80005ac:	e025      	b.n	80005fa <display7SEG+0x312>
	else if (num==9){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b09      	cmp	r3, #9
 80005b2:	d122      	bne.n	80005fa <display7SEG+0x312>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <display7SEG+0x31c>)
 80005ba:	f001 f9c8 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <display7SEG+0x31c>)
 80005c4:	f001 f9c3 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <display7SEG+0x31c>)
 80005ce:	f001 f9be 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <display7SEG+0x31c>)
 80005d8:	f001 f9b9 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2110      	movs	r1, #16
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <display7SEG+0x31c>)
 80005e2:	f001 f9b4 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <display7SEG+0x31c>)
 80005ec:	f001 f9af 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <display7SEG+0x31c>)
 80005f6:	f001 f9aa 	bl	800194e <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010c00 	.word	0x40010c00

08000608 <displaySignal>:

void displaySignal(int index){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	clearSignal();
 8000610:	f7ff fe4c 	bl	80002ac <clearSignal>
	display7SEG(led_buffer[index]);
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <displaySignal+0x7c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe63 	bl	80002e8 <display7SEG>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d827      	bhi.n	8000678 <displaySignal+0x70>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <displaySignal+0x28>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	08000641 	.word	0x08000641
 8000634:	0800064f 	.word	0x0800064f
 8000638:	0800065d 	.word	0x0800065d
 800063c:	0800066b 	.word	0x0800066b
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <displaySignal+0x80>)
 8000648:	f001 f981 	bl	800194e <HAL_GPIO_WritePin>
		break;
 800064c:	e015      	b.n	800067a <displaySignal+0x72>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <displaySignal+0x80>)
 8000656:	f001 f97a 	bl	800194e <HAL_GPIO_WritePin>
		break;
 800065a:	e00e      	b.n	800067a <displaySignal+0x72>
	case 2:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <displaySignal+0x80>)
 8000664:	f001 f973 	bl	800194e <HAL_GPIO_WritePin>
		break;
 8000668:	e007      	b.n	800067a <displaySignal+0x72>
	case 3:
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <displaySignal+0x80>)
 8000672:	f001 f96c 	bl	800194e <HAL_GPIO_WritePin>
		break;
 8000676:	e000      	b.n	800067a <displaySignal+0x72>
	default:
		break;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000088 	.word	0x20000088
 8000688:	40010800 	.word	0x40010800

0800068c <fsm_manual_run>:
 *      Author: dinhq
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch(led_status){
 8000690:	4b91      	ldr	r3, [pc, #580]	; (80008d8 <fsm_manual_run+0x24c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b0e      	cmp	r3, #14
 8000696:	d053      	beq.n	8000740 <fsm_manual_run+0xb4>
 8000698:	2b0e      	cmp	r3, #14
 800069a:	f300 810a 	bgt.w	80008b2 <fsm_manual_run+0x226>
 800069e:	2b0c      	cmp	r3, #12
 80006a0:	d003      	beq.n	80006aa <fsm_manual_run+0x1e>
 80006a2:	2b0d      	cmp	r3, #13
 80006a4:	f000 8098 	beq.w	80007d8 <fsm_manual_run+0x14c>
			y_val=r_val-g_val;
		}
		break;

	default:
		break;
 80006a8:	e103      	b.n	80008b2 <fsm_manual_run+0x226>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2108      	movs	r1, #8
 80006ae:	488b      	ldr	r0, [pc, #556]	; (80008dc <fsm_manual_run+0x250>)
 80006b0:	f001 f94d 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80006b4:	2201      	movs	r2, #1
 80006b6:	2110      	movs	r1, #16
 80006b8:	4888      	ldr	r0, [pc, #544]	; (80008dc <fsm_manual_run+0x250>)
 80006ba:	f001 f948 	bl	800194e <HAL_GPIO_WritePin>
		if (timer5_flag == 1){
 80006be:	4b88      	ldr	r3, [pc, #544]	; (80008e0 <fsm_manual_run+0x254>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d106      	bne.n	80006d4 <fsm_manual_run+0x48>
			setTimer5(25);
 80006c6:	2019      	movs	r0, #25
 80006c8:	f000 fce6 	bl	8001098 <setTimer5>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80006cc:	2104      	movs	r1, #4
 80006ce:	4883      	ldr	r0, [pc, #524]	; (80008dc <fsm_manual_run+0x250>)
 80006d0:	f001 f955 	bl	800197e <HAL_GPIO_TogglePin>
		if (isButtonPressed(1) == 1){
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff fd39 	bl	800014c <isButtonPressed>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d110      	bne.n	8000702 <fsm_manual_run+0x76>
			r_inc++;
 80006e0:	4b80      	ldr	r3, [pc, #512]	; (80008e4 <fsm_manual_run+0x258>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3301      	adds	r3, #1
 80006e6:	4a7f      	ldr	r2, [pc, #508]	; (80008e4 <fsm_manual_run+0x258>)
 80006e8:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 80006ea:	4b7f      	ldr	r3, [pc, #508]	; (80008e8 <fsm_manual_run+0x25c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a7d      	ldr	r2, [pc, #500]	; (80008e8 <fsm_manual_run+0x25c>)
 80006f2:	6013      	str	r3, [r2, #0]
			if (r_inc >= 100) r_inc=2;
 80006f4:	4b7b      	ldr	r3, [pc, #492]	; (80008e4 <fsm_manual_run+0x258>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b63      	cmp	r3, #99	; 0x63
 80006fa:	dd02      	ble.n	8000702 <fsm_manual_run+0x76>
 80006fc:	4b79      	ldr	r3, [pc, #484]	; (80008e4 <fsm_manual_run+0x258>)
 80006fe:	2202      	movs	r2, #2
 8000700:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 8000702:	2000      	movs	r0, #0
 8000704:	f7ff fd22 	bl	800014c <isButtonPressed>
 8000708:	4603      	mov	r3, r0
 800070a:	2b01      	cmp	r3, #1
 800070c:	d10c      	bne.n	8000728 <fsm_manual_run+0x9c>
			setTimer5(1);
 800070e:	2001      	movs	r0, #1
 8000710:	f000 fcc2 	bl	8001098 <setTimer5>
			led_status = YELLOW_MAN;
 8000714:	4b70      	ldr	r3, [pc, #448]	; (80008d8 <fsm_manual_run+0x24c>)
 8000716:	220e      	movs	r2, #14
 8000718:	601a      	str	r2, [r3, #0]
			timerRoad1 = y_val;
 800071a:	4b74      	ldr	r3, [pc, #464]	; (80008ec <fsm_manual_run+0x260>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a72      	ldr	r2, [pc, #456]	; (80008e8 <fsm_manual_run+0x25c>)
 8000720:	6013      	str	r3, [r2, #0]
			timerRoad2 = 3;
 8000722:	4b73      	ldr	r3, [pc, #460]	; (80008f0 <fsm_manual_run+0x264>)
 8000724:	2203      	movs	r2, #3
 8000726:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 8000728:	2002      	movs	r0, #2
 800072a:	f7ff fd0f 	bl	800014c <isButtonPressed>
 800072e:	4603      	mov	r3, r0
 8000730:	2b01      	cmp	r3, #1
 8000732:	f040 80c0 	bne.w	80008b6 <fsm_manual_run+0x22a>
			r_val=r_inc;
 8000736:	4b6b      	ldr	r3, [pc, #428]	; (80008e4 <fsm_manual_run+0x258>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	4a6e      	ldr	r2, [pc, #440]	; (80008f4 <fsm_manual_run+0x268>)
 800073c:	6013      	str	r3, [r2, #0]
		break;
 800073e:	e0ba      	b.n	80008b6 <fsm_manual_run+0x22a>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000740:	2201      	movs	r2, #1
 8000742:	2108      	movs	r1, #8
 8000744:	4865      	ldr	r0, [pc, #404]	; (80008dc <fsm_manual_run+0x250>)
 8000746:	f001 f902 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800074a:	2201      	movs	r2, #1
 800074c:	2104      	movs	r1, #4
 800074e:	4863      	ldr	r0, [pc, #396]	; (80008dc <fsm_manual_run+0x250>)
 8000750:	f001 f8fd 	bl	800194e <HAL_GPIO_WritePin>
		if (timer5_flag == 1){
 8000754:	4b62      	ldr	r3, [pc, #392]	; (80008e0 <fsm_manual_run+0x254>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b01      	cmp	r3, #1
 800075a:	d106      	bne.n	800076a <fsm_manual_run+0xde>
			setTimer5(25);
 800075c:	2019      	movs	r0, #25
 800075e:	f000 fc9b 	bl	8001098 <setTimer5>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000762:	2110      	movs	r1, #16
 8000764:	485d      	ldr	r0, [pc, #372]	; (80008dc <fsm_manual_run+0x250>)
 8000766:	f001 f90a 	bl	800197e <HAL_GPIO_TogglePin>
		if (isButtonPressed(1) == 1){
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fcee 	bl	800014c <isButtonPressed>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	d112      	bne.n	800079c <fsm_manual_run+0x110>
			y_inc++;
 8000776:	4b60      	ldr	r3, [pc, #384]	; (80008f8 <fsm_manual_run+0x26c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	4a5e      	ldr	r2, [pc, #376]	; (80008f8 <fsm_manual_run+0x26c>)
 800077e:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000780:	4b59      	ldr	r3, [pc, #356]	; (80008e8 <fsm_manual_run+0x25c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	3301      	adds	r3, #1
 8000786:	4a58      	ldr	r2, [pc, #352]	; (80008e8 <fsm_manual_run+0x25c>)
 8000788:	6013      	str	r3, [r2, #0]
			if (y_inc >= r_val) y_inc=1;
 800078a:	4b5b      	ldr	r3, [pc, #364]	; (80008f8 <fsm_manual_run+0x26c>)
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	4b59      	ldr	r3, [pc, #356]	; (80008f4 <fsm_manual_run+0x268>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	429a      	cmp	r2, r3
 8000794:	db02      	blt.n	800079c <fsm_manual_run+0x110>
 8000796:	4b58      	ldr	r3, [pc, #352]	; (80008f8 <fsm_manual_run+0x26c>)
 8000798:	2201      	movs	r2, #1
 800079a:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 800079c:	2000      	movs	r0, #0
 800079e:	f7ff fcd5 	bl	800014c <isButtonPressed>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b01      	cmp	r3, #1
 80007a6:	d10c      	bne.n	80007c2 <fsm_manual_run+0x136>
			setTimer5(1);
 80007a8:	2001      	movs	r0, #1
 80007aa:	f000 fc75 	bl	8001098 <setTimer5>
			led_status = GREEN_MAN;
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <fsm_manual_run+0x24c>)
 80007b0:	220d      	movs	r2, #13
 80007b2:	601a      	str	r2, [r3, #0]
			timerRoad1 = g_val;
 80007b4:	4b51      	ldr	r3, [pc, #324]	; (80008fc <fsm_manual_run+0x270>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a4b      	ldr	r2, [pc, #300]	; (80008e8 <fsm_manual_run+0x25c>)
 80007ba:	6013      	str	r3, [r2, #0]
			timerRoad2 = 4;
 80007bc:	4b4c      	ldr	r3, [pc, #304]	; (80008f0 <fsm_manual_run+0x264>)
 80007be:	2204      	movs	r2, #4
 80007c0:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 80007c2:	2002      	movs	r0, #2
 80007c4:	f7ff fcc2 	bl	800014c <isButtonPressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d175      	bne.n	80008ba <fsm_manual_run+0x22e>
			y_val=y_inc;
 80007ce:	4b4a      	ldr	r3, [pc, #296]	; (80008f8 <fsm_manual_run+0x26c>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a46      	ldr	r2, [pc, #280]	; (80008ec <fsm_manual_run+0x260>)
 80007d4:	6013      	str	r3, [r2, #0]
		break;
 80007d6:	e070      	b.n	80008ba <fsm_manual_run+0x22e>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	2104      	movs	r1, #4
 80007dc:	483f      	ldr	r0, [pc, #252]	; (80008dc <fsm_manual_run+0x250>)
 80007de:	f001 f8b6 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	483d      	ldr	r0, [pc, #244]	; (80008dc <fsm_manual_run+0x250>)
 80007e8:	f001 f8b1 	bl	800194e <HAL_GPIO_WritePin>
		if (timer5_flag == 1){
 80007ec:	4b3c      	ldr	r3, [pc, #240]	; (80008e0 <fsm_manual_run+0x254>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	2b01      	cmp	r3, #1
 80007f2:	d106      	bne.n	8000802 <fsm_manual_run+0x176>
			setTimer5(25);
 80007f4:	2019      	movs	r0, #25
 80007f6:	f000 fc4f 	bl	8001098 <setTimer5>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 80007fa:	2108      	movs	r1, #8
 80007fc:	4837      	ldr	r0, [pc, #220]	; (80008dc <fsm_manual_run+0x250>)
 80007fe:	f001 f8be 	bl	800197e <HAL_GPIO_TogglePin>
		if (isButtonPressed(1) == 1){
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff fca2 	bl	800014c <isButtonPressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d112      	bne.n	8000834 <fsm_manual_run+0x1a8>
			g_inc++;
 800080e:	4b3c      	ldr	r3, [pc, #240]	; (8000900 <fsm_manual_run+0x274>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3301      	adds	r3, #1
 8000814:	4a3a      	ldr	r2, [pc, #232]	; (8000900 <fsm_manual_run+0x274>)
 8000816:	6013      	str	r3, [r2, #0]
			timerRoad1++;
 8000818:	4b33      	ldr	r3, [pc, #204]	; (80008e8 <fsm_manual_run+0x25c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	3301      	adds	r3, #1
 800081e:	4a32      	ldr	r2, [pc, #200]	; (80008e8 <fsm_manual_run+0x25c>)
 8000820:	6013      	str	r3, [r2, #0]
			if (g_inc >= r_val) g_inc=1;
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <fsm_manual_run+0x274>)
 8000824:	681a      	ldr	r2, [r3, #0]
 8000826:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <fsm_manual_run+0x268>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	429a      	cmp	r2, r3
 800082c:	db02      	blt.n	8000834 <fsm_manual_run+0x1a8>
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <fsm_manual_run+0x274>)
 8000830:	2201      	movs	r2, #1
 8000832:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fc89 	bl	800014c <isButtonPressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b01      	cmp	r3, #1
 800083e:	d126      	bne.n	800088e <fsm_manual_run+0x202>
			led_status = RED_GREEN;
 8000840:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <fsm_manual_run+0x24c>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
			g_val = r_val-y_val;
 8000846:	4b2b      	ldr	r3, [pc, #172]	; (80008f4 <fsm_manual_run+0x268>)
 8000848:	681a      	ldr	r2, [r3, #0]
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <fsm_manual_run+0x260>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	4a2a      	ldr	r2, [pc, #168]	; (80008fc <fsm_manual_run+0x270>)
 8000852:	6013      	str	r3, [r2, #0]
			timerRoad1 = r_val;
 8000854:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <fsm_manual_run+0x268>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a23      	ldr	r2, [pc, #140]	; (80008e8 <fsm_manual_run+0x25c>)
 800085a:	6013      	str	r3, [r2, #0]
			timerRoad2 = g_val;
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <fsm_manual_run+0x270>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a23      	ldr	r2, [pc, #140]	; (80008f0 <fsm_manual_run+0x264>)
 8000862:	6013      	str	r3, [r2, #0]
			updateLedBuffer();
 8000864:	f000 fa24 	bl	8000cb0 <updateLedBuffer>
			setTimer1(g_val*100);
 8000868:	4b24      	ldr	r3, [pc, #144]	; (80008fc <fsm_manual_run+0x270>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2264      	movs	r2, #100	; 0x64
 800086e:	fb02 f303 	mul.w	r3, r2, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f000 fbc0 	bl	8000ff8 <setTimer1>
			setTimer2(100);
 8000878:	2064      	movs	r0, #100	; 0x64
 800087a:	f000 fbd1 	bl	8001020 <setTimer2>
			setTimer4(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f000 fbf6 	bl	8001070 <setTimer4>
			index_led=0;
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <fsm_manual_run+0x278>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
			clearSignal();
 800088a:	f7ff fd0f 	bl	80002ac <clearSignal>
		if (isButtonPressed(2) == 1){
 800088e:	2002      	movs	r0, #2
 8000890:	f7ff fc5c 	bl	800014c <isButtonPressed>
 8000894:	4603      	mov	r3, r0
 8000896:	2b01      	cmp	r3, #1
 8000898:	d111      	bne.n	80008be <fsm_manual_run+0x232>
			g_val=g_inc;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <fsm_manual_run+0x274>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <fsm_manual_run+0x270>)
 80008a0:	6013      	str	r3, [r2, #0]
			y_val=r_val-g_val;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <fsm_manual_run+0x268>)
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	4b15      	ldr	r3, [pc, #84]	; (80008fc <fsm_manual_run+0x270>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <fsm_manual_run+0x260>)
 80008ae:	6013      	str	r3, [r2, #0]
		break;
 80008b0:	e005      	b.n	80008be <fsm_manual_run+0x232>
		break;
 80008b2:	bf00      	nop
 80008b4:	e004      	b.n	80008c0 <fsm_manual_run+0x234>
		break;
 80008b6:	bf00      	nop
 80008b8:	e002      	b.n	80008c0 <fsm_manual_run+0x234>
		break;
 80008ba:	bf00      	nop
 80008bc:	e000      	b.n	80008c0 <fsm_manual_run+0x234>
		break;
 80008be:	bf00      	nop
	}
	if (isButtonPressed(2) == 1){
 80008c0:	2002      	movs	r0, #2
 80008c2:	f7ff fc43 	bl	800014c <isButtonPressed>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d103      	bne.n	80008d4 <fsm_manual_run+0x248>
		timerRoad1 = r_val;
 80008cc:	4b09      	ldr	r3, [pc, #36]	; (80008f4 <fsm_manual_run+0x268>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a05      	ldr	r2, [pc, #20]	; (80008e8 <fsm_manual_run+0x25c>)
 80008d2:	6013      	str	r3, [r2, #0]
	}
}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000084 	.word	0x20000084
 80008dc:	40010800 	.word	0x40010800
 80008e0:	200000d4 	.word	0x200000d4
 80008e4:	200000a4 	.word	0x200000a4
 80008e8:	2000009c 	.word	0x2000009c
 80008ec:	20000048 	.word	0x20000048
 80008f0:	200000a0 	.word	0x200000a0
 80008f4:	20000044 	.word	0x20000044
 80008f8:	200000ac 	.word	0x200000ac
 80008fc:	2000004c 	.word	0x2000004c
 8000900:	200000a8 	.word	0x200000a8
 8000904:	20000098 	.word	0x20000098

08000908 <fsm_traffic_light>:
 */

#include "fsm_traffic_light.h"


void fsm_traffic_light(){
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	switch(led_status){
 800090c:	4b8e      	ldr	r3, [pc, #568]	; (8000b48 <fsm_traffic_light+0x240>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b04      	cmp	r3, #4
 8000912:	f200 817a 	bhi.w	8000c0a <fsm_traffic_light+0x302>
 8000916:	a201      	add	r2, pc, #4	; (adr r2, 800091c <fsm_traffic_light+0x14>)
 8000918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800091c:	08000931 	.word	0x08000931
 8000920:	0800098b 	.word	0x0800098b
 8000924:	08000a1b 	.word	0x08000a1b
 8000928:	08000abb 	.word	0x08000abb
 800092c:	08000b6d 	.word	0x08000b6d
	case INIT:
		//TODO
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000930:	2201      	movs	r2, #1
 8000932:	2104      	movs	r1, #4
 8000934:	4885      	ldr	r0, [pc, #532]	; (8000b4c <fsm_traffic_light+0x244>)
 8000936:	f001 f80a 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800093a:	2201      	movs	r2, #1
 800093c:	2108      	movs	r1, #8
 800093e:	4883      	ldr	r0, [pc, #524]	; (8000b4c <fsm_traffic_light+0x244>)
 8000940:	f001 f805 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000944:	2201      	movs	r2, #1
 8000946:	2110      	movs	r1, #16
 8000948:	4880      	ldr	r0, [pc, #512]	; (8000b4c <fsm_traffic_light+0x244>)
 800094a:	f001 f800 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800094e:	2201      	movs	r2, #1
 8000950:	2120      	movs	r1, #32
 8000952:	487e      	ldr	r0, [pc, #504]	; (8000b4c <fsm_traffic_light+0x244>)
 8000954:	f000 fffb 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2140      	movs	r1, #64	; 0x40
 800095c:	487b      	ldr	r0, [pc, #492]	; (8000b4c <fsm_traffic_light+0x244>)
 800095e:	f000 fff6 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000962:	2201      	movs	r2, #1
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	4879      	ldr	r0, [pc, #484]	; (8000b4c <fsm_traffic_light+0x244>)
 8000968:	f000 fff1 	bl	800194e <HAL_GPIO_WritePin>

		//INIT state
		led_status = RED_GREEN;
 800096c:	4b76      	ldr	r3, [pc, #472]	; (8000b48 <fsm_traffic_light+0x240>)
 800096e:	2201      	movs	r2, #1
 8000970:	601a      	str	r2, [r3, #0]
		setTimer1(g_val*100);
 8000972:	4b77      	ldr	r3, [pc, #476]	; (8000b50 <fsm_traffic_light+0x248>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	2264      	movs	r2, #100	; 0x64
 8000978:	fb02 f303 	mul.w	r3, r2, r3
 800097c:	4618      	mov	r0, r3
 800097e:	f000 fb3b 	bl	8000ff8 <setTimer1>
		setTimer2(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 fb4c 	bl	8001020 <setTimer2>
		break;
 8000988:	e148      	b.n	8000c1c <fsm_traffic_light+0x314>
	case RED_GREEN:
		//TODO
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2104      	movs	r1, #4
 800098e:	486f      	ldr	r0, [pc, #444]	; (8000b4c <fsm_traffic_light+0x244>)
 8000990:	f000 ffdd 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2108      	movs	r1, #8
 8000998:	486c      	ldr	r0, [pc, #432]	; (8000b4c <fsm_traffic_light+0x244>)
 800099a:	f000 ffd8 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2110      	movs	r1, #16
 80009a2:	486a      	ldr	r0, [pc, #424]	; (8000b4c <fsm_traffic_light+0x244>)
 80009a4:	f000 ffd3 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	2120      	movs	r1, #32
 80009ac:	4867      	ldr	r0, [pc, #412]	; (8000b4c <fsm_traffic_light+0x244>)
 80009ae:	f000 ffce 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2140      	movs	r1, #64	; 0x40
 80009b6:	4865      	ldr	r0, [pc, #404]	; (8000b4c <fsm_traffic_light+0x244>)
 80009b8:	f000 ffc9 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80009bc:	2201      	movs	r2, #1
 80009be:	2180      	movs	r1, #128	; 0x80
 80009c0:	4862      	ldr	r0, [pc, #392]	; (8000b4c <fsm_traffic_light+0x244>)
 80009c2:	f000 ffc4 	bl	800194e <HAL_GPIO_WritePin>

		//decrement of counter of each road
		if (timer2_flag == 1){
 80009c6:	4b63      	ldr	r3, [pc, #396]	; (8000b54 <fsm_traffic_light+0x24c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d114      	bne.n	80009f8 <fsm_traffic_light+0xf0>
			setTimer2(100);
 80009ce:	2064      	movs	r0, #100	; 0x64
 80009d0:	f000 fb26 	bl	8001020 <setTimer2>
			timerRoad1--;
 80009d4:	4b60      	ldr	r3, [pc, #384]	; (8000b58 <fsm_traffic_light+0x250>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3b01      	subs	r3, #1
 80009da:	4a5f      	ldr	r2, [pc, #380]	; (8000b58 <fsm_traffic_light+0x250>)
 80009dc:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80009de:	4b5f      	ldr	r3, [pc, #380]	; (8000b5c <fsm_traffic_light+0x254>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4a5d      	ldr	r2, [pc, #372]	; (8000b5c <fsm_traffic_light+0x254>)
 80009e6:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = y_val;
 80009e8:	4b5c      	ldr	r3, [pc, #368]	; (8000b5c <fsm_traffic_light+0x254>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	dc03      	bgt.n	80009f8 <fsm_traffic_light+0xf0>
 80009f0:	4b5b      	ldr	r3, [pc, #364]	; (8000b60 <fsm_traffic_light+0x258>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	4a59      	ldr	r2, [pc, #356]	; (8000b5c <fsm_traffic_light+0x254>)
 80009f6:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 80009f8:	4b5a      	ldr	r3, [pc, #360]	; (8000b64 <fsm_traffic_light+0x25c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	f040 8106 	bne.w	8000c0e <fsm_traffic_light+0x306>
			setTimer1(y_val*100);
 8000a02:	4b57      	ldr	r3, [pc, #348]	; (8000b60 <fsm_traffic_light+0x258>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	2264      	movs	r2, #100	; 0x64
 8000a08:	fb02 f303 	mul.w	r3, r2, r3
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 faf3 	bl	8000ff8 <setTimer1>
			led_status = RED_YELLOW;
 8000a12:	4b4d      	ldr	r3, [pc, #308]	; (8000b48 <fsm_traffic_light+0x240>)
 8000a14:	2202      	movs	r2, #2
 8000a16:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a18:	e0f9      	b.n	8000c0e <fsm_traffic_light+0x306>
	case RED_YELLOW:
		//TODO
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	484b      	ldr	r0, [pc, #300]	; (8000b4c <fsm_traffic_light+0x244>)
 8000a20:	f000 ff95 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2108      	movs	r1, #8
 8000a28:	4848      	ldr	r0, [pc, #288]	; (8000b4c <fsm_traffic_light+0x244>)
 8000a2a:	f000 ff90 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2110      	movs	r1, #16
 8000a32:	4846      	ldr	r0, [pc, #280]	; (8000b4c <fsm_traffic_light+0x244>)
 8000a34:	f000 ff8b 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000a38:	2201      	movs	r2, #1
 8000a3a:	2120      	movs	r1, #32
 8000a3c:	4843      	ldr	r0, [pc, #268]	; (8000b4c <fsm_traffic_light+0x244>)
 8000a3e:	f000 ff86 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	2140      	movs	r1, #64	; 0x40
 8000a46:	4841      	ldr	r0, [pc, #260]	; (8000b4c <fsm_traffic_light+0x244>)
 8000a48:	f000 ff81 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2180      	movs	r1, #128	; 0x80
 8000a50:	483e      	ldr	r0, [pc, #248]	; (8000b4c <fsm_traffic_light+0x244>)
 8000a52:	f000 ff7c 	bl	800194e <HAL_GPIO_WritePin>

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000a56:	4b3f      	ldr	r3, [pc, #252]	; (8000b54 <fsm_traffic_light+0x24c>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d11c      	bne.n	8000a98 <fsm_traffic_light+0x190>
			setTimer2(100);
 8000a5e:	2064      	movs	r0, #100	; 0x64
 8000a60:	f000 fade 	bl	8001020 <setTimer2>
			timerRoad1--;
 8000a64:	4b3c      	ldr	r3, [pc, #240]	; (8000b58 <fsm_traffic_light+0x250>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	4a3b      	ldr	r2, [pc, #236]	; (8000b58 <fsm_traffic_light+0x250>)
 8000a6c:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = g_val;
 8000a6e:	4b3a      	ldr	r3, [pc, #232]	; (8000b58 <fsm_traffic_light+0x250>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	dc03      	bgt.n	8000a7e <fsm_traffic_light+0x176>
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <fsm_traffic_light+0x248>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a37      	ldr	r2, [pc, #220]	; (8000b58 <fsm_traffic_light+0x250>)
 8000a7c:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000a7e:	4b37      	ldr	r3, [pc, #220]	; (8000b5c <fsm_traffic_light+0x254>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	4a35      	ldr	r2, [pc, #212]	; (8000b5c <fsm_traffic_light+0x254>)
 8000a86:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = r_val;
 8000a88:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <fsm_traffic_light+0x254>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dc03      	bgt.n	8000a98 <fsm_traffic_light+0x190>
 8000a90:	4b35      	ldr	r3, [pc, #212]	; (8000b68 <fsm_traffic_light+0x260>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <fsm_traffic_light+0x254>)
 8000a96:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 8000a98:	4b32      	ldr	r3, [pc, #200]	; (8000b64 <fsm_traffic_light+0x25c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	f040 80b8 	bne.w	8000c12 <fsm_traffic_light+0x30a>
			setTimer1(g_val*100);
 8000aa2:	4b2b      	ldr	r3, [pc, #172]	; (8000b50 <fsm_traffic_light+0x248>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2264      	movs	r2, #100	; 0x64
 8000aa8:	fb02 f303 	mul.w	r3, r2, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 faa3 	bl	8000ff8 <setTimer1>
			led_status = GREEN_RED;
 8000ab2:	4b25      	ldr	r3, [pc, #148]	; (8000b48 <fsm_traffic_light+0x240>)
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ab8:	e0ab      	b.n	8000c12 <fsm_traffic_light+0x30a>
	case GREEN_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2104      	movs	r1, #4
 8000abe:	4823      	ldr	r0, [pc, #140]	; (8000b4c <fsm_traffic_light+0x244>)
 8000ac0:	f000 ff45 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2108      	movs	r1, #8
 8000ac8:	4820      	ldr	r0, [pc, #128]	; (8000b4c <fsm_traffic_light+0x244>)
 8000aca:	f000 ff40 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2110      	movs	r1, #16
 8000ad2:	481e      	ldr	r0, [pc, #120]	; (8000b4c <fsm_traffic_light+0x244>)
 8000ad4:	f000 ff3b 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2120      	movs	r1, #32
 8000adc:	481b      	ldr	r0, [pc, #108]	; (8000b4c <fsm_traffic_light+0x244>)
 8000ade:	f000 ff36 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4819      	ldr	r0, [pc, #100]	; (8000b4c <fsm_traffic_light+0x244>)
 8000ae8:	f000 ff31 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	4816      	ldr	r0, [pc, #88]	; (8000b4c <fsm_traffic_light+0x244>)
 8000af2:	f000 ff2c 	bl	800194e <HAL_GPIO_WritePin>

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <fsm_traffic_light+0x24c>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d114      	bne.n	8000b28 <fsm_traffic_light+0x220>
			setTimer2(100);
 8000afe:	2064      	movs	r0, #100	; 0x64
 8000b00:	f000 fa8e 	bl	8001020 <setTimer2>
			timerRoad1--;
 8000b04:	4b14      	ldr	r3, [pc, #80]	; (8000b58 <fsm_traffic_light+0x250>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <fsm_traffic_light+0x250>)
 8000b0c:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = y_val;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <fsm_traffic_light+0x250>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	dc03      	bgt.n	8000b1e <fsm_traffic_light+0x216>
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <fsm_traffic_light+0x258>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <fsm_traffic_light+0x250>)
 8000b1c:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <fsm_traffic_light+0x254>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <fsm_traffic_light+0x254>)
 8000b26:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <fsm_traffic_light+0x25c>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d172      	bne.n	8000c16 <fsm_traffic_light+0x30e>
			setTimer1(y_val*100);
 8000b30:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <fsm_traffic_light+0x258>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2264      	movs	r2, #100	; 0x64
 8000b36:	fb02 f303 	mul.w	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 fa5c 	bl	8000ff8 <setTimer1>
			led_status = YELLOW_RED;
 8000b40:	4b01      	ldr	r3, [pc, #4]	; (8000b48 <fsm_traffic_light+0x240>)
 8000b42:	2204      	movs	r2, #4
 8000b44:	601a      	str	r2, [r3, #0]
		}
		break;
 8000b46:	e066      	b.n	8000c16 <fsm_traffic_light+0x30e>
 8000b48:	20000084 	.word	0x20000084
 8000b4c:	40010800 	.word	0x40010800
 8000b50:	2000004c 	.word	0x2000004c
 8000b54:	200000bc 	.word	0x200000bc
 8000b58:	2000009c 	.word	0x2000009c
 8000b5c:	200000a0 	.word	0x200000a0
 8000b60:	20000048 	.word	0x20000048
 8000b64:	200000b4 	.word	0x200000b4
 8000b68:	20000044 	.word	0x20000044
	case YELLOW_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2104      	movs	r1, #4
 8000b70:	4843      	ldr	r0, [pc, #268]	; (8000c80 <fsm_traffic_light+0x378>)
 8000b72:	f000 feec 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000b76:	2201      	movs	r2, #1
 8000b78:	2108      	movs	r1, #8
 8000b7a:	4841      	ldr	r0, [pc, #260]	; (8000c80 <fsm_traffic_light+0x378>)
 8000b7c:	f000 fee7 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	483e      	ldr	r0, [pc, #248]	; (8000c80 <fsm_traffic_light+0x378>)
 8000b86:	f000 fee2 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2120      	movs	r1, #32
 8000b8e:	483c      	ldr	r0, [pc, #240]	; (8000c80 <fsm_traffic_light+0x378>)
 8000b90:	f000 fedd 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	4839      	ldr	r0, [pc, #228]	; (8000c80 <fsm_traffic_light+0x378>)
 8000b9a:	f000 fed8 	bl	800194e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	2180      	movs	r1, #128	; 0x80
 8000ba2:	4837      	ldr	r0, [pc, #220]	; (8000c80 <fsm_traffic_light+0x378>)
 8000ba4:	f000 fed3 	bl	800194e <HAL_GPIO_WritePin>

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000ba8:	4b36      	ldr	r3, [pc, #216]	; (8000c84 <fsm_traffic_light+0x37c>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d11c      	bne.n	8000bea <fsm_traffic_light+0x2e2>
			setTimer2(100);
 8000bb0:	2064      	movs	r0, #100	; 0x64
 8000bb2:	f000 fa35 	bl	8001020 <setTimer2>
			timerRoad1--;
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <fsm_traffic_light+0x380>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	4a32      	ldr	r2, [pc, #200]	; (8000c88 <fsm_traffic_light+0x380>)
 8000bbe:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = r_val;
 8000bc0:	4b31      	ldr	r3, [pc, #196]	; (8000c88 <fsm_traffic_light+0x380>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	dc03      	bgt.n	8000bd0 <fsm_traffic_light+0x2c8>
 8000bc8:	4b30      	ldr	r3, [pc, #192]	; (8000c8c <fsm_traffic_light+0x384>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a2e      	ldr	r2, [pc, #184]	; (8000c88 <fsm_traffic_light+0x380>)
 8000bce:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000bd0:	4b2f      	ldr	r3, [pc, #188]	; (8000c90 <fsm_traffic_light+0x388>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	3b01      	subs	r3, #1
 8000bd6:	4a2e      	ldr	r2, [pc, #184]	; (8000c90 <fsm_traffic_light+0x388>)
 8000bd8:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = g_val;
 8000bda:	4b2d      	ldr	r3, [pc, #180]	; (8000c90 <fsm_traffic_light+0x388>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dc03      	bgt.n	8000bea <fsm_traffic_light+0x2e2>
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <fsm_traffic_light+0x38c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <fsm_traffic_light+0x388>)
 8000be8:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 8000bea:	4b2b      	ldr	r3, [pc, #172]	; (8000c98 <fsm_traffic_light+0x390>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d113      	bne.n	8000c1a <fsm_traffic_light+0x312>
			setTimer1(g_val*100);
 8000bf2:	4b28      	ldr	r3, [pc, #160]	; (8000c94 <fsm_traffic_light+0x38c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2264      	movs	r2, #100	; 0x64
 8000bf8:	fb02 f303 	mul.w	r3, r2, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f000 f9fb 	bl	8000ff8 <setTimer1>
			led_status = RED_GREEN;
 8000c02:	4b26      	ldr	r3, [pc, #152]	; (8000c9c <fsm_traffic_light+0x394>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	601a      	str	r2, [r3, #0]
		}
		break;
 8000c08:	e007      	b.n	8000c1a <fsm_traffic_light+0x312>
	default:
		break;
 8000c0a:	bf00      	nop
 8000c0c:	e006      	b.n	8000c1c <fsm_traffic_light+0x314>
		break;
 8000c0e:	bf00      	nop
 8000c10:	e004      	b.n	8000c1c <fsm_traffic_light+0x314>
		break;
 8000c12:	bf00      	nop
 8000c14:	e002      	b.n	8000c1c <fsm_traffic_light+0x314>
		break;
 8000c16:	bf00      	nop
 8000c18:	e000      	b.n	8000c1c <fsm_traffic_light+0x314>
		break;
 8000c1a:	bf00      	nop
	}
	//check mode (timer5 for toogle LED)
	if (isButtonPressed(0) == 1 && (led_status == RED_GREEN || led_status == RED_YELLOW || led_status == GREEN_RED || led_status == YELLOW_RED)){
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fa95 	bl	800014c <isButtonPressed>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d128      	bne.n	8000c7a <fsm_traffic_light+0x372>
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <fsm_traffic_light+0x394>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d00b      	beq.n	8000c48 <fsm_traffic_light+0x340>
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <fsm_traffic_light+0x394>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b02      	cmp	r3, #2
 8000c36:	d007      	beq.n	8000c48 <fsm_traffic_light+0x340>
 8000c38:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <fsm_traffic_light+0x394>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2b03      	cmp	r3, #3
 8000c3e:	d003      	beq.n	8000c48 <fsm_traffic_light+0x340>
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <fsm_traffic_light+0x394>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b04      	cmp	r3, #4
 8000c46:	d118      	bne.n	8000c7a <fsm_traffic_light+0x372>
		led_status = RED_MAN;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <fsm_traffic_light+0x394>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
		r_inc = r_val;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <fsm_traffic_light+0x384>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a13      	ldr	r2, [pc, #76]	; (8000ca0 <fsm_traffic_light+0x398>)
 8000c54:	6013      	str	r3, [r2, #0]
		y_inc = y_val;
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <fsm_traffic_light+0x39c>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <fsm_traffic_light+0x3a0>)
 8000c5c:	6013      	str	r3, [r2, #0]
		g_inc = g_val;
 8000c5e:	4b0d      	ldr	r3, [pc, #52]	; (8000c94 <fsm_traffic_light+0x38c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a12      	ldr	r2, [pc, #72]	; (8000cac <fsm_traffic_light+0x3a4>)
 8000c64:	6013      	str	r3, [r2, #0]
		setTimer5(1);
 8000c66:	2001      	movs	r0, #1
 8000c68:	f000 fa16 	bl	8001098 <setTimer5>

		timerRoad1 = r_val;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <fsm_traffic_light+0x384>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <fsm_traffic_light+0x380>)
 8000c72:	6013      	str	r3, [r2, #0]
		timerRoad2 = 2;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <fsm_traffic_light+0x388>)
 8000c76:	2202      	movs	r2, #2
 8000c78:	601a      	str	r2, [r3, #0]
	}
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40010800 	.word	0x40010800
 8000c84:	200000bc 	.word	0x200000bc
 8000c88:	2000009c 	.word	0x2000009c
 8000c8c:	20000044 	.word	0x20000044
 8000c90:	200000a0 	.word	0x200000a0
 8000c94:	2000004c 	.word	0x2000004c
 8000c98:	200000b4 	.word	0x200000b4
 8000c9c:	20000084 	.word	0x20000084
 8000ca0:	200000a4 	.word	0x200000a4
 8000ca4:	20000048 	.word	0x20000048
 8000ca8:	200000ac 	.word	0x200000ac
 8000cac:	200000a8 	.word	0x200000a8

08000cb0 <updateLedBuffer>:

int r_inc=0;
int g_inc=0;
int y_inc=0;

void updateLedBuffer(){
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
	led_buffer[0] = timerRoad1 / 10;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <updateLedBuffer+0x70>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <updateLedBuffer+0x74>)
 8000cba:	fb82 1203 	smull	r1, r2, r2, r3
 8000cbe:	1092      	asrs	r2, r2, #2
 8000cc0:	17db      	asrs	r3, r3, #31
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	4a18      	ldr	r2, [pc, #96]	; (8000d28 <updateLedBuffer+0x78>)
 8000cc6:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timerRoad1 % 10;
 8000cc8:	4b15      	ldr	r3, [pc, #84]	; (8000d20 <updateLedBuffer+0x70>)
 8000cca:	6819      	ldr	r1, [r3, #0]
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <updateLedBuffer+0x74>)
 8000cce:	fb83 2301 	smull	r2, r3, r3, r1
 8000cd2:	109a      	asrs	r2, r3, #2
 8000cd4:	17cb      	asrs	r3, r1, #31
 8000cd6:	1ad2      	subs	r2, r2, r3
 8000cd8:	4613      	mov	r3, r2
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	4413      	add	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	1aca      	subs	r2, r1, r3
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <updateLedBuffer+0x78>)
 8000ce4:	605a      	str	r2, [r3, #4]
	led_buffer[2] = timerRoad2 / 10;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <updateLedBuffer+0x7c>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <updateLedBuffer+0x74>)
 8000cec:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf0:	1092      	asrs	r2, r2, #2
 8000cf2:	17db      	asrs	r3, r3, #31
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	4a0c      	ldr	r2, [pc, #48]	; (8000d28 <updateLedBuffer+0x78>)
 8000cf8:	6093      	str	r3, [r2, #8]
	led_buffer[3] = timerRoad2 % 10;
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <updateLedBuffer+0x7c>)
 8000cfc:	6819      	ldr	r1, [r3, #0]
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <updateLedBuffer+0x74>)
 8000d00:	fb83 2301 	smull	r2, r3, r3, r1
 8000d04:	109a      	asrs	r2, r3, #2
 8000d06:	17cb      	asrs	r3, r1, #31
 8000d08:	1ad2      	subs	r2, r2, r3
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	4413      	add	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	1aca      	subs	r2, r1, r3
 8000d14:	4b04      	ldr	r3, [pc, #16]	; (8000d28 <updateLedBuffer+0x78>)
 8000d16:	60da      	str	r2, [r3, #12]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bc80      	pop	{r7}
 8000d1e:	4770      	bx	lr
 8000d20:	2000009c 	.word	0x2000009c
 8000d24:	66666667 	.word	0x66666667
 8000d28:	20000088 	.word	0x20000088
 8000d2c:	200000a0 	.word	0x200000a0

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d34:	f000 fb0a 	bl	800134c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d38:	f000 f85e 	bl	8000df8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3c:	f000 f8e4 	bl	8000f08 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d40:	f000 f896 	bl	8000e70 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d44:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <main+0x98>)
 8000d46:	f001 fa5f 	bl	8002208 <HAL_TIM_Base_Start_IT>
  setTimer3(1);
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f000 f97c 	bl	8001048 <setTimer3>
  setTimer4(1);
 8000d50:	2001      	movs	r0, #1
 8000d52:	f000 f98d 	bl	8001070 <setTimer4>
  timerRoad1 = r_val;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <main+0x9c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1d      	ldr	r2, [pc, #116]	; (8000dd0 <main+0xa0>)
 8000d5c:	6013      	str	r3, [r2, #0]
  timerRoad2 = g_val;
 8000d5e:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <main+0xa4>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a1d      	ldr	r2, [pc, #116]	; (8000dd8 <main+0xa8>)
 8000d64:	6013      	str	r3, [r2, #0]
  r_inc=r_val;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <main+0x9c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a1c      	ldr	r2, [pc, #112]	; (8000ddc <main+0xac>)
 8000d6c:	6013      	str	r3, [r2, #0]
  g_inc=g_val;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <main+0xa4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a1b      	ldr	r2, [pc, #108]	; (8000de0 <main+0xb0>)
 8000d74:	6013      	str	r3, [r2, #0]
  y_inc=y_val;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <main+0xb4>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a1b      	ldr	r2, [pc, #108]	; (8000de8 <main+0xb8>)
 8000d7c:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer3_flag == 1){
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <main+0xbc>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d104      	bne.n	8000d90 <main+0x60>
		  setTimer3(10);
 8000d86:	200a      	movs	r0, #10
 8000d88:	f000 f95e 	bl	8001048 <setTimer3>
		  updateLedBuffer();
 8000d8c:	f7ff ff90 	bl	8000cb0 <updateLedBuffer>
	  }
	  if (timer4_flag == 1){
 8000d90:	4b17      	ldr	r3, [pc, #92]	; (8000df0 <main+0xc0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d111      	bne.n	8000dbc <main+0x8c>
		  setTimer4(25);
 8000d98:	2019      	movs	r0, #25
 8000d9a:	f000 f969 	bl	8001070 <setTimer4>
		  displaySignal(index_led++);
 8000d9e:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <main+0xc4>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	1c5a      	adds	r2, r3, #1
 8000da4:	4913      	ldr	r1, [pc, #76]	; (8000df4 <main+0xc4>)
 8000da6:	600a      	str	r2, [r1, #0]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fc2d 	bl	8000608 <displaySignal>
		  if (index_led >= 4) index_led=0;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <main+0xc4>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	2b03      	cmp	r3, #3
 8000db4:	dd02      	ble.n	8000dbc <main+0x8c>
 8000db6:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <main+0xc4>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
	  }
	  fsm_traffic_light();
 8000dbc:	f7ff fda4 	bl	8000908 <fsm_traffic_light>
	  fsm_manual_run();
 8000dc0:	f7ff fc64 	bl	800068c <fsm_manual_run>
	  if (timer3_flag == 1){
 8000dc4:	e7db      	b.n	8000d7e <main+0x4e>
 8000dc6:	bf00      	nop
 8000dc8:	200000e8 	.word	0x200000e8
 8000dcc:	20000044 	.word	0x20000044
 8000dd0:	2000009c 	.word	0x2000009c
 8000dd4:	2000004c 	.word	0x2000004c
 8000dd8:	200000a0 	.word	0x200000a0
 8000ddc:	200000a4 	.word	0x200000a4
 8000de0:	200000a8 	.word	0x200000a8
 8000de4:	20000048 	.word	0x20000048
 8000de8:	200000ac 	.word	0x200000ac
 8000dec:	200000c4 	.word	0x200000c4
 8000df0:	200000cc 	.word	0x200000cc
 8000df4:	20000098 	.word	0x20000098

08000df8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b090      	sub	sp, #64	; 0x40
 8000dfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dfe:	f107 0318 	add.w	r3, r7, #24
 8000e02:	2228      	movs	r2, #40	; 0x28
 8000e04:	2100      	movs	r1, #0
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fdba 	bl	8002980 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	2200      	movs	r2, #0
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	605a      	str	r2, [r3, #4]
 8000e14:	609a      	str	r2, [r3, #8]
 8000e16:	60da      	str	r2, [r3, #12]
 8000e18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e22:	2310      	movs	r3, #16
 8000e24:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e26:	2300      	movs	r3, #0
 8000e28:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0318 	add.w	r3, r7, #24
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 fdbe 	bl	80019b0 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e3a:	f000 f8d7 	bl	8000fec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e42:	2300      	movs	r3, #0
 8000e44:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e52:	1d3b      	adds	r3, r7, #4
 8000e54:	2100      	movs	r1, #0
 8000e56:	4618      	mov	r0, r3
 8000e58:	f001 f82a 	bl	8001eb0 <HAL_RCC_ClockConfig>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e62:	f000 f8c3 	bl	8000fec <Error_Handler>
  }
}
 8000e66:	bf00      	nop
 8000e68:	3740      	adds	r7, #64	; 0x40
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
	...

08000e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e84:	463b      	mov	r3, r7
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000e96:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000ea4:	2209      	movs	r2, #9
 8000ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea8:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eae:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eb6:	f001 f957 	bl	8002168 <HAL_TIM_Base_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ec0:	f000 f894 	bl	8000fec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eca:	f107 0308 	add.w	r3, r7, #8
 8000ece:	4619      	mov	r1, r3
 8000ed0:	480c      	ldr	r0, [pc, #48]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000ed2:	f001 faed 	bl	80024b0 <HAL_TIM_ConfigClockSource>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000edc:	f000 f886 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee8:	463b      	mov	r3, r7
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_TIM2_Init+0x94>)
 8000eee:	f001 fcb9 	bl	8002864 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 f878 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	3718      	adds	r7, #24
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	200000e8 	.word	0x200000e8

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0308 	add.w	r3, r7, #8
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	4a29      	ldr	r2, [pc, #164]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f22:	f043 0304 	orr.w	r3, r3, #4
 8000f26:	6193      	str	r3, [r2, #24]
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	f003 0304 	and.w	r3, r3, #4
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	4a23      	ldr	r2, [pc, #140]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f3a:	f043 0308 	orr.w	r3, r3, #8
 8000f3e:	6193      	str	r3, [r2, #24]
 8000f40:	4b21      	ldr	r3, [pc, #132]	; (8000fc8 <MX_GPIO_Init+0xc0>)
 8000f42:	699b      	ldr	r3, [r3, #24]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|GREEN2_Pin
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	f640 71dc 	movw	r1, #4060	; 0xfdc
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <MX_GPIO_Init+0xc4>)
 8000f54:	f000 fcfb 	bl	800194e <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	481b      	ldr	r0, [pc, #108]	; (8000fcc <MX_GPIO_Init+0xc4>)
 8000f5e:	f000 fcf6 	bl	800194e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000f62:	2200      	movs	r2, #0
 8000f64:	217f      	movs	r1, #127	; 0x7f
 8000f66:	481a      	ldr	r0, [pc, #104]	; (8000fd0 <MX_GPIO_Init+0xc8>)
 8000f68:	f000 fcf1 	bl	800194e <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000f6c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000f70:	60bb      	str	r3, [r7, #8]
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f72:	2301      	movs	r3, #1
 8000f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7e:	f107 0308 	add.w	r3, r7, #8
 8000f82:	4619      	mov	r1, r3
 8000f84:	4811      	ldr	r0, [pc, #68]	; (8000fcc <MX_GPIO_Init+0xc4>)
 8000f86:	f000 fb51 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000f8a:	237f      	movs	r3, #127	; 0x7f
 8000f8c:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2302      	movs	r3, #2
 8000f98:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480b      	ldr	r0, [pc, #44]	; (8000fd0 <MX_GPIO_Init+0xc8>)
 8000fa2:	f000 fb43 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_MODE_Pin INC_Pin SET_VAL_Pin */
  GPIO_InitStruct.Pin = SET_MODE_Pin|INC_Pin|SET_VAL_Pin;
 8000fa6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000faa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0308 	add.w	r3, r7, #8
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_GPIO_Init+0xc8>)
 8000fbc:	f000 fb36 	bl	800162c <HAL_GPIO_Init>

}
 8000fc0:	bf00      	nop
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40010800 	.word	0x40010800
 8000fd0:	40010c00 	.word	0x40010c00

08000fd4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	timerRun();
 8000fdc:	f000 f870 	bl	80010c0 <timerRun>
	getKeyInput();
 8000fe0:	f7ff f8de 	bl	80001a0 <getKeyInput>
}
 8000fe4:	bf00      	nop
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <Error_Handler+0x8>
	...

08000ff8 <setTimer1>:

//timer7
int timer7_counter=0;
int timer7_flag=0;

void setTimer1(int duration){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8001000:	4a05      	ldr	r2, [pc, #20]	; (8001018 <setTimer1+0x20>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <setTimer1+0x24>)
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000b0 	.word	0x200000b0
 800101c:	200000b4 	.word	0x200000b4

08001020 <setTimer2>:

void setTimer2(int duration){
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <setTimer2+0x20>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <setTimer2+0x24>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	bc80      	pop	{r7}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200000b8 	.word	0x200000b8
 8001044:	200000bc 	.word	0x200000bc

08001048 <setTimer3>:

void setTimer3(int duration){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <setTimer3+0x20>)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001056:	4b05      	ldr	r3, [pc, #20]	; (800106c <setTimer3+0x24>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200000c0 	.word	0x200000c0
 800106c:	200000c4 	.word	0x200000c4

08001070 <setTimer4>:

void setTimer4(int duration){
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001078:	4a05      	ldr	r2, [pc, #20]	; (8001090 <setTimer4+0x20>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <setTimer4+0x24>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	bc80      	pop	{r7}
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	200000c8 	.word	0x200000c8
 8001094:	200000cc 	.word	0x200000cc

08001098 <setTimer5>:

void setTimer5(int duration){
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 80010a0:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <setTimer5+0x20>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <setTimer5+0x24>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	200000d0 	.word	0x200000d0
 80010bc:	200000d4 	.word	0x200000d4

080010c0 <timerRun>:
void setTimer7(int duration){
	timer7_counter=duration;
	timer7_flag=0;
}

void timerRun(){
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 80010c4:	4b39      	ldr	r3, [pc, #228]	; (80011ac <timerRun+0xec>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	dd0b      	ble.n	80010e4 <timerRun+0x24>
		timer1_counter--;
 80010cc:	4b37      	ldr	r3, [pc, #220]	; (80011ac <timerRun+0xec>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	4a36      	ldr	r2, [pc, #216]	; (80011ac <timerRun+0xec>)
 80010d4:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <timerRun+0xec>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	dc02      	bgt.n	80010e4 <timerRun+0x24>
			timer1_flag=1;
 80010de:	4b34      	ldr	r3, [pc, #208]	; (80011b0 <timerRun+0xf0>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80010e4:	4b33      	ldr	r3, [pc, #204]	; (80011b4 <timerRun+0xf4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	dd0b      	ble.n	8001104 <timerRun+0x44>
		timer2_counter--;
 80010ec:	4b31      	ldr	r3, [pc, #196]	; (80011b4 <timerRun+0xf4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	4a30      	ldr	r2, [pc, #192]	; (80011b4 <timerRun+0xf4>)
 80010f4:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80010f6:	4b2f      	ldr	r3, [pc, #188]	; (80011b4 <timerRun+0xf4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	dc02      	bgt.n	8001104 <timerRun+0x44>
			timer2_flag=1;
 80010fe:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <timerRun+0xf8>)
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 8001104:	4b2d      	ldr	r3, [pc, #180]	; (80011bc <timerRun+0xfc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	dd0b      	ble.n	8001124 <timerRun+0x64>
		timer3_counter--;
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <timerRun+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	3b01      	subs	r3, #1
 8001112:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <timerRun+0xfc>)
 8001114:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8001116:	4b29      	ldr	r3, [pc, #164]	; (80011bc <timerRun+0xfc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2b00      	cmp	r3, #0
 800111c:	dc02      	bgt.n	8001124 <timerRun+0x64>
			timer3_flag=1;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <timerRun+0x100>)
 8001120:	2201      	movs	r2, #1
 8001122:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <timerRun+0x104>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2b00      	cmp	r3, #0
 800112a:	dd0b      	ble.n	8001144 <timerRun+0x84>
		timer4_counter--;
 800112c:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <timerRun+0x104>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	3b01      	subs	r3, #1
 8001132:	4a24      	ldr	r2, [pc, #144]	; (80011c4 <timerRun+0x104>)
 8001134:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <timerRun+0x104>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	dc02      	bgt.n	8001144 <timerRun+0x84>
			timer4_flag=1;
 800113e:	4b22      	ldr	r3, [pc, #136]	; (80011c8 <timerRun+0x108>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8001144:	4b21      	ldr	r3, [pc, #132]	; (80011cc <timerRun+0x10c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	dd0b      	ble.n	8001164 <timerRun+0xa4>
		timer5_counter--;
 800114c:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <timerRun+0x10c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3b01      	subs	r3, #1
 8001152:	4a1e      	ldr	r2, [pc, #120]	; (80011cc <timerRun+0x10c>)
 8001154:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 8001156:	4b1d      	ldr	r3, [pc, #116]	; (80011cc <timerRun+0x10c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2b00      	cmp	r3, #0
 800115c:	dc02      	bgt.n	8001164 <timerRun+0xa4>
			timer5_flag=1;
 800115e:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <timerRun+0x110>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8001164:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <timerRun+0x114>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2b00      	cmp	r3, #0
 800116a:	dd0b      	ble.n	8001184 <timerRun+0xc4>
		timer6_counter--;
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <timerRun+0x114>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	3b01      	subs	r3, #1
 8001172:	4a18      	ldr	r2, [pc, #96]	; (80011d4 <timerRun+0x114>)
 8001174:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 8001176:	4b17      	ldr	r3, [pc, #92]	; (80011d4 <timerRun+0x114>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	dc02      	bgt.n	8001184 <timerRun+0xc4>
			timer6_flag=1;
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <timerRun+0x118>)
 8001180:	2201      	movs	r2, #1
 8001182:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter > 0){
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <timerRun+0x11c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	dd0b      	ble.n	80011a4 <timerRun+0xe4>
		timer7_counter--;
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <timerRun+0x11c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3b01      	subs	r3, #1
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <timerRun+0x11c>)
 8001194:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0){
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <timerRun+0x11c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	dc02      	bgt.n	80011a4 <timerRun+0xe4>
			timer7_flag=1;
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <timerRun+0x120>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr
 80011ac:	200000b0 	.word	0x200000b0
 80011b0:	200000b4 	.word	0x200000b4
 80011b4:	200000b8 	.word	0x200000b8
 80011b8:	200000bc 	.word	0x200000bc
 80011bc:	200000c0 	.word	0x200000c0
 80011c0:	200000c4 	.word	0x200000c4
 80011c4:	200000c8 	.word	0x200000c8
 80011c8:	200000cc 	.word	0x200000cc
 80011cc:	200000d0 	.word	0x200000d0
 80011d0:	200000d4 	.word	0x200000d4
 80011d4:	200000d8 	.word	0x200000d8
 80011d8:	200000dc 	.word	0x200000dc
 80011dc:	200000e0 	.word	0x200000e0
 80011e0:	200000e4 	.word	0x200000e4

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_MspInit+0x5c>)
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	4a14      	ldr	r2, [pc, #80]	; (8001240 <HAL_MspInit+0x5c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6193      	str	r3, [r2, #24]
 80011f6:	4b12      	ldr	r3, [pc, #72]	; (8001240 <HAL_MspInit+0x5c>)
 80011f8:	699b      	ldr	r3, [r3, #24]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
 8001200:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001202:	4b0f      	ldr	r3, [pc, #60]	; (8001240 <HAL_MspInit+0x5c>)
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <HAL_MspInit+0x5c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800120c:	61d3      	str	r3, [r2, #28]
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <HAL_MspInit+0x5c>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_MspInit+0x60>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	4a04      	ldr	r2, [pc, #16]	; (8001244 <HAL_MspInit+0x60>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001236:	bf00      	nop
 8001238:	3714      	adds	r7, #20
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40021000 	.word	0x40021000
 8001244:	40010000 	.word	0x40010000

08001248 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d113      	bne.n	8001282 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_TIM_Base_MspInit+0x44>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	201c      	movs	r0, #28
 8001278:	f000 f9a1 	bl	80015be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800127c:	201c      	movs	r0, #28
 800127e:	f000 f9ba 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40021000 	.word	0x40021000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <NMI_Handler+0x4>

08001296 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <HardFault_Handler+0x4>

0800129c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <MemManage_Handler+0x4>

080012a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <BusFault_Handler+0x4>

080012a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012ac:	e7fe      	b.n	80012ac <UsageFault_Handler+0x4>

080012ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bc80      	pop	{r7}
 80012c4:	4770      	bx	lr

080012c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bc80      	pop	{r7}
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f87f 	bl	80013d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012e4:	4802      	ldr	r0, [pc, #8]	; (80012f0 <TIM2_IRQHandler+0x10>)
 80012e6:	f000 ffdb 	bl	80022a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200000e8 	.word	0x200000e8

080012f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001300:	f7ff fff8 	bl	80012f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001306:	490c      	ldr	r1, [pc, #48]	; (8001338 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <LoopFillZerobss+0x16>)
  movs r3, #0
 800130a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800130c:	e002      	b.n	8001314 <LoopCopyDataInit>

0800130e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001312:	3304      	adds	r3, #4

08001314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001318:	d3f9      	bcc.n	800130e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800131c:	4c09      	ldr	r4, [pc, #36]	; (8001344 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001320:	e001      	b.n	8001326 <LoopFillZerobss>

08001322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001324:	3204      	adds	r2, #4

08001326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001328:	d3fb      	bcc.n	8001322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132a:	f001 fb05 	bl	8002938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800132e:	f7ff fcff 	bl	8000d30 <main>
  bx lr
 8001332:	4770      	bx	lr
  ldr r0, =_sdata
 8001334:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001338:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800133c:	080029d4 	.word	0x080029d4
  ldr r2, =_sbss
 8001340:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001344:	20000134 	.word	0x20000134

08001348 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC1_2_IRQHandler>
	...

0800134c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <HAL_Init+0x28>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a07      	ldr	r2, [pc, #28]	; (8001374 <HAL_Init+0x28>)
 8001356:	f043 0310 	orr.w	r3, r3, #16
 800135a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f923 	bl	80015a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f808 	bl	8001378 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001368:	f7ff ff3c 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	40022000 	.word	0x40022000

08001378 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <HAL_InitTick+0x54>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <HAL_InitTick+0x58>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4619      	mov	r1, r3
 800138a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f93b 	bl	8001612 <HAL_SYSTICK_Config>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e00e      	b.n	80013c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b0f      	cmp	r3, #15
 80013aa:	d80a      	bhi.n	80013c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ac:	2200      	movs	r2, #0
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	f000 f903 	bl	80015be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b8:	4a06      	ldr	r2, [pc, #24]	; (80013d4 <HAL_InitTick+0x5c>)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000050 	.word	0x20000050
 80013d0:	20000058 	.word	0x20000058
 80013d4:	20000054 	.word	0x20000054

080013d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <HAL_IncTick+0x1c>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	461a      	mov	r2, r3
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <HAL_IncTick+0x20>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4413      	add	r3, r2
 80013e8:	4a03      	ldr	r2, [pc, #12]	; (80013f8 <HAL_IncTick+0x20>)
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	20000058 	.word	0x20000058
 80013f8:	20000130 	.word	0x20000130

080013fc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b02      	ldr	r3, [pc, #8]	; (800140c <HAL_GetTick+0x10>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr
 800140c:	20000130 	.word	0x20000130

08001410 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001420:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800142c:	4013      	ands	r3, r2
 800142e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001438:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800143c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001440:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <__NVIC_SetPriorityGrouping+0x44>)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	60d3      	str	r3, [r2, #12]
}
 8001448:	bf00      	nop
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <__NVIC_GetPriorityGrouping+0x18>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	0a1b      	lsrs	r3, r3, #8
 8001462:	f003 0307 	and.w	r3, r3, #7
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	2b00      	cmp	r3, #0
 8001484:	db0b      	blt.n	800149e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4906      	ldr	r1, [pc, #24]	; (80014a8 <__NVIC_EnableIRQ+0x34>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	2001      	movs	r0, #1
 8001496:	fa00 f202 	lsl.w	r2, r0, r2
 800149a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3b01      	subs	r3, #1
 8001570:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001574:	d301      	bcc.n	800157a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001576:	2301      	movs	r3, #1
 8001578:	e00f      	b.n	800159a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800157a:	4a0a      	ldr	r2, [pc, #40]	; (80015a4 <SysTick_Config+0x40>)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001582:	210f      	movs	r1, #15
 8001584:	f04f 30ff 	mov.w	r0, #4294967295
 8001588:	f7ff ff90 	bl	80014ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <SysTick_Config+0x40>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001592:	4b04      	ldr	r3, [pc, #16]	; (80015a4 <SysTick_Config+0x40>)
 8001594:	2207      	movs	r2, #7
 8001596:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	e000e010 	.word	0xe000e010

080015a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff2d 	bl	8001410 <__NVIC_SetPriorityGrouping>
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015d0:	f7ff ff42 	bl	8001458 <__NVIC_GetPriorityGrouping>
 80015d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7ff ff90 	bl	8001500 <NVIC_EncodePriority>
 80015e0:	4602      	mov	r2, r0
 80015e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e6:	4611      	mov	r1, r2
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7ff ff5f 	bl	80014ac <__NVIC_SetPriority>
}
 80015ee:	bf00      	nop
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001600:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff35 	bl	8001474 <__NVIC_EnableIRQ>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffa2 	bl	8001564 <SysTick_Config>
 8001620:	4603      	mov	r3, r0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b08b      	sub	sp, #44	; 0x2c
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e148      	b.n	80018d2 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001640:	2201      	movs	r2, #1
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	69fa      	ldr	r2, [r7, #28]
 8001650:	4013      	ands	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	429a      	cmp	r2, r3
 800165a:	f040 8137 	bne.w	80018cc <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4aa3      	ldr	r2, [pc, #652]	; (80018f0 <HAL_GPIO_Init+0x2c4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d05e      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001668:	4aa1      	ldr	r2, [pc, #644]	; (80018f0 <HAL_GPIO_Init+0x2c4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d875      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800166e:	4aa1      	ldr	r2, [pc, #644]	; (80018f4 <HAL_GPIO_Init+0x2c8>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d058      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001674:	4a9f      	ldr	r2, [pc, #636]	; (80018f4 <HAL_GPIO_Init+0x2c8>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d86f      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800167a:	4a9f      	ldr	r2, [pc, #636]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d052      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001680:	4a9d      	ldr	r2, [pc, #628]	; (80018f8 <HAL_GPIO_Init+0x2cc>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d869      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001686:	4a9d      	ldr	r2, [pc, #628]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d04c      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 800168c:	4a9b      	ldr	r2, [pc, #620]	; (80018fc <HAL_GPIO_Init+0x2d0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d863      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 8001692:	4a9b      	ldr	r2, [pc, #620]	; (8001900 <HAL_GPIO_Init+0x2d4>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d046      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
 8001698:	4a99      	ldr	r2, [pc, #612]	; (8001900 <HAL_GPIO_Init+0x2d4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d85d      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d82a      	bhi.n	80016f8 <HAL_GPIO_Init+0xcc>
 80016a2:	2b12      	cmp	r3, #18
 80016a4:	d859      	bhi.n	800175a <HAL_GPIO_Init+0x12e>
 80016a6:	a201      	add	r2, pc, #4	; (adr r2, 80016ac <HAL_GPIO_Init+0x80>)
 80016a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ac:	08001727 	.word	0x08001727
 80016b0:	08001701 	.word	0x08001701
 80016b4:	08001713 	.word	0x08001713
 80016b8:	08001755 	.word	0x08001755
 80016bc:	0800175b 	.word	0x0800175b
 80016c0:	0800175b 	.word	0x0800175b
 80016c4:	0800175b 	.word	0x0800175b
 80016c8:	0800175b 	.word	0x0800175b
 80016cc:	0800175b 	.word	0x0800175b
 80016d0:	0800175b 	.word	0x0800175b
 80016d4:	0800175b 	.word	0x0800175b
 80016d8:	0800175b 	.word	0x0800175b
 80016dc:	0800175b 	.word	0x0800175b
 80016e0:	0800175b 	.word	0x0800175b
 80016e4:	0800175b 	.word	0x0800175b
 80016e8:	0800175b 	.word	0x0800175b
 80016ec:	0800175b 	.word	0x0800175b
 80016f0:	08001709 	.word	0x08001709
 80016f4:	0800171d 	.word	0x0800171d
 80016f8:	4a82      	ldr	r2, [pc, #520]	; (8001904 <HAL_GPIO_Init+0x2d8>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fe:	e02c      	b.n	800175a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e029      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	3304      	adds	r3, #4
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e024      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	68db      	ldr	r3, [r3, #12]
 8001716:	3308      	adds	r3, #8
 8001718:	623b      	str	r3, [r7, #32]
          break;
 800171a:	e01f      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	330c      	adds	r3, #12
 8001722:	623b      	str	r3, [r7, #32]
          break;
 8001724:	e01a      	b.n	800175c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d102      	bne.n	8001734 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172e:	2304      	movs	r3, #4
 8001730:	623b      	str	r3, [r7, #32]
          break;
 8001732:	e013      	b.n	800175c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d105      	bne.n	8001748 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800173c:	2308      	movs	r3, #8
 800173e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	611a      	str	r2, [r3, #16]
          break;
 8001746:	e009      	b.n	800175c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001748:	2308      	movs	r3, #8
 800174a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	615a      	str	r2, [r3, #20]
          break;
 8001752:	e003      	b.n	800175c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001754:	2300      	movs	r3, #0
 8001756:	623b      	str	r3, [r7, #32]
          break;
 8001758:	e000      	b.n	800175c <HAL_GPIO_Init+0x130>
          break;
 800175a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2bff      	cmp	r3, #255	; 0xff
 8001760:	d801      	bhi.n	8001766 <HAL_GPIO_Init+0x13a>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	e001      	b.n	800176a <HAL_GPIO_Init+0x13e>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3304      	adds	r3, #4
 800176a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d802      	bhi.n	8001778 <HAL_GPIO_Init+0x14c>
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	e002      	b.n	800177e <HAL_GPIO_Init+0x152>
 8001778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177a:	3b08      	subs	r3, #8
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	210f      	movs	r1, #15
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	401a      	ands	r2, r3
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	fa01 f303 	lsl.w	r3, r1, r3
 8001798:	431a      	orrs	r2, r3
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	f000 8090 	beq.w	80018cc <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017ac:	4b56      	ldr	r3, [pc, #344]	; (8001908 <HAL_GPIO_Init+0x2dc>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	4a55      	ldr	r2, [pc, #340]	; (8001908 <HAL_GPIO_Init+0x2dc>)
 80017b2:	f043 0301 	orr.w	r3, r3, #1
 80017b6:	6193      	str	r3, [r2, #24]
 80017b8:	4b53      	ldr	r3, [pc, #332]	; (8001908 <HAL_GPIO_Init+0x2dc>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	f003 0301 	and.w	r3, r3, #1
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c4:	4a51      	ldr	r2, [pc, #324]	; (800190c <HAL_GPIO_Init+0x2e0>)
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3302      	adds	r3, #2
 80017cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	4a49      	ldr	r2, [pc, #292]	; (8001910 <HAL_GPIO_Init+0x2e4>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d00d      	beq.n	800180c <HAL_GPIO_Init+0x1e0>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	4a48      	ldr	r2, [pc, #288]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d007      	beq.n	8001808 <HAL_GPIO_Init+0x1dc>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4a47      	ldr	r2, [pc, #284]	; (8001918 <HAL_GPIO_Init+0x2ec>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d101      	bne.n	8001804 <HAL_GPIO_Init+0x1d8>
 8001800:	2302      	movs	r3, #2
 8001802:	e004      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 8001804:	2303      	movs	r3, #3
 8001806:	e002      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 8001808:	2301      	movs	r3, #1
 800180a:	e000      	b.n	800180e <HAL_GPIO_Init+0x1e2>
 800180c:	2300      	movs	r3, #0
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	f002 0203 	and.w	r2, r2, #3
 8001814:	0092      	lsls	r2, r2, #2
 8001816:	4093      	lsls	r3, r2
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800181e:	493b      	ldr	r1, [pc, #236]	; (800190c <HAL_GPIO_Init+0x2e0>)
 8001820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d006      	beq.n	8001846 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001838:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_GPIO_Init+0x2f0>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4937      	ldr	r1, [pc, #220]	; (800191c <HAL_GPIO_Init+0x2f0>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	4313      	orrs	r3, r2
 8001842:	608b      	str	r3, [r1, #8]
 8001844:	e006      	b.n	8001854 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001846:	4b35      	ldr	r3, [pc, #212]	; (800191c <HAL_GPIO_Init+0x2f0>)
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	43db      	mvns	r3, r3
 800184e:	4933      	ldr	r1, [pc, #204]	; (800191c <HAL_GPIO_Init+0x2f0>)
 8001850:	4013      	ands	r3, r2
 8001852:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d006      	beq.n	800186e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001860:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_GPIO_Init+0x2f0>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	492d      	ldr	r1, [pc, #180]	; (800191c <HAL_GPIO_Init+0x2f0>)
 8001866:	69bb      	ldr	r3, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	60cb      	str	r3, [r1, #12]
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_GPIO_Init+0x2f0>)
 8001870:	68da      	ldr	r2, [r3, #12]
 8001872:	69bb      	ldr	r3, [r7, #24]
 8001874:	43db      	mvns	r3, r3
 8001876:	4929      	ldr	r1, [pc, #164]	; (800191c <HAL_GPIO_Init+0x2f0>)
 8001878:	4013      	ands	r3, r2
 800187a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d006      	beq.n	8001896 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <HAL_GPIO_Init+0x2f0>)
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	4923      	ldr	r1, [pc, #140]	; (800191c <HAL_GPIO_Init+0x2f0>)
 800188e:	69bb      	ldr	r3, [r7, #24]
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]
 8001894:	e006      	b.n	80018a4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_GPIO_Init+0x2f0>)
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	43db      	mvns	r3, r3
 800189e:	491f      	ldr	r1, [pc, #124]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b0:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4919      	ldr	r1, [pc, #100]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e006      	b.n	80018cc <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	43db      	mvns	r3, r3
 80018c6:	4915      	ldr	r1, [pc, #84]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	3301      	adds	r3, #1
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f aeaf 	bne.w	8001640 <HAL_GPIO_Init+0x14>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	372c      	adds	r7, #44	; 0x2c
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	10320000 	.word	0x10320000
 80018f4:	10310000 	.word	0x10310000
 80018f8:	10220000 	.word	0x10220000
 80018fc:	10210000 	.word	0x10210000
 8001900:	10120000 	.word	0x10120000
 8001904:	10110000 	.word	0x10110000
 8001908:	40021000 	.word	0x40021000
 800190c:	40010000 	.word	0x40010000
 8001910:	40010800 	.word	0x40010800
 8001914:	40010c00 	.word	0x40010c00
 8001918:	40011000 	.word	0x40011000
 800191c:	40010400 	.word	0x40010400

08001920 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	460b      	mov	r3, r1
 800192a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689a      	ldr	r2, [r3, #8]
 8001930:	887b      	ldrh	r3, [r7, #2]
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001938:	2301      	movs	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e001      	b.n	8001942 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001942:	7bfb      	ldrb	r3, [r7, #15]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3714      	adds	r7, #20
 8001948:	46bd      	mov	sp, r7
 800194a:	bc80      	pop	{r7}
 800194c:	4770      	bx	lr

0800194e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
 8001956:	460b      	mov	r3, r1
 8001958:	807b      	strh	r3, [r7, #2]
 800195a:	4613      	mov	r3, r2
 800195c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800195e:	787b      	ldrb	r3, [r7, #1]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001964:	887a      	ldrh	r2, [r7, #2]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800196a:	e003      	b.n	8001974 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800196c:	887b      	ldrh	r3, [r7, #2]
 800196e:	041a      	lsls	r2, r3, #16
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	611a      	str	r2, [r3, #16]
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800197e:	b480      	push	{r7}
 8001980:	b085      	sub	sp, #20
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
 8001986:	460b      	mov	r3, r1
 8001988:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001990:	887a      	ldrh	r2, [r7, #2]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	4013      	ands	r3, r2
 8001996:	041a      	lsls	r2, r3, #16
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	43d9      	mvns	r1, r3
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	400b      	ands	r3, r1
 80019a0:	431a      	orrs	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	611a      	str	r2, [r3, #16]
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bc80      	pop	{r7}
 80019ae:	4770      	bx	lr

080019b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b086      	sub	sp, #24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e26c      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8087 	beq.w	8001ade <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019d0:	4b92      	ldr	r3, [pc, #584]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 030c 	and.w	r3, r3, #12
 80019d8:	2b04      	cmp	r3, #4
 80019da:	d00c      	beq.n	80019f6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019dc:	4b8f      	ldr	r3, [pc, #572]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 030c 	and.w	r3, r3, #12
 80019e4:	2b08      	cmp	r3, #8
 80019e6:	d112      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
 80019e8:	4b8c      	ldr	r3, [pc, #560]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019f4:	d10b      	bne.n	8001a0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f6:	4b89      	ldr	r3, [pc, #548]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d06c      	beq.n	8001adc <HAL_RCC_OscConfig+0x12c>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d168      	bne.n	8001adc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e246      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a16:	d106      	bne.n	8001a26 <HAL_RCC_OscConfig+0x76>
 8001a18:	4b80      	ldr	r3, [pc, #512]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a7f      	ldr	r2, [pc, #508]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	e02e      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d10c      	bne.n	8001a48 <HAL_RCC_OscConfig+0x98>
 8001a2e:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7a      	ldr	r2, [pc, #488]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b78      	ldr	r3, [pc, #480]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a77      	ldr	r2, [pc, #476]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0xbc>
 8001a52:	4b72      	ldr	r3, [pc, #456]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a71      	ldr	r2, [pc, #452]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b6f      	ldr	r3, [pc, #444]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6e      	ldr	r2, [pc, #440]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xd4>
 8001a6c:	4b6b      	ldr	r3, [pc, #428]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a6a      	ldr	r2, [pc, #424]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a67      	ldr	r2, [pc, #412]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fcb6 	bl	80013fc <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff fcb2 	bl	80013fc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1fa      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xe4>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fca2 	bl	80013fc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff fc9e 	bl	80013fc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1e6      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b53      	ldr	r3, [pc, #332]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x10c>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aea:	4b4c      	ldr	r3, [pc, #304]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001af6:	4b49      	ldr	r3, [pc, #292]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 030c 	and.w	r3, r3, #12
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d11c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x18c>
 8001b02:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x176>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	691b      	ldr	r3, [r3, #16]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e1ba      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b3d      	ldr	r3, [pc, #244]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4939      	ldr	r1, [pc, #228]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	e03a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	691b      	ldr	r3, [r3, #16]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b44:	4b36      	ldr	r3, [pc, #216]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fc57 	bl	80013fc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff fc53 	bl	80013fc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e19b      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	4b2d      	ldr	r3, [pc, #180]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b2a      	ldr	r3, [pc, #168]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4927      	ldr	r1, [pc, #156]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e015      	b.n	8001bb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b26      	ldr	r3, [pc, #152]	; (8001c20 <HAL_RCC_OscConfig+0x270>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fc36 	bl	80013fc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc32 	bl	80013fc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e17a      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	4b1d      	ldr	r3, [pc, #116]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d03a      	beq.n	8001c34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d019      	beq.n	8001bfa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc6:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bcc:	f7ff fc16 	bl	80013fc <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff fc12 	bl	80013fc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e15a      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f000 fa9a 	bl	800212c <RCC_Delay>
 8001bf8:	e01c      	b.n	8001c34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfa:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c00:	f7ff fbfc 	bl	80013fc <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c06:	e00f      	b.n	8001c28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fbf8 	bl	80013fc <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d908      	bls.n	8001c28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e140      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	42420000 	.word	0x42420000
 8001c24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c28:	4b9e      	ldr	r3, [pc, #632]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1e9      	bne.n	8001c08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0304 	and.w	r3, r3, #4
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f000 80a6 	beq.w	8001d8e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c46:	4b97      	ldr	r3, [pc, #604]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d10d      	bne.n	8001c6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c52:	4b94      	ldr	r3, [pc, #592]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	4a93      	ldr	r2, [pc, #588]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	61d3      	str	r3, [r2, #28]
 8001c5e:	4b91      	ldr	r3, [pc, #580]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001c60:	69db      	ldr	r3, [r3, #28]
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	60bb      	str	r3, [r7, #8]
 8001c68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d118      	bne.n	8001cac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7a:	4b8b      	ldr	r3, [pc, #556]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a8a      	ldr	r2, [pc, #552]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fbb9 	bl	80013fc <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8e:	f7ff fbb5 	bl	80013fc <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b64      	cmp	r3, #100	; 0x64
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e0fd      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca0:	4b81      	ldr	r3, [pc, #516]	; (8001ea8 <HAL_RCC_OscConfig+0x4f8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0f0      	beq.n	8001c8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d106      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x312>
 8001cb4:	4b7b      	ldr	r3, [pc, #492]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a7a      	ldr	r2, [pc, #488]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	f043 0301 	orr.w	r3, r3, #1
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	e02d      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x334>
 8001cca:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a75      	ldr	r2, [pc, #468]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	4b73      	ldr	r3, [pc, #460]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a72      	ldr	r2, [pc, #456]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	e01c      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	2b05      	cmp	r3, #5
 8001cea:	d10c      	bne.n	8001d06 <HAL_RCC_OscConfig+0x356>
 8001cec:	4b6d      	ldr	r3, [pc, #436]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cee:	6a1b      	ldr	r3, [r3, #32]
 8001cf0:	4a6c      	ldr	r2, [pc, #432]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cf2:	f043 0304 	orr.w	r3, r3, #4
 8001cf6:	6213      	str	r3, [r2, #32]
 8001cf8:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4a69      	ldr	r2, [pc, #420]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6213      	str	r3, [r2, #32]
 8001d04:	e00b      	b.n	8001d1e <HAL_RCC_OscConfig+0x36e>
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	4b64      	ldr	r3, [pc, #400]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d14:	6a1b      	ldr	r3, [r3, #32]
 8001d16:	4a63      	ldr	r2, [pc, #396]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	f023 0304 	bic.w	r3, r3, #4
 8001d1c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d015      	beq.n	8001d52 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb69 	bl	80013fc <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fb65 	bl	80013fc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0ab      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d46:	6a1b      	ldr	r3, [r3, #32]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d0ee      	beq.n	8001d2e <HAL_RCC_OscConfig+0x37e>
 8001d50:	e014      	b.n	8001d7c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fb53 	bl	80013fc <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f7ff fb4f 	bl	80013fc <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e095      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d70:	4b4c      	ldr	r3, [pc, #304]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d72:	6a1b      	ldr	r3, [r3, #32]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1ee      	bne.n	8001d5a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d7c:	7dfb      	ldrb	r3, [r7, #23]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d105      	bne.n	8001d8e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d82:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	4a47      	ldr	r2, [pc, #284]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d8c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	69db      	ldr	r3, [r3, #28]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8081 	beq.w	8001e9a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d98:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d061      	beq.n	8001e68 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d146      	bne.n	8001e3a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dac:	4b3f      	ldr	r3, [pc, #252]	; (8001eac <HAL_RCC_OscConfig+0x4fc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fb23 	bl	80013fc <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff fb1f 	bl	80013fc <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e067      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dcc:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1f0      	bne.n	8001dba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d108      	bne.n	8001df4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001de2:	4b30      	ldr	r3, [pc, #192]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	492d      	ldr	r1, [pc, #180]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001df4:	4b2b      	ldr	r3, [pc, #172]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a19      	ldr	r1, [r3, #32]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	430b      	orrs	r3, r1
 8001e06:	4927      	ldr	r1, [pc, #156]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e0c:	4b27      	ldr	r3, [pc, #156]	; (8001eac <HAL_RCC_OscConfig+0x4fc>)
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e12:	f7ff faf3 	bl	80013fc <HAL_GetTick>
 8001e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e18:	e008      	b.n	8001e2c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e1a:	f7ff faef 	bl	80013fc <HAL_GetTick>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	d901      	bls.n	8001e2c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	e037      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d0f0      	beq.n	8001e1a <HAL_RCC_OscConfig+0x46a>
 8001e38:	e02f      	b.n	8001e9a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_RCC_OscConfig+0x4fc>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e40:	f7ff fadc 	bl	80013fc <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e48:	f7ff fad8 	bl	80013fc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e020      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e5a:	4b12      	ldr	r3, [pc, #72]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x498>
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e013      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_RCC_OscConfig+0x4f4>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d106      	bne.n	8001e96 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d001      	beq.n	8001e9a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	42420060 	.word	0x42420060

08001eb0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d0      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ec4:	4b6a      	ldr	r3, [pc, #424]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	683a      	ldr	r2, [r7, #0]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d910      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ed2:	4b67      	ldr	r3, [pc, #412]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f023 0207 	bic.w	r2, r3, #7
 8001eda:	4965      	ldr	r1, [pc, #404]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee2:	4b63      	ldr	r3, [pc, #396]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0307 	and.w	r3, r3, #7
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	d001      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b8      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0302 	and.w	r3, r3, #2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d020      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0304 	and.w	r3, r3, #4
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f0c:	4b59      	ldr	r3, [pc, #356]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	4a58      	ldr	r2, [pc, #352]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f16:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f24:	4b53      	ldr	r3, [pc, #332]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	4a52      	ldr	r2, [pc, #328]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f2e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f30:	4b50      	ldr	r3, [pc, #320]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	494d      	ldr	r1, [pc, #308]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d040      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f56:	4b47      	ldr	r3, [pc, #284]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d115      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e07f      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d109      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e073      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	4b3d      	ldr	r3, [pc, #244]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e06b      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f8e:	4b39      	ldr	r3, [pc, #228]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f023 0203 	bic.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	4936      	ldr	r1, [pc, #216]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fa0:	f7ff fa2c 	bl	80013fc <HAL_GetTick>
 8001fa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fa6:	e00a      	b.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f7ff fa28 	bl	80013fc <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e053      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	4b2d      	ldr	r3, [pc, #180]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f003 020c 	and.w	r2, r3, #12
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d1eb      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0307 	and.w	r3, r3, #7
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d210      	bcs.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 0207 	bic.w	r2, r3, #7
 8001fe6:	4922      	ldr	r1, [pc, #136]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e032      	b.n	8002066 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0304 	and.w	r3, r3, #4
 8002008:	2b00      	cmp	r3, #0
 800200a:	d008      	beq.n	800201e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	4916      	ldr	r1, [pc, #88]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800202a:	4b12      	ldr	r3, [pc, #72]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	490e      	ldr	r1, [pc, #56]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	4313      	orrs	r3, r2
 800203c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800203e:	f000 f821 	bl	8002084 <HAL_RCC_GetSysClockFreq>
 8002042:	4602      	mov	r2, r0
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_ClockConfig+0x1c4>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	091b      	lsrs	r3, r3, #4
 800204a:	f003 030f 	and.w	r3, r3, #15
 800204e:	490a      	ldr	r1, [pc, #40]	; (8002078 <HAL_RCC_ClockConfig+0x1c8>)
 8002050:	5ccb      	ldrb	r3, [r1, r3]
 8002052:	fa22 f303 	lsr.w	r3, r2, r3
 8002056:	4a09      	ldr	r2, [pc, #36]	; (800207c <HAL_RCC_ClockConfig+0x1cc>)
 8002058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800205a:	4b09      	ldr	r3, [pc, #36]	; (8002080 <HAL_RCC_ClockConfig+0x1d0>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f98a 	bl	8001378 <HAL_InitTick>

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40022000 	.word	0x40022000
 8002074:	40021000 	.word	0x40021000
 8002078:	080029a8 	.word	0x080029a8
 800207c:	20000050 	.word	0x20000050
 8002080:	20000054 	.word	0x20000054

08002084 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002084:	b480      	push	{r7}
 8002086:	b087      	sub	sp, #28
 8002088:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	60fb      	str	r3, [r7, #12]
 800208e:	2300      	movs	r3, #0
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800209e:	4b1e      	ldr	r3, [pc, #120]	; (8002118 <HAL_RCC_GetSysClockFreq+0x94>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 030c 	and.w	r3, r3, #12
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	d002      	beq.n	80020b4 <HAL_RCC_GetSysClockFreq+0x30>
 80020ae:	2b08      	cmp	r3, #8
 80020b0:	d003      	beq.n	80020ba <HAL_RCC_GetSysClockFreq+0x36>
 80020b2:	e027      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 80020b6:	613b      	str	r3, [r7, #16]
      break;
 80020b8:	e027      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020c4:	5cd3      	ldrb	r3, [r2, r3]
 80020c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020d2:	4b11      	ldr	r3, [pc, #68]	; (8002118 <HAL_RCC_GetSysClockFreq+0x94>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	0c5b      	lsrs	r3, r3, #17
 80020d8:	f003 0301 	and.w	r3, r3, #1
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020de:	5cd3      	ldrb	r3, [r2, r3]
 80020e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a0d      	ldr	r2, [pc, #52]	; (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 80020e6:	fb02 f203 	mul.w	r2, r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	e004      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a0c      	ldr	r2, [pc, #48]	; (8002128 <HAL_RCC_GetSysClockFreq+0xa4>)
 80020f8:	fb02 f303 	mul.w	r3, r2, r3
 80020fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	613b      	str	r3, [r7, #16]
      break;
 8002102:	e002      	b.n	800210a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_RCC_GetSysClockFreq+0x98>)
 8002106:	613b      	str	r3, [r7, #16]
      break;
 8002108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800210a:	693b      	ldr	r3, [r7, #16]
}
 800210c:	4618      	mov	r0, r3
 800210e:	371c      	adds	r7, #28
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	007a1200 	.word	0x007a1200
 8002120:	080029b8 	.word	0x080029b8
 8002124:	080029c8 	.word	0x080029c8
 8002128:	003d0900 	.word	0x003d0900

0800212c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002134:	4b0a      	ldr	r3, [pc, #40]	; (8002160 <RCC_Delay+0x34>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	; (8002164 <RCC_Delay+0x38>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	0a5b      	lsrs	r3, r3, #9
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	fb02 f303 	mul.w	r3, r2, r3
 8002146:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002148:	bf00      	nop
  }
  while (Delay --);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1e5a      	subs	r2, r3, #1
 800214e:	60fa      	str	r2, [r7, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <RCC_Delay+0x1c>
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	bc80      	pop	{r7}
 800215e:	4770      	bx	lr
 8002160:	20000050 	.word	0x20000050
 8002164:	10624dd3 	.word	0x10624dd3

08002168 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e041      	b.n	80021fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002180:	b2db      	uxtb	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff f85a 	bl	8001248 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2202      	movs	r2, #2
 8002198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3304      	adds	r3, #4
 80021a4:	4619      	mov	r1, r3
 80021a6:	4610      	mov	r0, r2
 80021a8:	f000 fa6e 	bl	8002688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2201      	movs	r2, #1
 80021b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2201      	movs	r2, #1
 80021c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2201      	movs	r2, #1
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2201      	movs	r2, #1
 80021e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
	...

08002208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b01      	cmp	r3, #1
 800221a:	d001      	beq.n	8002220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e035      	b.n	800228c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2202      	movs	r2, #2
 8002224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a16      	ldr	r2, [pc, #88]	; (8002298 <HAL_TIM_Base_Start_IT+0x90>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_TIM_Base_Start_IT+0x4e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800224a:	d004      	beq.n	8002256 <HAL_TIM_Base_Start_IT+0x4e>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a12      	ldr	r2, [pc, #72]	; (800229c <HAL_TIM_Base_Start_IT+0x94>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d111      	bne.n	800227a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d010      	beq.n	800228a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002278:	e007      	b.n	800228a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	bc80      	pop	{r7}
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40000400 	.word	0x40000400

080022a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d122      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d11b      	bne.n	80022fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f06f 0202 	mvn.w	r2, #2
 80022cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f9b4 	bl	8002650 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e005      	b.n	80022f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f9a7 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f000 f9b6 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2200      	movs	r2, #0
 80022fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	f003 0304 	and.w	r3, r3, #4
 8002306:	2b04      	cmp	r3, #4
 8002308:	d122      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f06f 0204 	mvn.w	r2, #4
 8002320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2202      	movs	r2, #2
 8002326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f98a 	bl	8002650 <HAL_TIM_IC_CaptureCallback>
 800233c:	e005      	b.n	800234a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 f97d 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f000 f98c 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b08      	cmp	r3, #8
 800235c:	d122      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b08      	cmp	r3, #8
 800236a:	d11b      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0208 	mvn.w	r2, #8
 8002374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2204      	movs	r2, #4
 800237a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69db      	ldr	r3, [r3, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f960 	bl	8002650 <HAL_TIM_IC_CaptureCallback>
 8002390:	e005      	b.n	800239e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f000 f953 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f962 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b10      	cmp	r3, #16
 80023b0:	d122      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d11b      	bne.n	80023f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f06f 0210 	mvn.w	r2, #16
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2208      	movs	r2, #8
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f936 	bl	8002650 <HAL_TIM_IC_CaptureCallback>
 80023e4:	e005      	b.n	80023f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f000 f929 	bl	800263e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 f938 	bl	8002662 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b01      	cmp	r3, #1
 8002404:	d10e      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b01      	cmp	r3, #1
 8002412:	d107      	bne.n	8002424 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f06f 0201 	mvn.w	r2, #1
 800241c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7fe fdd8 	bl	8000fd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800242e:	2b80      	cmp	r3, #128	; 0x80
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243c:	2b80      	cmp	r3, #128	; 0x80
 800243e:	d107      	bne.n	8002450 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa6b 	bl	8002926 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800245a:	2b40      	cmp	r3, #64	; 0x40
 800245c:	d10e      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002468:	2b40      	cmp	r3, #64	; 0x40
 800246a:	d107      	bne.n	800247c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 f8fc 	bl	8002674 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b20      	cmp	r3, #32
 8002488:	d10e      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b20      	cmp	r3, #32
 8002496:	d107      	bne.n	80024a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f06f 0220 	mvn.w	r2, #32
 80024a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fa36 	bl	8002914 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024ba:	2300      	movs	r3, #0
 80024bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d101      	bne.n	80024cc <HAL_TIM_ConfigClockSource+0x1c>
 80024c8:	2302      	movs	r3, #2
 80024ca:	e0b4      	b.n	8002636 <HAL_TIM_ConfigClockSource+0x186>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2202      	movs	r2, #2
 80024d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80024ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68ba      	ldr	r2, [r7, #8]
 80024fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002504:	d03e      	beq.n	8002584 <HAL_TIM_ConfigClockSource+0xd4>
 8002506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800250a:	f200 8087 	bhi.w	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800250e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002512:	f000 8086 	beq.w	8002622 <HAL_TIM_ConfigClockSource+0x172>
 8002516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251a:	d87f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800251c:	2b70      	cmp	r3, #112	; 0x70
 800251e:	d01a      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0xa6>
 8002520:	2b70      	cmp	r3, #112	; 0x70
 8002522:	d87b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d050      	beq.n	80025ca <HAL_TIM_ConfigClockSource+0x11a>
 8002528:	2b60      	cmp	r3, #96	; 0x60
 800252a:	d877      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800252c:	2b50      	cmp	r3, #80	; 0x50
 800252e:	d03c      	beq.n	80025aa <HAL_TIM_ConfigClockSource+0xfa>
 8002530:	2b50      	cmp	r3, #80	; 0x50
 8002532:	d873      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002534:	2b40      	cmp	r3, #64	; 0x40
 8002536:	d058      	beq.n	80025ea <HAL_TIM_ConfigClockSource+0x13a>
 8002538:	2b40      	cmp	r3, #64	; 0x40
 800253a:	d86f      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800253c:	2b30      	cmp	r3, #48	; 0x30
 800253e:	d064      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002540:	2b30      	cmp	r3, #48	; 0x30
 8002542:	d86b      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 8002544:	2b20      	cmp	r3, #32
 8002546:	d060      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002548:	2b20      	cmp	r3, #32
 800254a:	d867      	bhi.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05c      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002550:	2b10      	cmp	r3, #16
 8002552:	d05a      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x15a>
 8002554:	e062      	b.n	800261c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6899      	ldr	r1, [r3, #8]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f000 f95e 	bl	8002826 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	609a      	str	r2, [r3, #8]
      break;
 8002582:	e04f      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6818      	ldr	r0, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6899      	ldr	r1, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f000 f947 	bl	8002826 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025a6:	609a      	str	r2, [r3, #8]
      break;
 80025a8:	e03c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6818      	ldr	r0, [r3, #0]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	6859      	ldr	r1, [r3, #4]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	68db      	ldr	r3, [r3, #12]
 80025b6:	461a      	mov	r2, r3
 80025b8:	f000 f8be 	bl	8002738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2150      	movs	r1, #80	; 0x50
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 f915 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 80025c8:	e02c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	6859      	ldr	r1, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f000 f8dc 	bl	8002794 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2160      	movs	r1, #96	; 0x60
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f905 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 80025e8:	e01c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6818      	ldr	r0, [r3, #0]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6859      	ldr	r1, [r3, #4]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	461a      	mov	r2, r3
 80025f8:	f000 f89e 	bl	8002738 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f8f5 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 8002608:	e00c      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4619      	mov	r1, r3
 8002614:	4610      	mov	r0, r2
 8002616:	f000 f8ec 	bl	80027f2 <TIM_ITRx_SetConfig>
      break;
 800261a:	e003      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	73fb      	strb	r3, [r7, #15]
      break;
 8002620:	e000      	b.n	8002624 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002634:	7bfb      	ldrb	r3, [r7, #15]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3710      	adds	r7, #16
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800263e:	b480      	push	{r7}
 8002640:	b083      	sub	sp, #12
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	bc80      	pop	{r7}
 8002660:	4770      	bx	lr

08002662 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a25      	ldr	r2, [pc, #148]	; (8002730 <TIM_Base_SetConfig+0xa8>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d007      	beq.n	80026b0 <TIM_Base_SetConfig+0x28>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a6:	d003      	beq.n	80026b0 <TIM_Base_SetConfig+0x28>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a22      	ldr	r2, [pc, #136]	; (8002734 <TIM_Base_SetConfig+0xac>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d108      	bne.n	80026c2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <TIM_Base_SetConfig+0xa8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d007      	beq.n	80026da <TIM_Base_SetConfig+0x52>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d0:	d003      	beq.n	80026da <TIM_Base_SetConfig+0x52>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a17      	ldr	r2, [pc, #92]	; (8002734 <TIM_Base_SetConfig+0xac>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d108      	bne.n	80026ec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	68fa      	ldr	r2, [r7, #12]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	68fa      	ldr	r2, [r7, #12]
 80026fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	689a      	ldr	r2, [r3, #8]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a07      	ldr	r2, [pc, #28]	; (8002730 <TIM_Base_SetConfig+0xa8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d103      	bne.n	8002720 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	691a      	ldr	r2, [r3, #16]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	615a      	str	r2, [r3, #20]
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40012c00 	.word	0x40012c00
 8002734:	40000400 	.word	0x40000400

08002738 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0201 	bic.w	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 030a 	bic.w	r3, r3, #10
 8002774:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	621a      	str	r2, [r3, #32]
}
 800278a:	bf00      	nop
 800278c:	371c      	adds	r7, #28
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6a1b      	ldr	r3, [r3, #32]
 80027aa:	f023 0210 	bic.w	r2, r3, #16
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	699b      	ldr	r3, [r3, #24]
 80027b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80027be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	031b      	lsls	r3, r3, #12
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80027d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	693a      	ldr	r2, [r7, #16]
 80027e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	621a      	str	r2, [r3, #32]
}
 80027e8:	bf00      	nop
 80027ea:	371c      	adds	r7, #28
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800280a:	683a      	ldr	r2, [r7, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	f043 0307 	orr.w	r3, r3, #7
 8002814:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr

08002826 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002826:	b480      	push	{r7}
 8002828:	b087      	sub	sp, #28
 800282a:	af00      	add	r7, sp, #0
 800282c:	60f8      	str	r0, [r7, #12]
 800282e:	60b9      	str	r1, [r7, #8]
 8002830:	607a      	str	r2, [r7, #4]
 8002832:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002840:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	021a      	lsls	r2, r3, #8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	431a      	orrs	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4313      	orrs	r3, r2
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	4313      	orrs	r3, r2
 8002852:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	609a      	str	r2, [r3, #8]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002878:	2302      	movs	r3, #2
 800287a:	e041      	b.n	8002900 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a14      	ldr	r2, [pc, #80]	; (800290c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d009      	beq.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028c8:	d004      	beq.n	80028d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a10      	ldr	r2, [pc, #64]	; (8002910 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d10c      	bne.n	80028ee <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	bc80      	pop	{r7}
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40000400 	.word	0x40000400

08002914 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	bc80      	pop	{r7}
 8002936:	4770      	bx	lr

08002938 <__libc_init_array>:
 8002938:	b570      	push	{r4, r5, r6, lr}
 800293a:	2600      	movs	r6, #0
 800293c:	4d0c      	ldr	r5, [pc, #48]	; (8002970 <__libc_init_array+0x38>)
 800293e:	4c0d      	ldr	r4, [pc, #52]	; (8002974 <__libc_init_array+0x3c>)
 8002940:	1b64      	subs	r4, r4, r5
 8002942:	10a4      	asrs	r4, r4, #2
 8002944:	42a6      	cmp	r6, r4
 8002946:	d109      	bne.n	800295c <__libc_init_array+0x24>
 8002948:	f000 f822 	bl	8002990 <_init>
 800294c:	2600      	movs	r6, #0
 800294e:	4d0a      	ldr	r5, [pc, #40]	; (8002978 <__libc_init_array+0x40>)
 8002950:	4c0a      	ldr	r4, [pc, #40]	; (800297c <__libc_init_array+0x44>)
 8002952:	1b64      	subs	r4, r4, r5
 8002954:	10a4      	asrs	r4, r4, #2
 8002956:	42a6      	cmp	r6, r4
 8002958:	d105      	bne.n	8002966 <__libc_init_array+0x2e>
 800295a:	bd70      	pop	{r4, r5, r6, pc}
 800295c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002960:	4798      	blx	r3
 8002962:	3601      	adds	r6, #1
 8002964:	e7ee      	b.n	8002944 <__libc_init_array+0xc>
 8002966:	f855 3b04 	ldr.w	r3, [r5], #4
 800296a:	4798      	blx	r3
 800296c:	3601      	adds	r6, #1
 800296e:	e7f2      	b.n	8002956 <__libc_init_array+0x1e>
 8002970:	080029cc 	.word	0x080029cc
 8002974:	080029cc 	.word	0x080029cc
 8002978:	080029cc 	.word	0x080029cc
 800297c:	080029d0 	.word	0x080029d0

08002980 <memset>:
 8002980:	4603      	mov	r3, r0
 8002982:	4402      	add	r2, r0
 8002984:	4293      	cmp	r3, r2
 8002986:	d100      	bne.n	800298a <memset+0xa>
 8002988:	4770      	bx	lr
 800298a:	f803 1b01 	strb.w	r1, [r3], #1
 800298e:	e7f9      	b.n	8002984 <memset+0x4>

08002990 <_init>:
 8002990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002992:	bf00      	nop
 8002994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002996:	bc08      	pop	{r3}
 8002998:	469e      	mov	lr, r3
 800299a:	4770      	bx	lr

0800299c <_fini>:
 800299c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800299e:	bf00      	nop
 80029a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029a2:	bc08      	pop	{r3}
 80029a4:	469e      	mov	lr, r3
 80029a6:	4770      	bx	lr
