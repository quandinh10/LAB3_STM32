
LAB3_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000272c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002838  08002838  00012838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800285c  0800285c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800285c  0800285c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800285c  0800285c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002860  08002860  00012860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08002864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c4  20000064  080028c8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  080028c8  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000985d  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b12  00000000  00000000  000298ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d00  00000000  00000000  0002c788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9d8  00000000  00000000  00043488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082379  00000000  00000000  0004ee60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d11d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002894  00000000  00000000  000d122c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000064 	.word	0x20000064
 8000128:	00000000 	.word	0x00000000
 800012c:	08002820 	.word	0x08002820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000068 	.word	0x20000068
 8000148:	08002820 	.word	0x08002820

0800014c <isButtonPressed>:
int KeyReg3[NUM_BUTTON]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200,200,200};
int button_flag[NUM_BUTTON] = {0,0,0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000080 	.word	0x20000080

08000180 <subKeyProcess>:

void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000080 	.word	0x20000080

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e069      	b.n	8000280 <getKeyInput+0xe0>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a38      	ldr	r2, [pc, #224]	; (8000290 <getKeyInput+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4937      	ldr	r1, [pc, #220]	; (8000294 <getKeyInput+0xf4>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a36      	ldr	r2, [pc, #216]	; (8000298 <getKeyInput+0xf8>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4932      	ldr	r1, [pc, #200]	; (8000290 <getKeyInput+0xf0>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, mode[i]);
 80001cc:	4a33      	ldr	r2, [pc, #204]	; (800029c <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4832      	ldr	r0, [pc, #200]	; (80002a0 <getKeyInput+0x100>)
 80001d8:	f001 faea 	bl	80017b0 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	4619      	mov	r1, r3
 80001e0:	4a2d      	ldr	r2, [pc, #180]	; (8000298 <getKeyInput+0xf8>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){ //avoid noise
 80001e8:	4a29      	ldr	r2, [pc, #164]	; (8000290 <getKeyInput+0xf0>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	4929      	ldr	r1, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d13e      	bne.n	800027a <getKeyInput+0xda>
 80001fc:	4a24      	ldr	r2, [pc, #144]	; (8000290 <getKeyInput+0xf0>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	4923      	ldr	r1, [pc, #140]	; (8000294 <getKeyInput+0xf4>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020c:	429a      	cmp	r2, r3
 800020e:	d134      	bne.n	800027a <getKeyInput+0xda>
			if (KeyReg2[i] != KeyReg3[i]){ //change state
 8000210:	4a20      	ldr	r2, [pc, #128]	; (8000294 <getKeyInput+0xf4>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4922      	ldr	r1, [pc, #136]	; (80002a4 <getKeyInput+0x104>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d016      	beq.n	8000252 <getKeyInput+0xb2>
				KeyReg3[i] = KeyReg2[i];
 8000224:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <getKeyInput+0xf4>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	491d      	ldr	r1, [pc, #116]	; (80002a4 <getKeyInput+0x104>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000234:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <getKeyInput+0x104>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d11c      	bne.n	800027a <getKeyInput+0xda>
					TimeOutForKeyPress[i] = 200;
 8000240:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <getKeyInput+0x108>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	21c8      	movs	r1, #200	; 0xc8
 8000246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e013      	b.n	800027a <getKeyInput+0xda>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 8000252:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <getKeyInput+0x108>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	1e5a      	subs	r2, r3, #1
 800025c:	4912      	ldr	r1, [pc, #72]	; (80002a8 <getKeyInput+0x108>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <getKeyInput+0x108>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d104      	bne.n	800027a <getKeyInput+0xda>
					KeyReg3[i] = NORMAL_STATE;
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <getKeyInput+0x104>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2101      	movs	r1, #1
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NUM_BUTTON; i++){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3301      	adds	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	dd92      	ble.n	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000014 	.word	0x20000014
 8000294:	20000020 	.word	0x20000020
 8000298:	20000008 	.word	0x20000008
 800029c:	20000000 	.word	0x20000000
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000038 	.word	0x20000038

080002ac <clearSignal>:
 *      Author: dinhq
 */

#include "display7SEG.h"

void clearSignal(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 80002b0:	2201      	movs	r2, #1
 80002b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <clearSignal+0x38>)
 80002b8:	f001 fa91 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 80002bc:	2201      	movs	r2, #1
 80002be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002c2:	4808      	ldr	r0, [pc, #32]	; (80002e4 <clearSignal+0x38>)
 80002c4:	f001 fa8b 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	4805      	ldr	r0, [pc, #20]	; (80002e4 <clearSignal+0x38>)
 80002d0:	f001 fa85 	bl	80017de <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002da:	4802      	ldr	r0, [pc, #8]	; (80002e4 <clearSignal+0x38>)
 80002dc:	f001 fa7f 	bl	80017de <HAL_GPIO_WritePin>
}
 80002e0:	bf00      	nop
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40010800 	.word	0x40010800

080002e8 <display7SEG>:

void display7SEG(int num){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	if (num==0){
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d123      	bne.n	800033e <display7SEG+0x56>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80002f6:	2200      	movs	r2, #0
 80002f8:	2101      	movs	r1, #1
 80002fa:	48c2      	ldr	r0, [pc, #776]	; (8000604 <display7SEG+0x31c>)
 80002fc:	f001 fa6f 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000300:	2200      	movs	r2, #0
 8000302:	2102      	movs	r1, #2
 8000304:	48bf      	ldr	r0, [pc, #764]	; (8000604 <display7SEG+0x31c>)
 8000306:	f001 fa6a 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800030a:	2200      	movs	r2, #0
 800030c:	2104      	movs	r1, #4
 800030e:	48bd      	ldr	r0, [pc, #756]	; (8000604 <display7SEG+0x31c>)
 8000310:	f001 fa65 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000314:	2200      	movs	r2, #0
 8000316:	2108      	movs	r1, #8
 8000318:	48ba      	ldr	r0, [pc, #744]	; (8000604 <display7SEG+0x31c>)
 800031a:	f001 fa60 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2110      	movs	r1, #16
 8000322:	48b8      	ldr	r0, [pc, #736]	; (8000604 <display7SEG+0x31c>)
 8000324:	f001 fa5b 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2120      	movs	r1, #32
 800032c:	48b5      	ldr	r0, [pc, #724]	; (8000604 <display7SEG+0x31c>)
 800032e:	f001 fa56 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000332:	2201      	movs	r2, #1
 8000334:	2140      	movs	r1, #64	; 0x40
 8000336:	48b3      	ldr	r0, [pc, #716]	; (8000604 <display7SEG+0x31c>)
 8000338:	f001 fa51 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
	}
}
 800033c:	e15d      	b.n	80005fa <display7SEG+0x312>
	else if (num==1){
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	2b01      	cmp	r3, #1
 8000342:	d123      	bne.n	800038c <display7SEG+0xa4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 8000344:	2201      	movs	r2, #1
 8000346:	2101      	movs	r1, #1
 8000348:	48ae      	ldr	r0, [pc, #696]	; (8000604 <display7SEG+0x31c>)
 800034a:	f001 fa48 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 800034e:	2200      	movs	r2, #0
 8000350:	2102      	movs	r1, #2
 8000352:	48ac      	ldr	r0, [pc, #688]	; (8000604 <display7SEG+0x31c>)
 8000354:	f001 fa43 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2104      	movs	r1, #4
 800035c:	48a9      	ldr	r0, [pc, #676]	; (8000604 <display7SEG+0x31c>)
 800035e:	f001 fa3e 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 8000362:	2201      	movs	r2, #1
 8000364:	2108      	movs	r1, #8
 8000366:	48a7      	ldr	r0, [pc, #668]	; (8000604 <display7SEG+0x31c>)
 8000368:	f001 fa39 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2110      	movs	r1, #16
 8000370:	48a4      	ldr	r0, [pc, #656]	; (8000604 <display7SEG+0x31c>)
 8000372:	f001 fa34 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 8000376:	2201      	movs	r2, #1
 8000378:	2120      	movs	r1, #32
 800037a:	48a2      	ldr	r0, [pc, #648]	; (8000604 <display7SEG+0x31c>)
 800037c:	f001 fa2f 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000380:	2201      	movs	r2, #1
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	489f      	ldr	r0, [pc, #636]	; (8000604 <display7SEG+0x31c>)
 8000386:	f001 fa2a 	bl	80017de <HAL_GPIO_WritePin>
}
 800038a:	e136      	b.n	80005fa <display7SEG+0x312>
	else if (num==2){
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	2b02      	cmp	r3, #2
 8000390:	d123      	bne.n	80003da <display7SEG+0xf2>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000392:	2200      	movs	r2, #0
 8000394:	2101      	movs	r1, #1
 8000396:	489b      	ldr	r0, [pc, #620]	; (8000604 <display7SEG+0x31c>)
 8000398:	f001 fa21 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 800039c:	2200      	movs	r2, #0
 800039e:	2102      	movs	r1, #2
 80003a0:	4898      	ldr	r0, [pc, #608]	; (8000604 <display7SEG+0x31c>)
 80003a2:	f001 fa1c 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,SET);
 80003a6:	2201      	movs	r2, #1
 80003a8:	2104      	movs	r1, #4
 80003aa:	4896      	ldr	r0, [pc, #600]	; (8000604 <display7SEG+0x31c>)
 80003ac:	f001 fa17 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	2108      	movs	r1, #8
 80003b4:	4893      	ldr	r0, [pc, #588]	; (8000604 <display7SEG+0x31c>)
 80003b6:	f001 fa12 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2110      	movs	r1, #16
 80003be:	4891      	ldr	r0, [pc, #580]	; (8000604 <display7SEG+0x31c>)
 80003c0:	f001 fa0d 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 80003c4:	2201      	movs	r2, #1
 80003c6:	2120      	movs	r1, #32
 80003c8:	488e      	ldr	r0, [pc, #568]	; (8000604 <display7SEG+0x31c>)
 80003ca:	f001 fa08 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80003ce:	2200      	movs	r2, #0
 80003d0:	2140      	movs	r1, #64	; 0x40
 80003d2:	488c      	ldr	r0, [pc, #560]	; (8000604 <display7SEG+0x31c>)
 80003d4:	f001 fa03 	bl	80017de <HAL_GPIO_WritePin>
}
 80003d8:	e10f      	b.n	80005fa <display7SEG+0x312>
	else if (num==3){
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d123      	bne.n	8000428 <display7SEG+0x140>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2101      	movs	r1, #1
 80003e4:	4887      	ldr	r0, [pc, #540]	; (8000604 <display7SEG+0x31c>)
 80003e6:	f001 f9fa 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2102      	movs	r1, #2
 80003ee:	4885      	ldr	r0, [pc, #532]	; (8000604 <display7SEG+0x31c>)
 80003f0:	f001 f9f5 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2104      	movs	r1, #4
 80003f8:	4882      	ldr	r0, [pc, #520]	; (8000604 <display7SEG+0x31c>)
 80003fa:	f001 f9f0 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2108      	movs	r1, #8
 8000402:	4880      	ldr	r0, [pc, #512]	; (8000604 <display7SEG+0x31c>)
 8000404:	f001 f9eb 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2110      	movs	r1, #16
 800040c:	487d      	ldr	r0, [pc, #500]	; (8000604 <display7SEG+0x31c>)
 800040e:	f001 f9e6 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 8000412:	2201      	movs	r2, #1
 8000414:	2120      	movs	r1, #32
 8000416:	487b      	ldr	r0, [pc, #492]	; (8000604 <display7SEG+0x31c>)
 8000418:	f001 f9e1 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2140      	movs	r1, #64	; 0x40
 8000420:	4878      	ldr	r0, [pc, #480]	; (8000604 <display7SEG+0x31c>)
 8000422:	f001 f9dc 	bl	80017de <HAL_GPIO_WritePin>
}
 8000426:	e0e8      	b.n	80005fa <display7SEG+0x312>
	else if (num==4){
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	2b04      	cmp	r3, #4
 800042c:	d123      	bne.n	8000476 <display7SEG+0x18e>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 800042e:	2201      	movs	r2, #1
 8000430:	2101      	movs	r1, #1
 8000432:	4874      	ldr	r0, [pc, #464]	; (8000604 <display7SEG+0x31c>)
 8000434:	f001 f9d3 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2102      	movs	r1, #2
 800043c:	4871      	ldr	r0, [pc, #452]	; (8000604 <display7SEG+0x31c>)
 800043e:	f001 f9ce 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000442:	2200      	movs	r2, #0
 8000444:	2104      	movs	r1, #4
 8000446:	486f      	ldr	r0, [pc, #444]	; (8000604 <display7SEG+0x31c>)
 8000448:	f001 f9c9 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 800044c:	2201      	movs	r2, #1
 800044e:	2108      	movs	r1, #8
 8000450:	486c      	ldr	r0, [pc, #432]	; (8000604 <display7SEG+0x31c>)
 8000452:	f001 f9c4 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2110      	movs	r1, #16
 800045a:	486a      	ldr	r0, [pc, #424]	; (8000604 <display7SEG+0x31c>)
 800045c:	f001 f9bf 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2120      	movs	r1, #32
 8000464:	4867      	ldr	r0, [pc, #412]	; (8000604 <display7SEG+0x31c>)
 8000466:	f001 f9ba 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2140      	movs	r1, #64	; 0x40
 800046e:	4865      	ldr	r0, [pc, #404]	; (8000604 <display7SEG+0x31c>)
 8000470:	f001 f9b5 	bl	80017de <HAL_GPIO_WritePin>
}
 8000474:	e0c1      	b.n	80005fa <display7SEG+0x312>
	else if (num==5){
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b05      	cmp	r3, #5
 800047a:	d123      	bne.n	80004c4 <display7SEG+0x1dc>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 800047c:	2200      	movs	r2, #0
 800047e:	2101      	movs	r1, #1
 8000480:	4860      	ldr	r0, [pc, #384]	; (8000604 <display7SEG+0x31c>)
 8000482:	f001 f9ac 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 8000486:	2201      	movs	r2, #1
 8000488:	2102      	movs	r1, #2
 800048a:	485e      	ldr	r0, [pc, #376]	; (8000604 <display7SEG+0x31c>)
 800048c:	f001 f9a7 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000490:	2200      	movs	r2, #0
 8000492:	2104      	movs	r1, #4
 8000494:	485b      	ldr	r0, [pc, #364]	; (8000604 <display7SEG+0x31c>)
 8000496:	f001 f9a2 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 800049a:	2200      	movs	r2, #0
 800049c:	2108      	movs	r1, #8
 800049e:	4859      	ldr	r0, [pc, #356]	; (8000604 <display7SEG+0x31c>)
 80004a0:	f001 f99d 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 80004a4:	2201      	movs	r2, #1
 80004a6:	2110      	movs	r1, #16
 80004a8:	4856      	ldr	r0, [pc, #344]	; (8000604 <display7SEG+0x31c>)
 80004aa:	f001 f998 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2120      	movs	r1, #32
 80004b2:	4854      	ldr	r0, [pc, #336]	; (8000604 <display7SEG+0x31c>)
 80004b4:	f001 f993 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2140      	movs	r1, #64	; 0x40
 80004bc:	4851      	ldr	r0, [pc, #324]	; (8000604 <display7SEG+0x31c>)
 80004be:	f001 f98e 	bl	80017de <HAL_GPIO_WritePin>
}
 80004c2:	e09a      	b.n	80005fa <display7SEG+0x312>
	else if (num==6){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	2b06      	cmp	r3, #6
 80004c8:	d123      	bne.n	8000512 <display7SEG+0x22a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	2101      	movs	r1, #1
 80004ce:	484d      	ldr	r0, [pc, #308]	; (8000604 <display7SEG+0x31c>)
 80004d0:	f001 f985 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 80004d4:	2201      	movs	r2, #1
 80004d6:	2102      	movs	r1, #2
 80004d8:	484a      	ldr	r0, [pc, #296]	; (8000604 <display7SEG+0x31c>)
 80004da:	f001 f980 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2104      	movs	r1, #4
 80004e2:	4848      	ldr	r0, [pc, #288]	; (8000604 <display7SEG+0x31c>)
 80004e4:	f001 f97b 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	2108      	movs	r1, #8
 80004ec:	4845      	ldr	r0, [pc, #276]	; (8000604 <display7SEG+0x31c>)
 80004ee:	f001 f976 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2110      	movs	r1, #16
 80004f6:	4843      	ldr	r0, [pc, #268]	; (8000604 <display7SEG+0x31c>)
 80004f8:	f001 f971 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80004fc:	2200      	movs	r2, #0
 80004fe:	2120      	movs	r1, #32
 8000500:	4840      	ldr	r0, [pc, #256]	; (8000604 <display7SEG+0x31c>)
 8000502:	f001 f96c 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2140      	movs	r1, #64	; 0x40
 800050a:	483e      	ldr	r0, [pc, #248]	; (8000604 <display7SEG+0x31c>)
 800050c:	f001 f967 	bl	80017de <HAL_GPIO_WritePin>
}
 8000510:	e073      	b.n	80005fa <display7SEG+0x312>
	else if (num==7){
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b07      	cmp	r3, #7
 8000516:	d123      	bne.n	8000560 <display7SEG+0x278>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000518:	2200      	movs	r2, #0
 800051a:	2101      	movs	r1, #1
 800051c:	4839      	ldr	r0, [pc, #228]	; (8000604 <display7SEG+0x31c>)
 800051e:	f001 f95e 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	2102      	movs	r1, #2
 8000526:	4837      	ldr	r0, [pc, #220]	; (8000604 <display7SEG+0x31c>)
 8000528:	f001 f959 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800052c:	2200      	movs	r2, #0
 800052e:	2104      	movs	r1, #4
 8000530:	4834      	ldr	r0, [pc, #208]	; (8000604 <display7SEG+0x31c>)
 8000532:	f001 f954 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2108      	movs	r1, #8
 800053a:	4832      	ldr	r0, [pc, #200]	; (8000604 <display7SEG+0x31c>)
 800053c:	f001 f94f 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	482f      	ldr	r0, [pc, #188]	; (8000604 <display7SEG+0x31c>)
 8000546:	f001 f94a 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2120      	movs	r1, #32
 800054e:	482d      	ldr	r0, [pc, #180]	; (8000604 <display7SEG+0x31c>)
 8000550:	f001 f945 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2140      	movs	r1, #64	; 0x40
 8000558:	482a      	ldr	r0, [pc, #168]	; (8000604 <display7SEG+0x31c>)
 800055a:	f001 f940 	bl	80017de <HAL_GPIO_WritePin>
}
 800055e:	e04c      	b.n	80005fa <display7SEG+0x312>
	else if (num==8){
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	2b08      	cmp	r3, #8
 8000564:	d123      	bne.n	80005ae <display7SEG+0x2c6>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	4826      	ldr	r0, [pc, #152]	; (8000604 <display7SEG+0x31c>)
 800056c:	f001 f937 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2102      	movs	r1, #2
 8000574:	4823      	ldr	r0, [pc, #140]	; (8000604 <display7SEG+0x31c>)
 8000576:	f001 f932 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800057a:	2200      	movs	r2, #0
 800057c:	2104      	movs	r1, #4
 800057e:	4821      	ldr	r0, [pc, #132]	; (8000604 <display7SEG+0x31c>)
 8000580:	f001 f92d 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2108      	movs	r1, #8
 8000588:	481e      	ldr	r0, [pc, #120]	; (8000604 <display7SEG+0x31c>)
 800058a:	f001 f928 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2110      	movs	r1, #16
 8000592:	481c      	ldr	r0, [pc, #112]	; (8000604 <display7SEG+0x31c>)
 8000594:	f001 f923 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2120      	movs	r1, #32
 800059c:	4819      	ldr	r0, [pc, #100]	; (8000604 <display7SEG+0x31c>)
 800059e:	f001 f91e 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2140      	movs	r1, #64	; 0x40
 80005a6:	4817      	ldr	r0, [pc, #92]	; (8000604 <display7SEG+0x31c>)
 80005a8:	f001 f919 	bl	80017de <HAL_GPIO_WritePin>
}
 80005ac:	e025      	b.n	80005fa <display7SEG+0x312>
	else if (num==9){
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b09      	cmp	r3, #9
 80005b2:	d122      	bne.n	80005fa <display7SEG+0x312>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	4812      	ldr	r0, [pc, #72]	; (8000604 <display7SEG+0x31c>)
 80005ba:	f001 f910 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2102      	movs	r1, #2
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <display7SEG+0x31c>)
 80005c4:	f001 f90b 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2104      	movs	r1, #4
 80005cc:	480d      	ldr	r0, [pc, #52]	; (8000604 <display7SEG+0x31c>)
 80005ce:	f001 f906 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2108      	movs	r1, #8
 80005d6:	480b      	ldr	r0, [pc, #44]	; (8000604 <display7SEG+0x31c>)
 80005d8:	f001 f901 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2110      	movs	r1, #16
 80005e0:	4808      	ldr	r0, [pc, #32]	; (8000604 <display7SEG+0x31c>)
 80005e2:	f001 f8fc 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2120      	movs	r1, #32
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <display7SEG+0x31c>)
 80005ec:	f001 f8f7 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <display7SEG+0x31c>)
 80005f6:	f001 f8f2 	bl	80017de <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010c00 	.word	0x40010c00

08000608 <displaySignal>:

void displaySignal(int index){
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
	clearSignal();
 8000610:	f7ff fe4c 	bl	80002ac <clearSignal>
	display7SEG(led_buffer[index]);
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <displaySignal+0x7c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff fe63 	bl	80002e8 <display7SEG>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b03      	cmp	r3, #3
 8000626:	d827      	bhi.n	8000678 <displaySignal+0x70>
 8000628:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <displaySignal+0x28>)
 800062a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800062e:	bf00      	nop
 8000630:	08000641 	.word	0x08000641
 8000634:	0800064f 	.word	0x0800064f
 8000638:	0800065d 	.word	0x0800065d
 800063c:	0800066b 	.word	0x0800066b
	switch(index){
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000646:	4810      	ldr	r0, [pc, #64]	; (8000688 <displaySignal+0x80>)
 8000648:	f001 f8c9 	bl	80017de <HAL_GPIO_WritePin>
		break;
 800064c:	e015      	b.n	800067a <displaySignal+0x72>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	480c      	ldr	r0, [pc, #48]	; (8000688 <displaySignal+0x80>)
 8000656:	f001 f8c2 	bl	80017de <HAL_GPIO_WritePin>
		break;
 800065a:	e00e      	b.n	800067a <displaySignal+0x72>
	case 2:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000662:	4809      	ldr	r0, [pc, #36]	; (8000688 <displaySignal+0x80>)
 8000664:	f001 f8bb 	bl	80017de <HAL_GPIO_WritePin>
		break;
 8000668:	e007      	b.n	800067a <displaySignal+0x72>
	case 3:
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <displaySignal+0x80>)
 8000672:	f001 f8b4 	bl	80017de <HAL_GPIO_WritePin>
		break;
 8000676:	e000      	b.n	800067a <displaySignal+0x72>
	default:
		break;
 8000678:	bf00      	nop
	}
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	20000090 	.word	0x20000090
 8000688:	40010800 	.word	0x40010800

0800068c <fsm_manual_run>:
 *      Author: dinhq
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	switch(led_status){
 8000690:	4b61      	ldr	r3, [pc, #388]	; (8000818 <fsm_manual_run+0x18c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	2b0e      	cmp	r3, #14
 8000696:	d03c      	beq.n	8000712 <fsm_manual_run+0x86>
 8000698:	2b0e      	cmp	r3, #14
 800069a:	f300 80b4 	bgt.w	8000806 <fsm_manual_run+0x17a>
 800069e:	2b0c      	cmp	r3, #12
 80006a0:	d002      	beq.n	80006a8 <fsm_manual_run+0x1c>
 80006a2:	2b0d      	cmp	r3, #13
 80006a4:	d069      	beq.n	800077a <fsm_manual_run+0xee>
			timerRoad2 = 3;
		}
		break;

	default:
		break;
 80006a6:	e0ae      	b.n	8000806 <fsm_manual_run+0x17a>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80006a8:	2201      	movs	r2, #1
 80006aa:	2108      	movs	r1, #8
 80006ac:	485b      	ldr	r0, [pc, #364]	; (800081c <fsm_manual_run+0x190>)
 80006ae:	f001 f896 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	2110      	movs	r1, #16
 80006b6:	4859      	ldr	r0, [pc, #356]	; (800081c <fsm_manual_run+0x190>)
 80006b8:	f001 f891 	bl	80017de <HAL_GPIO_WritePin>
		if (timer5_flag == 1){
 80006bc:	4b58      	ldr	r3, [pc, #352]	; (8000820 <fsm_manual_run+0x194>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d106      	bne.n	80006d2 <fsm_manual_run+0x46>
			setTimer5(25);
 80006c4:	2019      	movs	r0, #25
 80006c6:	f000 fc2f 	bl	8000f28 <setTimer5>
			HAL_GPIO_TogglePin(RED1_GPIO_Port, RED1_Pin);
 80006ca:	2104      	movs	r1, #4
 80006cc:	4853      	ldr	r0, [pc, #332]	; (800081c <fsm_manual_run+0x190>)
 80006ce:	f001 f89e 	bl	800180e <HAL_GPIO_TogglePin>
		if (isButtonPressed(1) == 1){
 80006d2:	2001      	movs	r0, #1
 80006d4:	f7ff fd3a 	bl	800014c <isButtonPressed>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b01      	cmp	r3, #1
 80006dc:	d10b      	bne.n	80006f6 <fsm_manual_run+0x6a>
			r_val++;
 80006de:	4b51      	ldr	r3, [pc, #324]	; (8000824 <fsm_manual_run+0x198>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	3301      	adds	r3, #1
 80006e4:	4a4f      	ldr	r2, [pc, #316]	; (8000824 <fsm_manual_run+0x198>)
 80006e6:	6013      	str	r3, [r2, #0]
			if (r_val >= 100) r_val=1;
 80006e8:	4b4e      	ldr	r3, [pc, #312]	; (8000824 <fsm_manual_run+0x198>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b63      	cmp	r3, #99	; 0x63
 80006ee:	dd02      	ble.n	80006f6 <fsm_manual_run+0x6a>
 80006f0:	4b4c      	ldr	r3, [pc, #304]	; (8000824 <fsm_manual_run+0x198>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fd28 	bl	800014c <isButtonPressed>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b01      	cmp	r3, #1
 8000700:	f040 8083 	bne.w	800080a <fsm_manual_run+0x17e>
			setTimer5(1);
 8000704:	2001      	movs	r0, #1
 8000706:	f000 fc0f 	bl	8000f28 <setTimer5>
			led_status = YELLOW_MAN;
 800070a:	4b43      	ldr	r3, [pc, #268]	; (8000818 <fsm_manual_run+0x18c>)
 800070c:	220e      	movs	r2, #14
 800070e:	601a      	str	r2, [r3, #0]
		break;
 8000710:	e07b      	b.n	800080a <fsm_manual_run+0x17e>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000712:	2201      	movs	r2, #1
 8000714:	2108      	movs	r1, #8
 8000716:	4841      	ldr	r0, [pc, #260]	; (800081c <fsm_manual_run+0x190>)
 8000718:	f001 f861 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	2104      	movs	r1, #4
 8000720:	483e      	ldr	r0, [pc, #248]	; (800081c <fsm_manual_run+0x190>)
 8000722:	f001 f85c 	bl	80017de <HAL_GPIO_WritePin>
		if (timer5_flag == 1){
 8000726:	4b3e      	ldr	r3, [pc, #248]	; (8000820 <fsm_manual_run+0x194>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d106      	bne.n	800073c <fsm_manual_run+0xb0>
			setTimer5(25);
 800072e:	2019      	movs	r0, #25
 8000730:	f000 fbfa 	bl	8000f28 <setTimer5>
			HAL_GPIO_TogglePin(YELLOW1_GPIO_Port, YELLOW1_Pin);
 8000734:	2110      	movs	r1, #16
 8000736:	4839      	ldr	r0, [pc, #228]	; (800081c <fsm_manual_run+0x190>)
 8000738:	f001 f869 	bl	800180e <HAL_GPIO_TogglePin>
		if (isButtonPressed(1) == 1){
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff fd05 	bl	800014c <isButtonPressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b01      	cmp	r3, #1
 8000746:	d10b      	bne.n	8000760 <fsm_manual_run+0xd4>
			y_val++;
 8000748:	4b37      	ldr	r3, [pc, #220]	; (8000828 <fsm_manual_run+0x19c>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	3301      	adds	r3, #1
 800074e:	4a36      	ldr	r2, [pc, #216]	; (8000828 <fsm_manual_run+0x19c>)
 8000750:	6013      	str	r3, [r2, #0]
			if (y_val >= 100) y_val=1;
 8000752:	4b35      	ldr	r3, [pc, #212]	; (8000828 <fsm_manual_run+0x19c>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b63      	cmp	r3, #99	; 0x63
 8000758:	dd02      	ble.n	8000760 <fsm_manual_run+0xd4>
 800075a:	4b33      	ldr	r3, [pc, #204]	; (8000828 <fsm_manual_run+0x19c>)
 800075c:	2201      	movs	r2, #1
 800075e:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 8000760:	2000      	movs	r0, #0
 8000762:	f7ff fcf3 	bl	800014c <isButtonPressed>
 8000766:	4603      	mov	r3, r0
 8000768:	2b01      	cmp	r3, #1
 800076a:	d150      	bne.n	800080e <fsm_manual_run+0x182>
			setTimer5(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f000 fbdb 	bl	8000f28 <setTimer5>
			led_status = GREEN_MAN;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <fsm_manual_run+0x18c>)
 8000774:	220d      	movs	r2, #13
 8000776:	601a      	str	r2, [r3, #0]
		break;
 8000778:	e049      	b.n	800080e <fsm_manual_run+0x182>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 800077a:	2201      	movs	r2, #1
 800077c:	2104      	movs	r1, #4
 800077e:	4827      	ldr	r0, [pc, #156]	; (800081c <fsm_manual_run+0x190>)
 8000780:	f001 f82d 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000784:	2201      	movs	r2, #1
 8000786:	2110      	movs	r1, #16
 8000788:	4824      	ldr	r0, [pc, #144]	; (800081c <fsm_manual_run+0x190>)
 800078a:	f001 f828 	bl	80017de <HAL_GPIO_WritePin>
		if (timer5_flag == 1){
 800078e:	4b24      	ldr	r3, [pc, #144]	; (8000820 <fsm_manual_run+0x194>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b01      	cmp	r3, #1
 8000794:	d106      	bne.n	80007a4 <fsm_manual_run+0x118>
			setTimer5(25);
 8000796:	2019      	movs	r0, #25
 8000798:	f000 fbc6 	bl	8000f28 <setTimer5>
			HAL_GPIO_TogglePin(GREEN1_GPIO_Port, GREEN1_Pin);
 800079c:	2108      	movs	r1, #8
 800079e:	481f      	ldr	r0, [pc, #124]	; (800081c <fsm_manual_run+0x190>)
 80007a0:	f001 f835 	bl	800180e <HAL_GPIO_TogglePin>
		if (isButtonPressed(1) == 1){
 80007a4:	2001      	movs	r0, #1
 80007a6:	f7ff fcd1 	bl	800014c <isButtonPressed>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d10b      	bne.n	80007c8 <fsm_manual_run+0x13c>
			g_val++;
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <fsm_manual_run+0x1a0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	4a1d      	ldr	r2, [pc, #116]	; (800082c <fsm_manual_run+0x1a0>)
 80007b8:	6013      	str	r3, [r2, #0]
			if (g_val >= 100) g_val=1;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <fsm_manual_run+0x1a0>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	2b63      	cmp	r3, #99	; 0x63
 80007c0:	dd02      	ble.n	80007c8 <fsm_manual_run+0x13c>
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <fsm_manual_run+0x1a0>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(0) == 1){
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fcbf 	bl	800014c <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d11e      	bne.n	8000812 <fsm_manual_run+0x186>
			led_status = RED_GREEN;
 80007d4:	4b10      	ldr	r3, [pc, #64]	; (8000818 <fsm_manual_run+0x18c>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	601a      	str	r2, [r3, #0]
			setTimer1(300);
 80007da:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007de:	f000 fb53 	bl	8000e88 <setTimer1>
			setTimer2(100);
 80007e2:	2064      	movs	r0, #100	; 0x64
 80007e4:	f000 fb64 	bl	8000eb0 <setTimer2>
			setTimer4(1);
 80007e8:	2001      	movs	r0, #1
 80007ea:	f000 fb89 	bl	8000f00 <setTimer4>
			index_led=0;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <fsm_manual_run+0x1a4>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
			clearSignal();
 80007f4:	f7ff fd5a 	bl	80002ac <clearSignal>
			timerRoad1 = 5;
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <fsm_manual_run+0x1a8>)
 80007fa:	2205      	movs	r2, #5
 80007fc:	601a      	str	r2, [r3, #0]
			timerRoad2 = 3;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <fsm_manual_run+0x1ac>)
 8000800:	2203      	movs	r2, #3
 8000802:	601a      	str	r2, [r3, #0]
		break;
 8000804:	e005      	b.n	8000812 <fsm_manual_run+0x186>
		break;
 8000806:	bf00      	nop
 8000808:	e004      	b.n	8000814 <fsm_manual_run+0x188>
		break;
 800080a:	bf00      	nop
 800080c:	e002      	b.n	8000814 <fsm_manual_run+0x188>
		break;
 800080e:	bf00      	nop
 8000810:	e000      	b.n	8000814 <fsm_manual_run+0x188>
		break;
 8000812:	bf00      	nop
	}
}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000008c 	.word	0x2000008c
 800081c:	40010800 	.word	0x40010800
 8000820:	200000c8 	.word	0x200000c8
 8000824:	2000004c 	.word	0x2000004c
 8000828:	20000050 	.word	0x20000050
 800082c:	20000054 	.word	0x20000054
 8000830:	200000a0 	.word	0x200000a0
 8000834:	20000044 	.word	0x20000044
 8000838:	20000048 	.word	0x20000048

0800083c <fsm_traffic_light>:
 */

#include "fsm_traffic_light.h"


void fsm_traffic_light(){
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	switch(led_status){
 8000840:	4b95      	ldr	r3, [pc, #596]	; (8000a98 <fsm_traffic_light+0x25c>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b04      	cmp	r3, #4
 8000846:	f200 8188 	bhi.w	8000b5a <fsm_traffic_light+0x31e>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <fsm_traffic_light+0x14>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000865 	.word	0x08000865
 8000854:	080008b7 	.word	0x080008b7
 8000858:	08000953 	.word	0x08000953
 800085c:	080009ff 	.word	0x080009ff
 8000860:	08000ab1 	.word	0x08000ab1
	case INIT:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000864:	2201      	movs	r2, #1
 8000866:	2104      	movs	r1, #4
 8000868:	488c      	ldr	r0, [pc, #560]	; (8000a9c <fsm_traffic_light+0x260>)
 800086a:	f000 ffb8 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2108      	movs	r1, #8
 8000872:	488a      	ldr	r0, [pc, #552]	; (8000a9c <fsm_traffic_light+0x260>)
 8000874:	f000 ffb3 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2110      	movs	r1, #16
 800087c:	4887      	ldr	r0, [pc, #540]	; (8000a9c <fsm_traffic_light+0x260>)
 800087e:	f000 ffae 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000882:	2201      	movs	r2, #1
 8000884:	2120      	movs	r1, #32
 8000886:	4885      	ldr	r0, [pc, #532]	; (8000a9c <fsm_traffic_light+0x260>)
 8000888:	f000 ffa9 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	4882      	ldr	r0, [pc, #520]	; (8000a9c <fsm_traffic_light+0x260>)
 8000892:	f000 ffa4 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000896:	2201      	movs	r2, #1
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	4880      	ldr	r0, [pc, #512]	; (8000a9c <fsm_traffic_light+0x260>)
 800089c:	f000 ff9f 	bl	80017de <HAL_GPIO_WritePin>

		led_status = RED_GREEN;
 80008a0:	4b7d      	ldr	r3, [pc, #500]	; (8000a98 <fsm_traffic_light+0x25c>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	601a      	str	r2, [r3, #0]
		setTimer1(300);
 80008a6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80008aa:	f000 faed 	bl	8000e88 <setTimer1>
		setTimer2(100);
 80008ae:	2064      	movs	r0, #100	; 0x64
 80008b0:	f000 fafe 	bl	8000eb0 <setTimer2>
		break;
 80008b4:	e15a      	b.n	8000b6c <fsm_traffic_light+0x330>
	case RED_GREEN:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2104      	movs	r1, #4
 80008ba:	4878      	ldr	r0, [pc, #480]	; (8000a9c <fsm_traffic_light+0x260>)
 80008bc:	f000 ff8f 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2108      	movs	r1, #8
 80008c4:	4875      	ldr	r0, [pc, #468]	; (8000a9c <fsm_traffic_light+0x260>)
 80008c6:	f000 ff8a 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 80008ca:	2201      	movs	r2, #1
 80008cc:	2110      	movs	r1, #16
 80008ce:	4873      	ldr	r0, [pc, #460]	; (8000a9c <fsm_traffic_light+0x260>)
 80008d0:	f000 ff85 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2120      	movs	r1, #32
 80008d8:	4870      	ldr	r0, [pc, #448]	; (8000a9c <fsm_traffic_light+0x260>)
 80008da:	f000 ff80 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	486e      	ldr	r0, [pc, #440]	; (8000a9c <fsm_traffic_light+0x260>)
 80008e4:	f000 ff7b 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80008e8:	2201      	movs	r2, #1
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	486b      	ldr	r0, [pc, #428]	; (8000a9c <fsm_traffic_light+0x260>)
 80008ee:	f000 ff76 	bl	80017de <HAL_GPIO_WritePin>

		if (timer2_flag == 1){
 80008f2:	4b6b      	ldr	r3, [pc, #428]	; (8000aa0 <fsm_traffic_light+0x264>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d113      	bne.n	8000922 <fsm_traffic_light+0xe6>
			setTimer2(100);
 80008fa:	2064      	movs	r0, #100	; 0x64
 80008fc:	f000 fad8 	bl	8000eb0 <setTimer2>
			timerRoad1--;
 8000900:	4b68      	ldr	r3, [pc, #416]	; (8000aa4 <fsm_traffic_light+0x268>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	3b01      	subs	r3, #1
 8000906:	4a67      	ldr	r2, [pc, #412]	; (8000aa4 <fsm_traffic_light+0x268>)
 8000908:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 800090a:	4b67      	ldr	r3, [pc, #412]	; (8000aa8 <fsm_traffic_light+0x26c>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3b01      	subs	r3, #1
 8000910:	4a65      	ldr	r2, [pc, #404]	; (8000aa8 <fsm_traffic_light+0x26c>)
 8000912:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = 2;
 8000914:	4b64      	ldr	r3, [pc, #400]	; (8000aa8 <fsm_traffic_light+0x26c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	dc02      	bgt.n	8000922 <fsm_traffic_light+0xe6>
 800091c:	4b62      	ldr	r3, [pc, #392]	; (8000aa8 <fsm_traffic_light+0x26c>)
 800091e:	2202      	movs	r2, #2
 8000920:	601a      	str	r2, [r3, #0]
		}

		if (timer1_flag == 1){
 8000922:	4b62      	ldr	r3, [pc, #392]	; (8000aac <fsm_traffic_light+0x270>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d105      	bne.n	8000936 <fsm_traffic_light+0xfa>
			setTimer1(200);
 800092a:	20c8      	movs	r0, #200	; 0xc8
 800092c:	f000 faac 	bl	8000e88 <setTimer1>
			led_status = RED_YELLOW;
 8000930:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <fsm_traffic_light+0x25c>)
 8000932:	2202      	movs	r2, #2
 8000934:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(0) == 1){
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fc08 	bl	800014c <isButtonPressed>
 800093c:	4603      	mov	r3, r0
 800093e:	2b01      	cmp	r3, #1
 8000940:	f040 810d 	bne.w	8000b5e <fsm_traffic_light+0x322>
			led_status = RED_MAN;
 8000944:	4b54      	ldr	r3, [pc, #336]	; (8000a98 <fsm_traffic_light+0x25c>)
 8000946:	220c      	movs	r2, #12
 8000948:	601a      	str	r2, [r3, #0]
			setTimer5(1);
 800094a:	2001      	movs	r0, #1
 800094c:	f000 faec 	bl	8000f28 <setTimer5>
		}
		break;
 8000950:	e105      	b.n	8000b5e <fsm_traffic_light+0x322>
	case RED_YELLOW:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2104      	movs	r1, #4
 8000956:	4851      	ldr	r0, [pc, #324]	; (8000a9c <fsm_traffic_light+0x260>)
 8000958:	f000 ff41 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800095c:	2201      	movs	r2, #1
 800095e:	2108      	movs	r1, #8
 8000960:	484e      	ldr	r0, [pc, #312]	; (8000a9c <fsm_traffic_light+0x260>)
 8000962:	f000 ff3c 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000966:	2201      	movs	r2, #1
 8000968:	2110      	movs	r1, #16
 800096a:	484c      	ldr	r0, [pc, #304]	; (8000a9c <fsm_traffic_light+0x260>)
 800096c:	f000 ff37 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000970:	2201      	movs	r2, #1
 8000972:	2120      	movs	r1, #32
 8000974:	4849      	ldr	r0, [pc, #292]	; (8000a9c <fsm_traffic_light+0x260>)
 8000976:	f000 ff32 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800097a:	2201      	movs	r2, #1
 800097c:	2140      	movs	r1, #64	; 0x40
 800097e:	4847      	ldr	r0, [pc, #284]	; (8000a9c <fsm_traffic_light+0x260>)
 8000980:	f000 ff2d 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2180      	movs	r1, #128	; 0x80
 8000988:	4844      	ldr	r0, [pc, #272]	; (8000a9c <fsm_traffic_light+0x260>)
 800098a:	f000 ff28 	bl	80017de <HAL_GPIO_WritePin>

		if (timer2_flag == 1){
 800098e:	4b44      	ldr	r3, [pc, #272]	; (8000aa0 <fsm_traffic_light+0x264>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d11a      	bne.n	80009cc <fsm_traffic_light+0x190>
			setTimer2(100);
 8000996:	2064      	movs	r0, #100	; 0x64
 8000998:	f000 fa8a 	bl	8000eb0 <setTimer2>
			timerRoad1--;
 800099c:	4b41      	ldr	r3, [pc, #260]	; (8000aa4 <fsm_traffic_light+0x268>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	3b01      	subs	r3, #1
 80009a2:	4a40      	ldr	r2, [pc, #256]	; (8000aa4 <fsm_traffic_light+0x268>)
 80009a4:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = 3;
 80009a6:	4b3f      	ldr	r3, [pc, #252]	; (8000aa4 <fsm_traffic_light+0x268>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	dc02      	bgt.n	80009b4 <fsm_traffic_light+0x178>
 80009ae:	4b3d      	ldr	r3, [pc, #244]	; (8000aa4 <fsm_traffic_light+0x268>)
 80009b0:	2203      	movs	r2, #3
 80009b2:	601a      	str	r2, [r3, #0]
			timerRoad2--;
 80009b4:	4b3c      	ldr	r3, [pc, #240]	; (8000aa8 <fsm_traffic_light+0x26c>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	4a3b      	ldr	r2, [pc, #236]	; (8000aa8 <fsm_traffic_light+0x26c>)
 80009bc:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = 5;
 80009be:	4b3a      	ldr	r3, [pc, #232]	; (8000aa8 <fsm_traffic_light+0x26c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	dc02      	bgt.n	80009cc <fsm_traffic_light+0x190>
 80009c6:	4b38      	ldr	r3, [pc, #224]	; (8000aa8 <fsm_traffic_light+0x26c>)
 80009c8:	2205      	movs	r2, #5
 80009ca:	601a      	str	r2, [r3, #0]
		}

		if(timer1_flag == 1){
 80009cc:	4b37      	ldr	r3, [pc, #220]	; (8000aac <fsm_traffic_light+0x270>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	d106      	bne.n	80009e2 <fsm_traffic_light+0x1a6>
			setTimer1(300);
 80009d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80009d8:	f000 fa56 	bl	8000e88 <setTimer1>
			led_status = GREEN_RED;
 80009dc:	4b2e      	ldr	r3, [pc, #184]	; (8000a98 <fsm_traffic_light+0x25c>)
 80009de:	2203      	movs	r2, #3
 80009e0:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(0) == 1){
 80009e2:	2000      	movs	r0, #0
 80009e4:	f7ff fbb2 	bl	800014c <isButtonPressed>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	f040 80b9 	bne.w	8000b62 <fsm_traffic_light+0x326>
			led_status = RED_MAN;
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <fsm_traffic_light+0x25c>)
 80009f2:	220c      	movs	r2, #12
 80009f4:	601a      	str	r2, [r3, #0]
			setTimer5(1);
 80009f6:	2001      	movs	r0, #1
 80009f8:	f000 fa96 	bl	8000f28 <setTimer5>
		}
		break;
 80009fc:	e0b1      	b.n	8000b62 <fsm_traffic_light+0x326>
	case GREEN_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2104      	movs	r1, #4
 8000a02:	4826      	ldr	r0, [pc, #152]	; (8000a9c <fsm_traffic_light+0x260>)
 8000a04:	f000 feeb 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4823      	ldr	r0, [pc, #140]	; (8000a9c <fsm_traffic_light+0x260>)
 8000a0e:	f000 fee6 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000a12:	2201      	movs	r2, #1
 8000a14:	2110      	movs	r1, #16
 8000a16:	4821      	ldr	r0, [pc, #132]	; (8000a9c <fsm_traffic_light+0x260>)
 8000a18:	f000 fee1 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2120      	movs	r1, #32
 8000a20:	481e      	ldr	r0, [pc, #120]	; (8000a9c <fsm_traffic_light+0x260>)
 8000a22:	f000 fedc 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2140      	movs	r1, #64	; 0x40
 8000a2a:	481c      	ldr	r0, [pc, #112]	; (8000a9c <fsm_traffic_light+0x260>)
 8000a2c:	f000 fed7 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2180      	movs	r1, #128	; 0x80
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <fsm_traffic_light+0x260>)
 8000a36:	f000 fed2 	bl	80017de <HAL_GPIO_WritePin>

		if (timer2_flag == 1){
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <fsm_traffic_light+0x264>)
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	2b01      	cmp	r3, #1
 8000a40:	d113      	bne.n	8000a6a <fsm_traffic_light+0x22e>
			setTimer2(100);
 8000a42:	2064      	movs	r0, #100	; 0x64
 8000a44:	f000 fa34 	bl	8000eb0 <setTimer2>
			timerRoad1--;
 8000a48:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <fsm_traffic_light+0x268>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	3b01      	subs	r3, #1
 8000a4e:	4a15      	ldr	r2, [pc, #84]	; (8000aa4 <fsm_traffic_light+0x268>)
 8000a50:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = 2;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <fsm_traffic_light+0x268>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	dc02      	bgt.n	8000a60 <fsm_traffic_light+0x224>
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <fsm_traffic_light+0x268>)
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	601a      	str	r2, [r3, #0]
			timerRoad2--;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <fsm_traffic_light+0x26c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	3b01      	subs	r3, #1
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <fsm_traffic_light+0x26c>)
 8000a68:	6013      	str	r3, [r2, #0]
		}

		if(timer1_flag == 1){
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <fsm_traffic_light+0x270>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d105      	bne.n	8000a7e <fsm_traffic_light+0x242>
			setTimer1(200);
 8000a72:	20c8      	movs	r0, #200	; 0xc8
 8000a74:	f000 fa08 	bl	8000e88 <setTimer1>
			led_status = YELLOW_RED;
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <fsm_traffic_light+0x25c>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(0) == 1){
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f7ff fb64 	bl	800014c <isButtonPressed>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d16d      	bne.n	8000b66 <fsm_traffic_light+0x32a>
			led_status = RED_MAN;
 8000a8a:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <fsm_traffic_light+0x25c>)
 8000a8c:	220c      	movs	r2, #12
 8000a8e:	601a      	str	r2, [r3, #0]
			setTimer5(1);
 8000a90:	2001      	movs	r0, #1
 8000a92:	f000 fa49 	bl	8000f28 <setTimer5>
		}
		break;
 8000a96:	e066      	b.n	8000b66 <fsm_traffic_light+0x32a>
 8000a98:	2000008c 	.word	0x2000008c
 8000a9c:	40010800 	.word	0x40010800
 8000aa0:	200000b0 	.word	0x200000b0
 8000aa4:	20000044 	.word	0x20000044
 8000aa8:	20000048 	.word	0x20000048
 8000aac:	200000a8 	.word	0x200000a8
	case YELLOW_RED:
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2104      	movs	r1, #4
 8000ab4:	482e      	ldr	r0, [pc, #184]	; (8000b70 <fsm_traffic_light+0x334>)
 8000ab6:	f000 fe92 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000aba:	2201      	movs	r2, #1
 8000abc:	2108      	movs	r1, #8
 8000abe:	482c      	ldr	r0, [pc, #176]	; (8000b70 <fsm_traffic_light+0x334>)
 8000ac0:	f000 fe8d 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2110      	movs	r1, #16
 8000ac8:	4829      	ldr	r0, [pc, #164]	; (8000b70 <fsm_traffic_light+0x334>)
 8000aca:	f000 fe88 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2120      	movs	r1, #32
 8000ad2:	4827      	ldr	r0, [pc, #156]	; (8000b70 <fsm_traffic_light+0x334>)
 8000ad4:	f000 fe83 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000ad8:	2201      	movs	r2, #1
 8000ada:	2140      	movs	r1, #64	; 0x40
 8000adc:	4824      	ldr	r0, [pc, #144]	; (8000b70 <fsm_traffic_light+0x334>)
 8000ade:	f000 fe7e 	bl	80017de <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	4822      	ldr	r0, [pc, #136]	; (8000b70 <fsm_traffic_light+0x334>)
 8000ae8:	f000 fe79 	bl	80017de <HAL_GPIO_WritePin>

		if (timer2_flag == 1){
 8000aec:	4b21      	ldr	r3, [pc, #132]	; (8000b74 <fsm_traffic_light+0x338>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	2b01      	cmp	r3, #1
 8000af2:	d11a      	bne.n	8000b2a <fsm_traffic_light+0x2ee>
			setTimer2(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 f9db 	bl	8000eb0 <setTimer2>
			timerRoad1--;
 8000afa:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <fsm_traffic_light+0x33c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	3b01      	subs	r3, #1
 8000b00:	4a1d      	ldr	r2, [pc, #116]	; (8000b78 <fsm_traffic_light+0x33c>)
 8000b02:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = 5;
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <fsm_traffic_light+0x33c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	dc02      	bgt.n	8000b12 <fsm_traffic_light+0x2d6>
 8000b0c:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <fsm_traffic_light+0x33c>)
 8000b0e:	2205      	movs	r2, #5
 8000b10:	601a      	str	r2, [r3, #0]
			timerRoad2--;
 8000b12:	4b1a      	ldr	r3, [pc, #104]	; (8000b7c <fsm_traffic_light+0x340>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	4a18      	ldr	r2, [pc, #96]	; (8000b7c <fsm_traffic_light+0x340>)
 8000b1a:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = 3;
 8000b1c:	4b17      	ldr	r3, [pc, #92]	; (8000b7c <fsm_traffic_light+0x340>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	dc02      	bgt.n	8000b2a <fsm_traffic_light+0x2ee>
 8000b24:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <fsm_traffic_light+0x340>)
 8000b26:	2203      	movs	r2, #3
 8000b28:	601a      	str	r2, [r3, #0]
		}

		if (timer1_flag == 1){
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <fsm_traffic_light+0x344>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d106      	bne.n	8000b40 <fsm_traffic_light+0x304>
			setTimer1(300);
 8000b32:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b36:	f000 f9a7 	bl	8000e88 <setTimer1>
			led_status = RED_GREEN;
 8000b3a:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <fsm_traffic_light+0x348>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	601a      	str	r2, [r3, #0]
		}

		if (isButtonPressed(0) == 1){
 8000b40:	2000      	movs	r0, #0
 8000b42:	f7ff fb03 	bl	800014c <isButtonPressed>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d10e      	bne.n	8000b6a <fsm_traffic_light+0x32e>
			led_status = RED_MAN;
 8000b4c:	4b0d      	ldr	r3, [pc, #52]	; (8000b84 <fsm_traffic_light+0x348>)
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
			setTimer5(1);
 8000b52:	2001      	movs	r0, #1
 8000b54:	f000 f9e8 	bl	8000f28 <setTimer5>
		}
		break;
 8000b58:	e007      	b.n	8000b6a <fsm_traffic_light+0x32e>
	default:
		break;
 8000b5a:	bf00      	nop
 8000b5c:	e006      	b.n	8000b6c <fsm_traffic_light+0x330>
		break;
 8000b5e:	bf00      	nop
 8000b60:	e004      	b.n	8000b6c <fsm_traffic_light+0x330>
		break;
 8000b62:	bf00      	nop
 8000b64:	e002      	b.n	8000b6c <fsm_traffic_light+0x330>
		break;
 8000b66:	bf00      	nop
 8000b68:	e000      	b.n	8000b6c <fsm_traffic_light+0x330>
		break;
 8000b6a:	bf00      	nop
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40010800 	.word	0x40010800
 8000b74:	200000b0 	.word	0x200000b0
 8000b78:	20000044 	.word	0x20000044
 8000b7c:	20000048 	.word	0x20000048
 8000b80:	200000a8 	.word	0x200000a8
 8000b84:	2000008c 	.word	0x2000008c

08000b88 <updateLedBuffer>:

int r_val=5;
int y_val=2;
int g_val=3;

void updateLedBuffer(){
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	led_buffer[0] = timerRoad1 / 10;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <updateLedBuffer+0x70>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <updateLedBuffer+0x74>)
 8000b92:	fb82 1203 	smull	r1, r2, r2, r3
 8000b96:	1092      	asrs	r2, r2, #2
 8000b98:	17db      	asrs	r3, r3, #31
 8000b9a:	1ad3      	subs	r3, r2, r3
 8000b9c:	4a18      	ldr	r2, [pc, #96]	; (8000c00 <updateLedBuffer+0x78>)
 8000b9e:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timerRoad1 % 10;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <updateLedBuffer+0x70>)
 8000ba2:	6819      	ldr	r1, [r3, #0]
 8000ba4:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <updateLedBuffer+0x74>)
 8000ba6:	fb83 2301 	smull	r2, r3, r3, r1
 8000baa:	109a      	asrs	r2, r3, #2
 8000bac:	17cb      	asrs	r3, r1, #31
 8000bae:	1ad2      	subs	r2, r2, r3
 8000bb0:	4613      	mov	r3, r2
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	4413      	add	r3, r2
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	1aca      	subs	r2, r1, r3
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <updateLedBuffer+0x78>)
 8000bbc:	605a      	str	r2, [r3, #4]
	led_buffer[2] = timerRoad2 / 10;
 8000bbe:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <updateLedBuffer+0x7c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a0e      	ldr	r2, [pc, #56]	; (8000bfc <updateLedBuffer+0x74>)
 8000bc4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc8:	1092      	asrs	r2, r2, #2
 8000bca:	17db      	asrs	r3, r3, #31
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	4a0c      	ldr	r2, [pc, #48]	; (8000c00 <updateLedBuffer+0x78>)
 8000bd0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = timerRoad2 % 10;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <updateLedBuffer+0x7c>)
 8000bd4:	6819      	ldr	r1, [r3, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <updateLedBuffer+0x74>)
 8000bd8:	fb83 2301 	smull	r2, r3, r3, r1
 8000bdc:	109a      	asrs	r2, r3, #2
 8000bde:	17cb      	asrs	r3, r1, #31
 8000be0:	1ad2      	subs	r2, r2, r3
 8000be2:	4613      	mov	r3, r2
 8000be4:	009b      	lsls	r3, r3, #2
 8000be6:	4413      	add	r3, r2
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	1aca      	subs	r2, r1, r3
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <updateLedBuffer+0x78>)
 8000bee:	60da      	str	r2, [r3, #12]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	20000044 	.word	0x20000044
 8000bfc:	66666667 	.word	0x66666667
 8000c00:	20000090 	.word	0x20000090
 8000c04:	20000048 	.word	0x20000048

08000c08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fae6 	bl	80011dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f83a 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f8c0 	bl	8000d98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c18:	f000 f872 	bl	8000d00 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c1c:	4816      	ldr	r0, [pc, #88]	; (8000c78 <main+0x70>)
 8000c1e:	f001 fa3b 	bl	8002098 <HAL_TIM_Base_Start_IT>
  setTimer3(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 f958 	bl	8000ed8 <setTimer3>
  setTimer4(1);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 f969 	bl	8000f00 <setTimer4>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer3_flag == 1){
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <main+0x74>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d104      	bne.n	8000c40 <main+0x38>
		  setTimer3(10);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f000 f94e 	bl	8000ed8 <setTimer3>
		  updateLedBuffer();
 8000c3c:	f7ff ffa4 	bl	8000b88 <updateLedBuffer>
	  }
	  if (timer4_flag == 1){
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <main+0x78>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d111      	bne.n	8000c6c <main+0x64>
		  setTimer4(25);
 8000c48:	2019      	movs	r0, #25
 8000c4a:	f000 f959 	bl	8000f00 <setTimer4>
		  displaySignal(index_led++);
 8000c4e:	4b0d      	ldr	r3, [pc, #52]	; (8000c84 <main+0x7c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	1c5a      	adds	r2, r3, #1
 8000c54:	490b      	ldr	r1, [pc, #44]	; (8000c84 <main+0x7c>)
 8000c56:	600a      	str	r2, [r1, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fcd5 	bl	8000608 <displaySignal>
		  if (index_led >= 4) index_led=0;
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <main+0x7c>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	dd02      	ble.n	8000c6c <main+0x64>
 8000c66:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <main+0x7c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
	  }
	  fsm_traffic_light();
 8000c6c:	f7ff fde6 	bl	800083c <fsm_traffic_light>
	  fsm_manual_run();
 8000c70:	f7ff fd0c 	bl	800068c <fsm_manual_run>
	  if (timer3_flag == 1){
 8000c74:	e7db      	b.n	8000c2e <main+0x26>
 8000c76:	bf00      	nop
 8000c78:	200000dc 	.word	0x200000dc
 8000c7c:	200000b8 	.word	0x200000b8
 8000c80:	200000c0 	.word	0x200000c0
 8000c84:	200000a0 	.word	0x200000a0

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b090      	sub	sp, #64	; 0x40
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0318 	add.w	r3, r7, #24
 8000c92:	2228      	movs	r2, #40	; 0x28
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 fdba 	bl	8002810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000caa:	2302      	movs	r3, #2
 8000cac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cb2:	2310      	movs	r3, #16
 8000cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cba:	f107 0318 	add.w	r3, r7, #24
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 fdbe 	bl	8001840 <HAL_RCC_OscConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cca:	f000 f8d7 	bl	8000e7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cce:	230f      	movs	r3, #15
 8000cd0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ce2:	1d3b      	adds	r3, r7, #4
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f001 f82a 	bl	8001d40 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000cf2:	f000 f8c3 	bl	8000e7c <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3740      	adds	r7, #64	; 0x40
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d06:	f107 0308 	add.w	r3, r7, #8
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d14:	463b      	mov	r3, r7
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
 8000d1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1c:	4b1d      	ldr	r3, [pc, #116]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d26:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d34:	2209      	movs	r2, #9
 8000d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d44:	4813      	ldr	r0, [pc, #76]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d46:	f001 f957 	bl	8001ff8 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d50:	f000 f894 	bl	8000e7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4619      	mov	r1, r3
 8000d60:	480c      	ldr	r0, [pc, #48]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d62:	f001 faed 	bl	8002340 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d6c:	f000 f886 	bl	8000e7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d70:	2300      	movs	r3, #0
 8000d72:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d78:	463b      	mov	r3, r7
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	; (8000d94 <MX_TIM2_Init+0x94>)
 8000d7e:	f001 fcb9 	bl	80026f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f878 	bl	8000e7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3718      	adds	r7, #24
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	200000dc 	.word	0x200000dc

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dac:	4b2a      	ldr	r3, [pc, #168]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a29      	ldr	r2, [pc, #164]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000db2:	f043 0304 	orr.w	r3, r3, #4
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b27      	ldr	r3, [pc, #156]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0304 	and.w	r3, r3, #4
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b24      	ldr	r3, [pc, #144]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a23      	ldr	r2, [pc, #140]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000dca:	f043 0308 	orr.w	r3, r3, #8
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <MX_GPIO_Init+0xc0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0308 	and.w	r3, r3, #8
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|GREEN2_Pin
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f640 71dc 	movw	r1, #4060	; 0xfdc
 8000de2:	481e      	ldr	r0, [pc, #120]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000de4:	f000 fcfb 	bl	80017de <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2120      	movs	r1, #32
 8000dec:	481b      	ldr	r0, [pc, #108]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000dee:	f000 fcf6 	bl	80017de <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000df2:	2200      	movs	r2, #0
 8000df4:	217f      	movs	r1, #127	; 0x7f
 8000df6:	481a      	ldr	r0, [pc, #104]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000df8:	f000 fcf1 	bl	80017de <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000dfc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e00:	60bb      	str	r3, [r7, #8]
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0e:	f107 0308 	add.w	r3, r7, #8
 8000e12:	4619      	mov	r1, r3
 8000e14:	4811      	ldr	r0, [pc, #68]	; (8000e5c <MX_GPIO_Init+0xc4>)
 8000e16:	f000 fb51 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000e1a:	237f      	movs	r3, #127	; 0x7f
 8000e1c:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2302      	movs	r3, #2
 8000e28:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480b      	ldr	r0, [pc, #44]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e32:	f000 fb43 	bl	80014bc <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_MODE_Pin INC_Pin SET_VAL_Pin */
  GPIO_InitStruct.Pin = SET_MODE_Pin|INC_Pin|SET_VAL_Pin;
 8000e36:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4805      	ldr	r0, [pc, #20]	; (8000e60 <MX_GPIO_Init+0xc8>)
 8000e4c:	f000 fb36 	bl	80014bc <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40010800 	.word	0x40010800
 8000e60:	40010c00 	.word	0x40010c00

08000e64 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000e6c:	f000 f870 	bl	8000f50 <timerRun>
	getKeyInput();
 8000e70:	f7ff f996 	bl	80001a0 <getKeyInput>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e80:	b672      	cpsid	i
}
 8000e82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <Error_Handler+0x8>
	...

08000e88 <setTimer1>:

//timer7
int timer7_counter=0;
int timer7_flag=0;

void setTimer1(int duration){
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 8000e90:	4a05      	ldr	r2, [pc, #20]	; (8000ea8 <setTimer1+0x20>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 8000e96:	4b05      	ldr	r3, [pc, #20]	; (8000eac <setTimer1+0x24>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	200000a4 	.word	0x200000a4
 8000eac:	200000a8 	.word	0x200000a8

08000eb0 <setTimer2>:

void setTimer2(int duration){
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8000eb8:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <setTimer2+0x20>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8000ebe:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <setTimer2+0x24>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200000ac 	.word	0x200000ac
 8000ed4:	200000b0 	.word	0x200000b0

08000ed8 <setTimer3>:

void setTimer3(int duration){
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8000ee0:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <setTimer3+0x20>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8000ee6:	4b05      	ldr	r3, [pc, #20]	; (8000efc <setTimer3+0x24>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200000b4 	.word	0x200000b4
 8000efc:	200000b8 	.word	0x200000b8

08000f00 <setTimer4>:

void setTimer4(int duration){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8000f08:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <setTimer4+0x20>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <setTimer4+0x24>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	200000bc 	.word	0x200000bc
 8000f24:	200000c0 	.word	0x200000c0

08000f28 <setTimer5>:

void setTimer5(int duration){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <setTimer5+0x20>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8000f36:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <setTimer5+0x24>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	200000c4 	.word	0x200000c4
 8000f4c:	200000c8 	.word	0x200000c8

08000f50 <timerRun>:
void setTimer7(int duration){
	timer7_counter=duration;
	timer7_flag=0;
}

void timerRun(){
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <timerRun+0xec>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dd0b      	ble.n	8000f74 <timerRun+0x24>
		timer1_counter--;
 8000f5c:	4b37      	ldr	r3, [pc, #220]	; (800103c <timerRun+0xec>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	4a36      	ldr	r2, [pc, #216]	; (800103c <timerRun+0xec>)
 8000f64:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 8000f66:	4b35      	ldr	r3, [pc, #212]	; (800103c <timerRun+0xec>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	dc02      	bgt.n	8000f74 <timerRun+0x24>
			timer1_flag=1;
 8000f6e:	4b34      	ldr	r3, [pc, #208]	; (8001040 <timerRun+0xf0>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 8000f74:	4b33      	ldr	r3, [pc, #204]	; (8001044 <timerRun+0xf4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	dd0b      	ble.n	8000f94 <timerRun+0x44>
		timer2_counter--;
 8000f7c:	4b31      	ldr	r3, [pc, #196]	; (8001044 <timerRun+0xf4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	4a30      	ldr	r2, [pc, #192]	; (8001044 <timerRun+0xf4>)
 8000f84:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <timerRun+0xf4>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	dc02      	bgt.n	8000f94 <timerRun+0x44>
			timer2_flag=1;
 8000f8e:	4b2e      	ldr	r3, [pc, #184]	; (8001048 <timerRun+0xf8>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 8000f94:	4b2d      	ldr	r3, [pc, #180]	; (800104c <timerRun+0xfc>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	dd0b      	ble.n	8000fb4 <timerRun+0x64>
		timer3_counter--;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	; (800104c <timerRun+0xfc>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	4a2a      	ldr	r2, [pc, #168]	; (800104c <timerRun+0xfc>)
 8000fa4:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8000fa6:	4b29      	ldr	r3, [pc, #164]	; (800104c <timerRun+0xfc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	dc02      	bgt.n	8000fb4 <timerRun+0x64>
			timer3_flag=1;
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <timerRun+0x100>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 8000fb4:	4b27      	ldr	r3, [pc, #156]	; (8001054 <timerRun+0x104>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	dd0b      	ble.n	8000fd4 <timerRun+0x84>
		timer4_counter--;
 8000fbc:	4b25      	ldr	r3, [pc, #148]	; (8001054 <timerRun+0x104>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	4a24      	ldr	r2, [pc, #144]	; (8001054 <timerRun+0x104>)
 8000fc4:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 8000fc6:	4b23      	ldr	r3, [pc, #140]	; (8001054 <timerRun+0x104>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	dc02      	bgt.n	8000fd4 <timerRun+0x84>
			timer4_flag=1;
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <timerRun+0x108>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <timerRun+0x10c>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	dd0b      	ble.n	8000ff4 <timerRun+0xa4>
		timer5_counter--;
 8000fdc:	4b1f      	ldr	r3, [pc, #124]	; (800105c <timerRun+0x10c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3b01      	subs	r3, #1
 8000fe2:	4a1e      	ldr	r2, [pc, #120]	; (800105c <timerRun+0x10c>)
 8000fe4:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 8000fe6:	4b1d      	ldr	r3, [pc, #116]	; (800105c <timerRun+0x10c>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	dc02      	bgt.n	8000ff4 <timerRun+0xa4>
			timer5_flag=1;
 8000fee:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <timerRun+0x110>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <timerRun+0x114>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dd0b      	ble.n	8001014 <timerRun+0xc4>
		timer6_counter--;
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <timerRun+0x114>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3b01      	subs	r3, #1
 8001002:	4a18      	ldr	r2, [pc, #96]	; (8001064 <timerRun+0x114>)
 8001004:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <timerRun+0x114>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	2b00      	cmp	r3, #0
 800100c:	dc02      	bgt.n	8001014 <timerRun+0xc4>
			timer6_flag=1;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <timerRun+0x118>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter > 0){
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <timerRun+0x11c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	dd0b      	ble.n	8001034 <timerRun+0xe4>
		timer7_counter--;
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <timerRun+0x11c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3b01      	subs	r3, #1
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <timerRun+0x11c>)
 8001024:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0){
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <timerRun+0x11c>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	dc02      	bgt.n	8001034 <timerRun+0xe4>
			timer7_flag=1;
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <timerRun+0x120>)
 8001030:	2201      	movs	r2, #1
 8001032:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr
 800103c:	200000a4 	.word	0x200000a4
 8001040:	200000a8 	.word	0x200000a8
 8001044:	200000ac 	.word	0x200000ac
 8001048:	200000b0 	.word	0x200000b0
 800104c:	200000b4 	.word	0x200000b4
 8001050:	200000b8 	.word	0x200000b8
 8001054:	200000bc 	.word	0x200000bc
 8001058:	200000c0 	.word	0x200000c0
 800105c:	200000c4 	.word	0x200000c4
 8001060:	200000c8 	.word	0x200000c8
 8001064:	200000cc 	.word	0x200000cc
 8001068:	200000d0 	.word	0x200000d0
 800106c:	200000d4 	.word	0x200000d4
 8001070:	200000d8 	.word	0x200000d8

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800107a:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <HAL_MspInit+0x5c>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <HAL_MspInit+0x5c>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <HAL_MspInit+0x5c>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <HAL_MspInit+0x5c>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <HAL_MspInit+0x5c>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <HAL_MspInit+0x5c>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a6:	607b      	str	r3, [r7, #4]
 80010a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_MspInit+0x60>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_MspInit+0x60>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3714      	adds	r7, #20
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bc80      	pop	{r7}
 80010ce:	4770      	bx	lr
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40010000 	.word	0x40010000

080010d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e8:	d113      	bne.n	8001112 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	4a0b      	ldr	r2, [pc, #44]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	61d3      	str	r3, [r2, #28]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_TIM_Base_MspInit+0x44>)
 80010f8:	69db      	ldr	r3, [r3, #28]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	201c      	movs	r0, #28
 8001108:	f000 f9a1 	bl	800144e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800110c:	201c      	movs	r0, #28
 800110e:	f000 f9ba 	bl	8001486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001112:	bf00      	nop
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <NMI_Handler+0x4>

08001126 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <HardFault_Handler+0x4>

0800112c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <MemManage_Handler+0x4>

08001132 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001136:	e7fe      	b.n	8001136 <BusFault_Handler+0x4>

08001138 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800113c:	e7fe      	b.n	800113c <UsageFault_Handler+0x4>

0800113e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr

0800114a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114e:	bf00      	nop
 8001150:	46bd      	mov	sp, r7
 8001152:	bc80      	pop	{r7}
 8001154:	4770      	bx	lr

08001156 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	46bd      	mov	sp, r7
 800115e:	bc80      	pop	{r7}
 8001160:	4770      	bx	lr

08001162 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001166:	f000 f87f 	bl	8001268 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <TIM2_IRQHandler+0x10>)
 8001176:	f000 ffdb 	bl	8002130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000dc 	.word	0x200000dc

08001184 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	bc80      	pop	{r7}
 800118e:	4770      	bx	lr

08001190 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001190:	f7ff fff8 	bl	8001184 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001194:	480b      	ldr	r0, [pc, #44]	; (80011c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001196:	490c      	ldr	r1, [pc, #48]	; (80011c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001198:	4a0c      	ldr	r2, [pc, #48]	; (80011cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800119a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800119c:	e002      	b.n	80011a4 <LoopCopyDataInit>

0800119e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800119e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011a2:	3304      	adds	r3, #4

080011a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a8:	d3f9      	bcc.n	800119e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011aa:	4a09      	ldr	r2, [pc, #36]	; (80011d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011ac:	4c09      	ldr	r4, [pc, #36]	; (80011d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011b0:	e001      	b.n	80011b6 <LoopFillZerobss>

080011b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011b4:	3204      	adds	r2, #4

080011b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b8:	d3fb      	bcc.n	80011b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ba:	f001 fb05 	bl	80027c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011be:	f7ff fd23 	bl	8000c08 <main>
  bx lr
 80011c2:	4770      	bx	lr
  ldr r0, =_sdata
 80011c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80011cc:	08002864 	.word	0x08002864
  ldr r2, =_sbss
 80011d0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80011d4:	20000128 	.word	0x20000128

080011d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011d8:	e7fe      	b.n	80011d8 <ADC1_2_IRQHandler>
	...

080011dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011e0:	4b08      	ldr	r3, [pc, #32]	; (8001204 <HAL_Init+0x28>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a07      	ldr	r2, [pc, #28]	; (8001204 <HAL_Init+0x28>)
 80011e6:	f043 0310 	orr.w	r3, r3, #16
 80011ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ec:	2003      	movs	r0, #3
 80011ee:	f000 f923 	bl	8001438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f808 	bl	8001208 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f8:	f7ff ff3c 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40022000 	.word	0x40022000

08001208 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001210:	4b12      	ldr	r3, [pc, #72]	; (800125c <HAL_InitTick+0x54>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <HAL_InitTick+0x58>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001222:	fbb2 f3f3 	udiv	r3, r2, r3
 8001226:	4618      	mov	r0, r3
 8001228:	f000 f93b 	bl	80014a2 <HAL_SYSTICK_Config>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e00e      	b.n	8001254 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b0f      	cmp	r3, #15
 800123a:	d80a      	bhi.n	8001252 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123c:	2200      	movs	r2, #0
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	f04f 30ff 	mov.w	r0, #4294967295
 8001244:	f000 f903 	bl	800144e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001248:	4a06      	ldr	r2, [pc, #24]	; (8001264 <HAL_InitTick+0x5c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800124e:	2300      	movs	r3, #0
 8001250:	e000      	b.n	8001254 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000058 	.word	0x20000058
 8001260:	20000060 	.word	0x20000060
 8001264:	2000005c 	.word	0x2000005c

08001268 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800126c:	4b05      	ldr	r3, [pc, #20]	; (8001284 <HAL_IncTick+0x1c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_IncTick+0x20>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4413      	add	r3, r2
 8001278:	4a03      	ldr	r2, [pc, #12]	; (8001288 <HAL_IncTick+0x20>)
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	bc80      	pop	{r7}
 8001282:	4770      	bx	lr
 8001284:	20000060 	.word	0x20000060
 8001288:	20000124 	.word	0x20000124

0800128c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return uwTick;
 8001290:	4b02      	ldr	r3, [pc, #8]	; (800129c <HAL_GetTick+0x10>)
 8001292:	681b      	ldr	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000124 	.word	0x20000124

080012a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b085      	sub	sp, #20
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012b0:	4b0c      	ldr	r3, [pc, #48]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012b6:	68ba      	ldr	r2, [r7, #8]
 80012b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012bc:	4013      	ands	r3, r2
 80012be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012d2:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <__NVIC_SetPriorityGrouping+0x44>)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	60d3      	str	r3, [r2, #12]
}
 80012d8:	bf00      	nop
 80012da:	3714      	adds	r7, #20
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	e000ed00 	.word	0xe000ed00

080012e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012ec:	4b04      	ldr	r3, [pc, #16]	; (8001300 <__NVIC_GetPriorityGrouping+0x18>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	0a1b      	lsrs	r3, r3, #8
 80012f2:	f003 0307 	and.w	r3, r3, #7
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bc80      	pop	{r7}
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	db0b      	blt.n	800132e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001316:	79fb      	ldrb	r3, [r7, #7]
 8001318:	f003 021f 	and.w	r2, r3, #31
 800131c:	4906      	ldr	r1, [pc, #24]	; (8001338 <__NVIC_EnableIRQ+0x34>)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	095b      	lsrs	r3, r3, #5
 8001324:	2001      	movs	r0, #1
 8001326:	fa00 f202 	lsl.w	r2, r0, r2
 800132a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100

0800133c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	6039      	str	r1, [r7, #0]
 8001346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	2b00      	cmp	r3, #0
 800134e:	db0a      	blt.n	8001366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	490c      	ldr	r1, [pc, #48]	; (8001388 <__NVIC_SetPriority+0x4c>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	0112      	lsls	r2, r2, #4
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	440b      	add	r3, r1
 8001360:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001364:	e00a      	b.n	800137c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	b2da      	uxtb	r2, r3
 800136a:	4908      	ldr	r1, [pc, #32]	; (800138c <__NVIC_SetPriority+0x50>)
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	3b04      	subs	r3, #4
 8001374:	0112      	lsls	r2, r2, #4
 8001376:	b2d2      	uxtb	r2, r2
 8001378:	440b      	add	r3, r1
 800137a:	761a      	strb	r2, [r3, #24]
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000e100 	.word	0xe000e100
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	f1c3 0307 	rsb	r3, r3, #7
 80013aa:	2b04      	cmp	r3, #4
 80013ac:	bf28      	it	cs
 80013ae:	2304      	movcs	r3, #4
 80013b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3304      	adds	r3, #4
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d902      	bls.n	80013c0 <NVIC_EncodePriority+0x30>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3b03      	subs	r3, #3
 80013be:	e000      	b.n	80013c2 <NVIC_EncodePriority+0x32>
 80013c0:	2300      	movs	r3, #0
 80013c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	f04f 32ff 	mov.w	r2, #4294967295
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	401a      	ands	r2, r3
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d8:	f04f 31ff 	mov.w	r1, #4294967295
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa01 f303 	lsl.w	r3, r1, r3
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e8:	4313      	orrs	r3, r2
         );
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3724      	adds	r7, #36	; 0x24
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001404:	d301      	bcc.n	800140a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001406:	2301      	movs	r3, #1
 8001408:	e00f      	b.n	800142a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800140a:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <SysTick_Config+0x40>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3b01      	subs	r3, #1
 8001410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001412:	210f      	movs	r1, #15
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f7ff ff90 	bl	800133c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <SysTick_Config+0x40>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001422:	4b04      	ldr	r3, [pc, #16]	; (8001434 <SysTick_Config+0x40>)
 8001424:	2207      	movs	r2, #7
 8001426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	e000e010 	.word	0xe000e010

08001438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff ff2d 	bl	80012a0 <__NVIC_SetPriorityGrouping>
}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
 800145a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001460:	f7ff ff42 	bl	80012e8 <__NVIC_GetPriorityGrouping>
 8001464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	68b9      	ldr	r1, [r7, #8]
 800146a:	6978      	ldr	r0, [r7, #20]
 800146c:	f7ff ff90 	bl	8001390 <NVIC_EncodePriority>
 8001470:	4602      	mov	r2, r0
 8001472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff5f 	bl	800133c <__NVIC_SetPriority>
}
 800147e:	bf00      	nop
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff35 	bl	8001304 <__NVIC_EnableIRQ>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff ffa2 	bl	80013f4 <SysTick_Config>
 80014b0:	4603      	mov	r3, r0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
	...

080014bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014bc:	b480      	push	{r7}
 80014be:	b08b      	sub	sp, #44	; 0x2c
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014ca:	2300      	movs	r3, #0
 80014cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ce:	e148      	b.n	8001762 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014d0:	2201      	movs	r2, #1
 80014d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	69fa      	ldr	r2, [r7, #28]
 80014e0:	4013      	ands	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	f040 8137 	bne.w	800175c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	4aa3      	ldr	r2, [pc, #652]	; (8001780 <HAL_GPIO_Init+0x2c4>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d05e      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 80014f8:	4aa1      	ldr	r2, [pc, #644]	; (8001780 <HAL_GPIO_Init+0x2c4>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d875      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 80014fe:	4aa1      	ldr	r2, [pc, #644]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d058      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001504:	4a9f      	ldr	r2, [pc, #636]	; (8001784 <HAL_GPIO_Init+0x2c8>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d86f      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800150a:	4a9f      	ldr	r2, [pc, #636]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d052      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001510:	4a9d      	ldr	r2, [pc, #628]	; (8001788 <HAL_GPIO_Init+0x2cc>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d869      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001516:	4a9d      	ldr	r2, [pc, #628]	; (800178c <HAL_GPIO_Init+0x2d0>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d04c      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 800151c:	4a9b      	ldr	r2, [pc, #620]	; (800178c <HAL_GPIO_Init+0x2d0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d863      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001522:	4a9b      	ldr	r2, [pc, #620]	; (8001790 <HAL_GPIO_Init+0x2d4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d046      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
 8001528:	4a99      	ldr	r2, [pc, #612]	; (8001790 <HAL_GPIO_Init+0x2d4>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d85d      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 800152e:	2b12      	cmp	r3, #18
 8001530:	d82a      	bhi.n	8001588 <HAL_GPIO_Init+0xcc>
 8001532:	2b12      	cmp	r3, #18
 8001534:	d859      	bhi.n	80015ea <HAL_GPIO_Init+0x12e>
 8001536:	a201      	add	r2, pc, #4	; (adr r2, 800153c <HAL_GPIO_Init+0x80>)
 8001538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800153c:	080015b7 	.word	0x080015b7
 8001540:	08001591 	.word	0x08001591
 8001544:	080015a3 	.word	0x080015a3
 8001548:	080015e5 	.word	0x080015e5
 800154c:	080015eb 	.word	0x080015eb
 8001550:	080015eb 	.word	0x080015eb
 8001554:	080015eb 	.word	0x080015eb
 8001558:	080015eb 	.word	0x080015eb
 800155c:	080015eb 	.word	0x080015eb
 8001560:	080015eb 	.word	0x080015eb
 8001564:	080015eb 	.word	0x080015eb
 8001568:	080015eb 	.word	0x080015eb
 800156c:	080015eb 	.word	0x080015eb
 8001570:	080015eb 	.word	0x080015eb
 8001574:	080015eb 	.word	0x080015eb
 8001578:	080015eb 	.word	0x080015eb
 800157c:	080015eb 	.word	0x080015eb
 8001580:	08001599 	.word	0x08001599
 8001584:	080015ad 	.word	0x080015ad
 8001588:	4a82      	ldr	r2, [pc, #520]	; (8001794 <HAL_GPIO_Init+0x2d8>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d013      	beq.n	80015b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800158e:	e02c      	b.n	80015ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	623b      	str	r3, [r7, #32]
          break;
 8001596:	e029      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	3304      	adds	r3, #4
 800159e:	623b      	str	r3, [r7, #32]
          break;
 80015a0:	e024      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	3308      	adds	r3, #8
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e01f      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	330c      	adds	r3, #12
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e01a      	b.n	80015ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d102      	bne.n	80015c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015be:	2304      	movs	r3, #4
 80015c0:	623b      	str	r3, [r7, #32]
          break;
 80015c2:	e013      	b.n	80015ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015cc:	2308      	movs	r3, #8
 80015ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69fa      	ldr	r2, [r7, #28]
 80015d4:	611a      	str	r2, [r3, #16]
          break;
 80015d6:	e009      	b.n	80015ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015d8:	2308      	movs	r3, #8
 80015da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	69fa      	ldr	r2, [r7, #28]
 80015e0:	615a      	str	r2, [r3, #20]
          break;
 80015e2:	e003      	b.n	80015ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
          break;
 80015e8:	e000      	b.n	80015ec <HAL_GPIO_Init+0x130>
          break;
 80015ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2bff      	cmp	r3, #255	; 0xff
 80015f0:	d801      	bhi.n	80015f6 <HAL_GPIO_Init+0x13a>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_Init+0x13e>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3304      	adds	r3, #4
 80015fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2bff      	cmp	r3, #255	; 0xff
 8001600:	d802      	bhi.n	8001608 <HAL_GPIO_Init+0x14c>
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	e002      	b.n	800160e <HAL_GPIO_Init+0x152>
 8001608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160a:	3b08      	subs	r3, #8
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	210f      	movs	r1, #15
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	fa01 f303 	lsl.w	r3, r1, r3
 800161c:	43db      	mvns	r3, r3
 800161e:	401a      	ands	r2, r3
 8001620:	6a39      	ldr	r1, [r7, #32]
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	fa01 f303 	lsl.w	r3, r1, r3
 8001628:	431a      	orrs	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	f000 8090 	beq.w	800175c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800163c:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a55      	ldr	r2, [pc, #340]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_GPIO_Init+0x2dc>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0301 	and.w	r3, r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001654:	4a51      	ldr	r2, [pc, #324]	; (800179c <HAL_GPIO_Init+0x2e0>)
 8001656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001658:	089b      	lsrs	r3, r3, #2
 800165a:	3302      	adds	r3, #2
 800165c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001660:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4013      	ands	r3, r2
 8001676:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2e4>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d00d      	beq.n	800169c <HAL_GPIO_Init+0x1e0>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2e8>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d007      	beq.n	8001698 <HAL_GPIO_Init+0x1dc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <HAL_GPIO_Init+0x2ec>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d101      	bne.n	8001694 <HAL_GPIO_Init+0x1d8>
 8001690:	2302      	movs	r3, #2
 8001692:	e004      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 8001694:	2303      	movs	r3, #3
 8001696:	e002      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 8001698:	2301      	movs	r3, #1
 800169a:	e000      	b.n	800169e <HAL_GPIO_Init+0x1e2>
 800169c:	2300      	movs	r3, #0
 800169e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a0:	f002 0203 	and.w	r2, r2, #3
 80016a4:	0092      	lsls	r2, r2, #2
 80016a6:	4093      	lsls	r3, r2
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ae:	493b      	ldr	r1, [pc, #236]	; (800179c <HAL_GPIO_Init+0x2e0>)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	089b      	lsrs	r3, r3, #2
 80016b4:	3302      	adds	r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d006      	beq.n	80016d6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016c8:	4b38      	ldr	r3, [pc, #224]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4937      	ldr	r1, [pc, #220]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]
 80016d4:	e006      	b.n	80016e4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016d6:	4b35      	ldr	r3, [pc, #212]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	43db      	mvns	r3, r3
 80016de:	4933      	ldr	r1, [pc, #204]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016e0:	4013      	ands	r3, r2
 80016e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	492d      	ldr	r1, [pc, #180]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60cb      	str	r3, [r1, #12]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016fe:	4b2b      	ldr	r3, [pc, #172]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001700:	68da      	ldr	r2, [r3, #12]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4929      	ldr	r1, [pc, #164]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001708:	4013      	ands	r3, r2
 800170a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 800171a:	685a      	ldr	r2, [r3, #4]
 800171c:	4923      	ldr	r1, [pc, #140]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	604b      	str	r3, [r1, #4]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001726:	4b21      	ldr	r3, [pc, #132]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	491f      	ldr	r1, [pc, #124]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001730:	4013      	ands	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001740:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4919      	ldr	r1, [pc, #100]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	600b      	str	r3, [r1, #0]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4915      	ldr	r1, [pc, #84]	; (80017ac <HAL_GPIO_Init+0x2f0>)
 8001758:	4013      	ands	r3, r2
 800175a:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	3301      	adds	r3, #1
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fa22 f303 	lsr.w	r3, r2, r3
 800176c:	2b00      	cmp	r3, #0
 800176e:	f47f aeaf 	bne.w	80014d0 <HAL_GPIO_Init+0x14>
  }
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	372c      	adds	r7, #44	; 0x2c
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	10320000 	.word	0x10320000
 8001784:	10310000 	.word	0x10310000
 8001788:	10220000 	.word	0x10220000
 800178c:	10210000 	.word	0x10210000
 8001790:	10120000 	.word	0x10120000
 8001794:	10110000 	.word	0x10110000
 8001798:	40021000 	.word	0x40021000
 800179c:	40010000 	.word	0x40010000
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010c00 	.word	0x40010c00
 80017a8:	40011000 	.word	0x40011000
 80017ac:	40010400 	.word	0x40010400

080017b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c8:	2301      	movs	r3, #1
 80017ca:	73fb      	strb	r3, [r7, #15]
 80017cc:	e001      	b.n	80017d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr

080017de <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017de:	b480      	push	{r7}
 80017e0:	b083      	sub	sp, #12
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	6078      	str	r0, [r7, #4]
 80017e6:	460b      	mov	r3, r1
 80017e8:	807b      	strh	r3, [r7, #2]
 80017ea:	4613      	mov	r3, r2
 80017ec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017ee:	787b      	ldrb	r3, [r7, #1]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f4:	887a      	ldrh	r2, [r7, #2]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fa:	e003      	b.n	8001804 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017fc:	887b      	ldrh	r3, [r7, #2]
 80017fe:	041a      	lsls	r2, r3, #16
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	611a      	str	r2, [r3, #16]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr

0800180e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800180e:	b480      	push	{r7}
 8001810:	b085      	sub	sp, #20
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001820:	887a      	ldrh	r2, [r7, #2]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	041a      	lsls	r2, r3, #16
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43d9      	mvns	r1, r3
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	400b      	ands	r3, r1
 8001830:	431a      	orrs	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	611a      	str	r2, [r3, #16]
}
 8001836:	bf00      	nop
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e26c      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	2b00      	cmp	r3, #0
 800185c:	f000 8087 	beq.w	800196e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001860:	4b92      	ldr	r3, [pc, #584]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 030c 	and.w	r3, r3, #12
 8001868:	2b04      	cmp	r3, #4
 800186a:	d00c      	beq.n	8001886 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800186c:	4b8f      	ldr	r3, [pc, #572]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b08      	cmp	r3, #8
 8001876:	d112      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
 8001878:	4b8c      	ldr	r3, [pc, #560]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001884:	d10b      	bne.n	800189e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001886:	4b89      	ldr	r3, [pc, #548]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d06c      	beq.n	800196c <HAL_RCC_OscConfig+0x12c>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d168      	bne.n	800196c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e246      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a6:	d106      	bne.n	80018b6 <HAL_RCC_OscConfig+0x76>
 80018a8:	4b80      	ldr	r3, [pc, #512]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a7f      	ldr	r2, [pc, #508]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e02e      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x98>
 80018be:	4b7b      	ldr	r3, [pc, #492]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a7a      	ldr	r2, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b78      	ldr	r3, [pc, #480]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a77      	ldr	r2, [pc, #476]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e01d      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e0:	d10c      	bne.n	80018fc <HAL_RCC_OscConfig+0xbc>
 80018e2:	4b72      	ldr	r3, [pc, #456]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a71      	ldr	r2, [pc, #452]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ec:	6013      	str	r3, [r2, #0]
 80018ee:	4b6f      	ldr	r3, [pc, #444]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a6e      	ldr	r2, [pc, #440]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	e00b      	b.n	8001914 <HAL_RCC_OscConfig+0xd4>
 80018fc:	4b6b      	ldr	r3, [pc, #428]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a6a      	ldr	r2, [pc, #424]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b68      	ldr	r3, [pc, #416]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a67      	ldr	r2, [pc, #412]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800190e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001912:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d013      	beq.n	8001944 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800191c:	f7ff fcb6 	bl	800128c <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001924:	f7ff fcb2 	bl	800128c <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b64      	cmp	r3, #100	; 0x64
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1fa      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001936:	4b5d      	ldr	r3, [pc, #372]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0xe4>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001944:	f7ff fca2 	bl	800128c <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800194c:	f7ff fc9e 	bl	800128c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b64      	cmp	r3, #100	; 0x64
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1e6      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195e:	4b53      	ldr	r3, [pc, #332]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x10c>
 800196a:	e000      	b.n	800196e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0302 	and.w	r3, r3, #2
 8001976:	2b00      	cmp	r3, #0
 8001978:	d063      	beq.n	8001a42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800197a:	4b4c      	ldr	r3, [pc, #304]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00b      	beq.n	800199e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11c      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
 8001992:	4b46      	ldr	r3, [pc, #280]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d116      	bne.n	80019cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800199e:	4b43      	ldr	r3, [pc, #268]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d005      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d001      	beq.n	80019b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e1ba      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b6:	4b3d      	ldr	r3, [pc, #244]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	4939      	ldr	r1, [pc, #228]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019ca:	e03a      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d020      	beq.n	8001a16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 80019d6:	2201      	movs	r2, #1
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019da:	f7ff fc57 	bl	800128c <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff fc53 	bl	800128c <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e19b      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4b2d      	ldr	r3, [pc, #180]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0302 	and.w	r3, r3, #2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a00:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4927      	ldr	r1, [pc, #156]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
 8001a14:	e015      	b.n	8001a42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a16:	4b26      	ldr	r3, [pc, #152]	; (8001ab0 <HAL_RCC_OscConfig+0x270>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a1c:	f7ff fc36 	bl	800128c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a24:	f7ff fc32 	bl	800128c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e17a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	4b1d      	ldr	r3, [pc, #116]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d1f0      	bne.n	8001a24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03a      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d019      	beq.n	8001a8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a56:	4b17      	ldr	r3, [pc, #92]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff fc16 	bl	800128c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a64:	f7ff fc12 	bl	800128c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e15a      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	4b0d      	ldr	r3, [pc, #52]	; (8001aac <HAL_RCC_OscConfig+0x26c>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f000 fa9a 	bl	8001fbc <RCC_Delay>
 8001a88:	e01c      	b.n	8001ac4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a8a:	4b0a      	ldr	r3, [pc, #40]	; (8001ab4 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a90:	f7ff fbfc 	bl	800128c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a96:	e00f      	b.n	8001ab8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fbf8 	bl	800128c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d908      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e140      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
 8001aaa:	bf00      	nop
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	42420000 	.word	0x42420000
 8001ab4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab8:	4b9e      	ldr	r3, [pc, #632]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e9      	bne.n	8001a98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0304 	and.w	r3, r3, #4
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	f000 80a6 	beq.w	8001c1e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ad6:	4b97      	ldr	r3, [pc, #604]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10d      	bne.n	8001afe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae2:	4b94      	ldr	r3, [pc, #592]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	4a93      	ldr	r2, [pc, #588]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aec:	61d3      	str	r3, [r2, #28]
 8001aee:	4b91      	ldr	r3, [pc, #580]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af6:	60bb      	str	r3, [r7, #8]
 8001af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001afa:	2301      	movs	r3, #1
 8001afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d118      	bne.n	8001b3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b0a:	4b8b      	ldr	r3, [pc, #556]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a8a      	ldr	r2, [pc, #552]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b16:	f7ff fbb9 	bl	800128c <HAL_GetTick>
 8001b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1c:	e008      	b.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b1e:	f7ff fbb5 	bl	800128c <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	2b64      	cmp	r3, #100	; 0x64
 8001b2a:	d901      	bls.n	8001b30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e0fd      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b30:	4b81      	ldr	r3, [pc, #516]	; (8001d38 <HAL_RCC_OscConfig+0x4f8>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0f0      	beq.n	8001b1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d106      	bne.n	8001b52 <HAL_RCC_OscConfig+0x312>
 8001b44:	4b7b      	ldr	r3, [pc, #492]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b46:	6a1b      	ldr	r3, [r3, #32]
 8001b48:	4a7a      	ldr	r2, [pc, #488]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	6213      	str	r3, [r2, #32]
 8001b50:	e02d      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	68db      	ldr	r3, [r3, #12]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d10c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x334>
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b5c:	6a1b      	ldr	r3, [r3, #32]
 8001b5e:	4a75      	ldr	r2, [pc, #468]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b60:	f023 0301 	bic.w	r3, r3, #1
 8001b64:	6213      	str	r3, [r2, #32]
 8001b66:	4b73      	ldr	r3, [pc, #460]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a72      	ldr	r2, [pc, #456]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b6c:	f023 0304 	bic.w	r3, r3, #4
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	e01c      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d10c      	bne.n	8001b96 <HAL_RCC_OscConfig+0x356>
 8001b7c:	4b6d      	ldr	r3, [pc, #436]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	6a1b      	ldr	r3, [r3, #32]
 8001b80:	4a6c      	ldr	r2, [pc, #432]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	6213      	str	r3, [r2, #32]
 8001b88:	4b6a      	ldr	r3, [pc, #424]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a69      	ldr	r2, [pc, #420]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	e00b      	b.n	8001bae <HAL_RCC_OscConfig+0x36e>
 8001b96:	4b67      	ldr	r3, [pc, #412]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a66      	ldr	r2, [pc, #408]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a63      	ldr	r2, [pc, #396]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d015      	beq.n	8001be2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bb6:	f7ff fb69 	bl	800128c <HAL_GetTick>
 8001bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bbe:	f7ff fb65 	bl	800128c <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0ab      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd4:	4b57      	ldr	r3, [pc, #348]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0ee      	beq.n	8001bbe <HAL_RCC_OscConfig+0x37e>
 8001be0:	e014      	b.n	8001c0c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7ff fb53 	bl	800128c <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff fb4f 	bl	800128c <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e095      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c00:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d105      	bne.n	8001c1e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c12:	4b48      	ldr	r3, [pc, #288]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	4a47      	ldr	r2, [pc, #284]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c1c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8081 	beq.w	8001d2a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c28:	4b42      	ldr	r3, [pc, #264]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d061      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d146      	bne.n	8001cca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c42:	f7ff fb23 	bl	800128c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c48:	e008      	b.n	8001c5c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff fb1f 	bl	800128c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d901      	bls.n	8001c5c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c58:	2303      	movs	r3, #3
 8001c5a:	e067      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c5c:	4b35      	ldr	r3, [pc, #212]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f0      	bne.n	8001c4a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a1b      	ldr	r3, [r3, #32]
 8001c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	492d      	ldr	r1, [pc, #180]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a19      	ldr	r1, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c94:	430b      	orrs	r3, r1
 8001c96:	4927      	ldr	r1, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff faf3 	bl	800128c <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001caa:	f7ff faef 	bl	800128c <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e037      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x46a>
 8001cc8:	e02f      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b1c      	ldr	r3, [pc, #112]	; (8001d3c <HAL_RCC_OscConfig+0x4fc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fadc 	bl	800128c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff fad8 	bl	800128c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e020      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x498>
 8001cf6:	e018      	b.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69db      	ldr	r3, [r3, #28]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e013      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d04:	4b0b      	ldr	r3, [pc, #44]	; (8001d34 <HAL_RCC_OscConfig+0x4f4>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d106      	bne.n	8001d26 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d001      	beq.n	8001d2a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42420060 	.word	0x42420060

08001d40 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0d0      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b6a      	ldr	r3, [pc, #424]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0307 	and.w	r3, r3, #7
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d910      	bls.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b67      	ldr	r3, [pc, #412]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f023 0207 	bic.w	r2, r3, #7
 8001d6a:	4965      	ldr	r1, [pc, #404]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d001      	beq.n	8001d84 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e0b8      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d020      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d9c:	4b59      	ldr	r3, [pc, #356]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001da6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0308 	and.w	r3, r3, #8
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001db4:	4b53      	ldr	r3, [pc, #332]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	4a52      	ldr	r2, [pc, #328]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001dbe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc0:	4b50      	ldr	r3, [pc, #320]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	494d      	ldr	r1, [pc, #308]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d040      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d107      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d115      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e07f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d107      	bne.n	8001e0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfe:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d109      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e073      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e0e:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d101      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e06b      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e1e:	4b39      	ldr	r3, [pc, #228]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f023 0203 	bic.w	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4936      	ldr	r1, [pc, #216]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e30:	f7ff fa2c 	bl	800128c <HAL_GetTick>
 8001e34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e36:	e00a      	b.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e38:	f7ff fa28 	bl	800128c <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e053      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4e:	4b2d      	ldr	r3, [pc, #180]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 020c 	and.w	r2, r3, #12
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d1eb      	bne.n	8001e38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e60:	4b27      	ldr	r3, [pc, #156]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0307 	and.w	r3, r3, #7
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d210      	bcs.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b24      	ldr	r3, [pc, #144]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 0207 	bic.w	r2, r3, #7
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e032      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	4916      	ldr	r1, [pc, #88]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d009      	beq.n	8001ece <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	00db      	lsls	r3, r3, #3
 8001ec8:	490e      	ldr	r1, [pc, #56]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ece:	f000 f821 	bl	8001f14 <HAL_RCC_GetSysClockFreq>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	091b      	lsrs	r3, r3, #4
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ee0:	5ccb      	ldrb	r3, [r1, r3]
 8001ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee6:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ee8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001eea:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <HAL_RCC_ClockConfig+0x1d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff f98a 	bl	8001208 <HAL_InitTick>

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40022000 	.word	0x40022000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	08002838 	.word	0x08002838
 8001f0c:	20000058 	.word	0x20000058
 8001f10:	2000005c 	.word	0x2000005c

08001f14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60fb      	str	r3, [r7, #12]
 8001f1e:	2300      	movs	r3, #0
 8001f20:	60bb      	str	r3, [r7, #8]
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	2300      	movs	r3, #0
 8001f28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 030c 	and.w	r3, r3, #12
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d002      	beq.n	8001f44 <HAL_RCC_GetSysClockFreq+0x30>
 8001f3e:	2b08      	cmp	r3, #8
 8001f40:	d003      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x36>
 8001f42:	e027      	b.n	8001f94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f46:	613b      	str	r3, [r7, #16]
      break;
 8001f48:	e027      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	0c9b      	lsrs	r3, r3, #18
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	4a17      	ldr	r2, [pc, #92]	; (8001fb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f54:	5cd3      	ldrb	r3, [r2, r3]
 8001f56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d010      	beq.n	8001f84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f62:	4b11      	ldr	r3, [pc, #68]	; (8001fa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0c5b      	lsrs	r3, r3, #17
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f6e:	5cd3      	ldrb	r3, [r2, r3]
 8001f70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f76:	fb02 f203 	mul.w	r2, r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e004      	b.n	8001f8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a0c      	ldr	r2, [pc, #48]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	613b      	str	r3, [r7, #16]
      break;
 8001f92:	e002      	b.n	8001f9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001f94:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetSysClockFreq+0x98>)
 8001f96:	613b      	str	r3, [r7, #16]
      break;
 8001f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f9a:	693b      	ldr	r3, [r7, #16]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	371c      	adds	r7, #28
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bc80      	pop	{r7}
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	007a1200 	.word	0x007a1200
 8001fb0:	08002848 	.word	0x08002848
 8001fb4:	08002858 	.word	0x08002858
 8001fb8:	003d0900 	.word	0x003d0900

08001fbc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <RCC_Delay+0x34>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <RCC_Delay+0x38>)
 8001fca:	fba2 2303 	umull	r2, r3, r2, r3
 8001fce:	0a5b      	lsrs	r3, r3, #9
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	fb02 f303 	mul.w	r3, r2, r3
 8001fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001fd8:	bf00      	nop
  }
  while (Delay --);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1e5a      	subs	r2, r3, #1
 8001fde:	60fa      	str	r2, [r7, #12]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f9      	bne.n	8001fd8 <RCC_Delay+0x1c>
}
 8001fe4:	bf00      	nop
 8001fe6:	bf00      	nop
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	20000058 	.word	0x20000058
 8001ff4:	10624dd3 	.word	0x10624dd3

08001ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e041      	b.n	800208e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002010:	b2db      	uxtb	r3, r3
 8002012:	2b00      	cmp	r3, #0
 8002014:	d106      	bne.n	8002024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff f85a 	bl	80010d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2202      	movs	r2, #2
 8002028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3304      	adds	r3, #4
 8002034:	4619      	mov	r1, r3
 8002036:	4610      	mov	r0, r2
 8002038:	f000 fa6e 	bl	8002518 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d001      	beq.n	80020b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e035      	b.n	800211c <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2202      	movs	r2, #2
 80020b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	68da      	ldr	r2, [r3, #12]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f042 0201 	orr.w	r2, r2, #1
 80020c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a16      	ldr	r2, [pc, #88]	; (8002128 <HAL_TIM_Base_Start_IT+0x90>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d009      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x4e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020da:	d004      	beq.n	80020e6 <HAL_TIM_Base_Start_IT+0x4e>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a12      	ldr	r2, [pc, #72]	; (800212c <HAL_TIM_Base_Start_IT+0x94>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d111      	bne.n	800210a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b06      	cmp	r3, #6
 80020f6:	d010      	beq.n	800211a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002108:	e007      	b.n	800211a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f042 0201 	orr.w	r2, r2, #1
 8002118:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	40012c00 	.word	0x40012c00
 800212c:	40000400 	.word	0x40000400

08002130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0202 	mvn.w	r2, #2
 800215c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f9b4 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f9a7 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f9b6 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b04      	cmp	r3, #4
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0204 	mvn.w	r2, #4
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2202      	movs	r2, #2
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 f98a 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f97d 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 f98c 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0308 	and.w	r3, r3, #8
 80021ea:	2b08      	cmp	r3, #8
 80021ec:	d122      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d11b      	bne.n	8002234 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0208 	mvn.w	r2, #8
 8002204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2204      	movs	r2, #4
 800220a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f000 f960 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 8002220:	e005      	b.n	800222e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f953 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f000 f962 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	2b10      	cmp	r3, #16
 8002240:	d122      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0310 	and.w	r3, r3, #16
 800224c:	2b10      	cmp	r3, #16
 800224e:	d11b      	bne.n	8002288 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f06f 0210 	mvn.w	r2, #16
 8002258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2208      	movs	r2, #8
 800225e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f000 f936 	bl	80024e0 <HAL_TIM_IC_CaptureCallback>
 8002274:	e005      	b.n	8002282 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f929 	bl	80024ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f938 	bl	80024f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d10e      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d107      	bne.n	80022b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f06f 0201 	mvn.w	r2, #1
 80022ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fdd8 	bl	8000e64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022be:	2b80      	cmp	r3, #128	; 0x80
 80022c0:	d10e      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022cc:	2b80      	cmp	r3, #128	; 0x80
 80022ce:	d107      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80022d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fa6b 	bl	80027b6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b40      	cmp	r3, #64	; 0x40
 80022ec:	d10e      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f8:	2b40      	cmp	r3, #64	; 0x40
 80022fa:	d107      	bne.n	800230c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002304:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f8fc 	bl	8002504 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b20      	cmp	r3, #32
 8002318:	d10e      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	f003 0320 	and.w	r3, r3, #32
 8002324:	2b20      	cmp	r3, #32
 8002326:	d107      	bne.n	8002338 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f06f 0220 	mvn.w	r2, #32
 8002330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fa36 	bl	80027a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002338:	bf00      	nop
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}

08002340 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2300      	movs	r3, #0
 800234c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_TIM_ConfigClockSource+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e0b4      	b.n	80024c6 <HAL_TIM_ConfigClockSource+0x186>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2202      	movs	r2, #2
 8002368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800237a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002382:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002394:	d03e      	beq.n	8002414 <HAL_TIM_ConfigClockSource+0xd4>
 8002396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800239a:	f200 8087 	bhi.w	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 800239e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a2:	f000 8086 	beq.w	80024b2 <HAL_TIM_ConfigClockSource+0x172>
 80023a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023aa:	d87f      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023ac:	2b70      	cmp	r3, #112	; 0x70
 80023ae:	d01a      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0xa6>
 80023b0:	2b70      	cmp	r3, #112	; 0x70
 80023b2:	d87b      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023b4:	2b60      	cmp	r3, #96	; 0x60
 80023b6:	d050      	beq.n	800245a <HAL_TIM_ConfigClockSource+0x11a>
 80023b8:	2b60      	cmp	r3, #96	; 0x60
 80023ba:	d877      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023bc:	2b50      	cmp	r3, #80	; 0x50
 80023be:	d03c      	beq.n	800243a <HAL_TIM_ConfigClockSource+0xfa>
 80023c0:	2b50      	cmp	r3, #80	; 0x50
 80023c2:	d873      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d058      	beq.n	800247a <HAL_TIM_ConfigClockSource+0x13a>
 80023c8:	2b40      	cmp	r3, #64	; 0x40
 80023ca:	d86f      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023cc:	2b30      	cmp	r3, #48	; 0x30
 80023ce:	d064      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023d0:	2b30      	cmp	r3, #48	; 0x30
 80023d2:	d86b      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d060      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023d8:	2b20      	cmp	r3, #32
 80023da:	d867      	bhi.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d05c      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023e0:	2b10      	cmp	r3, #16
 80023e2:	d05a      	beq.n	800249a <HAL_TIM_ConfigClockSource+0x15a>
 80023e4:	e062      	b.n	80024ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6899      	ldr	r1, [r3, #8]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f000 f95e 	bl	80026b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002408:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	609a      	str	r2, [r3, #8]
      break;
 8002412:	e04f      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	f000 f947 	bl	80026b6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002436:	609a      	str	r2, [r3, #8]
      break;
 8002438:	e03c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	461a      	mov	r2, r3
 8002448:	f000 f8be 	bl	80025c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2150      	movs	r1, #80	; 0x50
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f915 	bl	8002682 <TIM_ITRx_SetConfig>
      break;
 8002458:	e02c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	6859      	ldr	r1, [r3, #4]
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	461a      	mov	r2, r3
 8002468:	f000 f8dc 	bl	8002624 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2160      	movs	r1, #96	; 0x60
 8002472:	4618      	mov	r0, r3
 8002474:	f000 f905 	bl	8002682 <TIM_ITRx_SetConfig>
      break;
 8002478:	e01c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6818      	ldr	r0, [r3, #0]
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	461a      	mov	r2, r3
 8002488:	f000 f89e 	bl	80025c8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2140      	movs	r1, #64	; 0x40
 8002492:	4618      	mov	r0, r3
 8002494:	f000 f8f5 	bl	8002682 <TIM_ITRx_SetConfig>
      break;
 8002498:	e00c      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4619      	mov	r1, r3
 80024a4:	4610      	mov	r0, r2
 80024a6:	f000 f8ec 	bl	8002682 <TIM_ITRx_SetConfig>
      break;
 80024aa:	e003      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
      break;
 80024b0:	e000      	b.n	80024b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80024b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2200      	movs	r2, #0
 80024c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80024d6:	bf00      	nop
 80024d8:	370c      	adds	r7, #12
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr

080024e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bc80      	pop	{r7}
 80024f0:	4770      	bx	lr

080024f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80024f2:	b480      	push	{r7}
 80024f4:	b083      	sub	sp, #12
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a25      	ldr	r2, [pc, #148]	; (80025c0 <TIM_Base_SetConfig+0xa8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d007      	beq.n	8002540 <TIM_Base_SetConfig+0x28>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002536:	d003      	beq.n	8002540 <TIM_Base_SetConfig+0x28>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <TIM_Base_SetConfig+0xac>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d108      	bne.n	8002552 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002546:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4313      	orrs	r3, r2
 8002550:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1a      	ldr	r2, [pc, #104]	; (80025c0 <TIM_Base_SetConfig+0xa8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d007      	beq.n	800256a <TIM_Base_SetConfig+0x52>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d003      	beq.n	800256a <TIM_Base_SetConfig+0x52>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <TIM_Base_SetConfig+0xac>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d108      	bne.n	800257c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	4313      	orrs	r3, r2
 800257a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	695b      	ldr	r3, [r3, #20]
 8002586:	4313      	orrs	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <TIM_Base_SetConfig+0xa8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	691a      	ldr	r2, [r3, #16]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2201      	movs	r2, #1
 80025b4:	615a      	str	r2, [r3, #20]
}
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bc80      	pop	{r7}
 80025be:	4770      	bx	lr
 80025c0:	40012c00 	.word	0x40012c00
 80025c4:	40000400 	.word	0x40000400

080025c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	f023 0201 	bic.w	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 030a 	bic.w	r3, r3, #10
 8002604:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	4313      	orrs	r3, r2
 800260c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	621a      	str	r2, [r3, #32]
}
 800261a:	bf00      	nop
 800261c:	371c      	adds	r7, #28
 800261e:	46bd      	mov	sp, r7
 8002620:	bc80      	pop	{r7}
 8002622:	4770      	bx	lr

08002624 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002624:	b480      	push	{r7}
 8002626:	b087      	sub	sp, #28
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a1b      	ldr	r3, [r3, #32]
 8002634:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6a1b      	ldr	r3, [r3, #32]
 800263a:	f023 0210 	bic.w	r2, r3, #16
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800264e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	031b      	lsls	r3, r3, #12
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4313      	orrs	r3, r2
 8002658:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002660:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4313      	orrs	r3, r2
 800266a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	621a      	str	r2, [r3, #32]
}
 8002678:	bf00      	nop
 800267a:	371c      	adds	r7, #28
 800267c:	46bd      	mov	sp, r7
 800267e:	bc80      	pop	{r7}
 8002680:	4770      	bx	lr

08002682 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002682:	b480      	push	{r7}
 8002684:	b085      	sub	sp, #20
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
 800268a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002698:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4313      	orrs	r3, r2
 80026a0:	f043 0307 	orr.w	r3, r3, #7
 80026a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68fa      	ldr	r2, [r7, #12]
 80026aa:	609a      	str	r2, [r3, #8]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bc80      	pop	{r7}
 80026b4:	4770      	bx	lr

080026b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b087      	sub	sp, #28
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
 80026c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	021a      	lsls	r2, r3, #8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	431a      	orrs	r2, r3
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	4313      	orrs	r3, r2
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	609a      	str	r2, [r3, #8]
}
 80026ea:	bf00      	nop
 80026ec:	371c      	adds	r7, #28
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bc80      	pop	{r7}
 80026f2:	4770      	bx	lr

080026f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002708:	2302      	movs	r3, #2
 800270a:	e041      	b.n	8002790 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2202      	movs	r2, #2
 8002718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002732:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	4313      	orrs	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a14      	ldr	r2, [pc, #80]	; (800279c <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d009      	beq.n	8002764 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002758:	d004      	beq.n	8002764 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a10      	ldr	r2, [pc, #64]	; (80027a0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d10c      	bne.n	800277e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800276a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	4313      	orrs	r3, r2
 8002774:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68ba      	ldr	r2, [r7, #8]
 800277c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3714      	adds	r7, #20
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40012c00 	.word	0x40012c00
 80027a0:	40000400 	.word	0x40000400

080027a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027ac:	bf00      	nop
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr

080027c8 <__libc_init_array>:
 80027c8:	b570      	push	{r4, r5, r6, lr}
 80027ca:	2600      	movs	r6, #0
 80027cc:	4d0c      	ldr	r5, [pc, #48]	; (8002800 <__libc_init_array+0x38>)
 80027ce:	4c0d      	ldr	r4, [pc, #52]	; (8002804 <__libc_init_array+0x3c>)
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	42a6      	cmp	r6, r4
 80027d6:	d109      	bne.n	80027ec <__libc_init_array+0x24>
 80027d8:	f000 f822 	bl	8002820 <_init>
 80027dc:	2600      	movs	r6, #0
 80027de:	4d0a      	ldr	r5, [pc, #40]	; (8002808 <__libc_init_array+0x40>)
 80027e0:	4c0a      	ldr	r4, [pc, #40]	; (800280c <__libc_init_array+0x44>)
 80027e2:	1b64      	subs	r4, r4, r5
 80027e4:	10a4      	asrs	r4, r4, #2
 80027e6:	42a6      	cmp	r6, r4
 80027e8:	d105      	bne.n	80027f6 <__libc_init_array+0x2e>
 80027ea:	bd70      	pop	{r4, r5, r6, pc}
 80027ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80027f0:	4798      	blx	r3
 80027f2:	3601      	adds	r6, #1
 80027f4:	e7ee      	b.n	80027d4 <__libc_init_array+0xc>
 80027f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027fa:	4798      	blx	r3
 80027fc:	3601      	adds	r6, #1
 80027fe:	e7f2      	b.n	80027e6 <__libc_init_array+0x1e>
 8002800:	0800285c 	.word	0x0800285c
 8002804:	0800285c 	.word	0x0800285c
 8002808:	0800285c 	.word	0x0800285c
 800280c:	08002860 	.word	0x08002860

08002810 <memset>:
 8002810:	4603      	mov	r3, r0
 8002812:	4402      	add	r2, r0
 8002814:	4293      	cmp	r3, r2
 8002816:	d100      	bne.n	800281a <memset+0xa>
 8002818:	4770      	bx	lr
 800281a:	f803 1b01 	strb.w	r1, [r3], #1
 800281e:	e7f9      	b.n	8002814 <memset+0x4>

08002820 <_init>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr

0800282c <_fini>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr
