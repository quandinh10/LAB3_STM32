
LAB3_exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e58  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002f64  08002f64  00012f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f88  08002f88  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f88  08002f88  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f88  08002f88  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002f90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000005c  08002fec  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001fc  08002fec  000201fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009ce6  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf6  00000000  00000000  00029d6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  0002ba68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c8  00000000  00000000  0002c558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016fbe  00000000  00000000  0002cf20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c905  00000000  00000000  00043ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082516  00000000  00000000  000507e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d2cf9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a90  00000000  00000000  000d2d4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002f4c 	.word	0x08002f4c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002f4c 	.word	0x08002f4c

0800014c <isButtonPressed>:
int KeyReg3[NUM_BUTTON]={NORMAL_STATE,NORMAL_STATE,NORMAL_STATE};

int TimeOutForKeyPress[NUM_BUTTON] =  {200,200,200};
int button_flag[NUM_BUTTON] = {0,0,0};

int isButtonPressed(int num){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if(button_flag[num] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[num] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000078 	.word	0x20000078

08000180 <subKeyProcess>:

void subKeyProcess(int num){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	//TODO
	button_flag[num]=1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000078 	.word	0x20000078

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
	for (int i=0; i<NUM_BUTTON; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e069      	b.n	8000280 <getKeyInput+0xe0>
		KeyReg2[i] = KeyReg1[i];
 80001ac:	4a38      	ldr	r2, [pc, #224]	; (8000290 <getKeyInput+0xf0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4937      	ldr	r1, [pc, #220]	; (8000294 <getKeyInput+0xf4>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg0[i];
 80001bc:	4a36      	ldr	r2, [pc, #216]	; (8000298 <getKeyInput+0xf8>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	4932      	ldr	r1, [pc, #200]	; (8000290 <getKeyInput+0xf0>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		//Add your button here
		KeyReg0[i] = HAL_GPIO_ReadPin(GPIOB, mode[i]);
 80001cc:	4a33      	ldr	r2, [pc, #204]	; (800029c <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4832      	ldr	r0, [pc, #200]	; (80002a0 <getKeyInput+0x100>)
 80001d8:	f001 fe98 	bl	8001f0c <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	4619      	mov	r1, r3
 80001e0:	4a2d      	ldr	r2, [pc, #180]	; (8000298 <getKeyInput+0xf8>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){ //avoid noise
 80001e8:	4a29      	ldr	r2, [pc, #164]	; (8000290 <getKeyInput+0xf0>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f0:	4929      	ldr	r1, [pc, #164]	; (8000298 <getKeyInput+0xf8>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001f8:	429a      	cmp	r2, r3
 80001fa:	d13e      	bne.n	800027a <getKeyInput+0xda>
 80001fc:	4a24      	ldr	r2, [pc, #144]	; (8000290 <getKeyInput+0xf0>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000204:	4923      	ldr	r1, [pc, #140]	; (8000294 <getKeyInput+0xf4>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020c:	429a      	cmp	r2, r3
 800020e:	d134      	bne.n	800027a <getKeyInput+0xda>
			if (KeyReg2[i] != KeyReg3[i]){ //change state
 8000210:	4a20      	ldr	r2, [pc, #128]	; (8000294 <getKeyInput+0xf4>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000218:	4922      	ldr	r1, [pc, #136]	; (80002a4 <getKeyInput+0x104>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000220:	429a      	cmp	r2, r3
 8000222:	d016      	beq.n	8000252 <getKeyInput+0xb2>
				KeyReg3[i] = KeyReg2[i];
 8000224:	4a1b      	ldr	r2, [pc, #108]	; (8000294 <getKeyInput+0xf4>)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022c:	491d      	ldr	r1, [pc, #116]	; (80002a4 <getKeyInput+0x104>)
 800022e:	687b      	ldr	r3, [r7, #4]
 8000230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg3[i] == PRESSED_STATE){
 8000234:	4a1b      	ldr	r2, [pc, #108]	; (80002a4 <getKeyInput+0x104>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d11c      	bne.n	800027a <getKeyInput+0xda>
					TimeOutForKeyPress[i] = 200;
 8000240:	4a19      	ldr	r2, [pc, #100]	; (80002a8 <getKeyInput+0x108>)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	21c8      	movs	r1, #200	; 0xc8
 8000246:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e013      	b.n	800027a <getKeyInput+0xda>
				}
			}

			else{ //press without release
				TimeOutForKeyPress[i]--;
 8000252:	4a15      	ldr	r2, [pc, #84]	; (80002a8 <getKeyInput+0x108>)
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800025a:	1e5a      	subs	r2, r3, #1
 800025c:	4912      	ldr	r1, [pc, #72]	; (80002a8 <getKeyInput+0x108>)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (TimeOutForKeyPress[i] == 0){
 8000264:	4a10      	ldr	r2, [pc, #64]	; (80002a8 <getKeyInput+0x108>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	2b00      	cmp	r3, #0
 800026e:	d104      	bne.n	800027a <getKeyInput+0xda>
					KeyReg3[i] = NORMAL_STATE;
 8000270:	4a0c      	ldr	r2, [pc, #48]	; (80002a4 <getKeyInput+0x104>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2101      	movs	r1, #1
 8000276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i=0; i<NUM_BUTTON; i++){
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	3301      	adds	r3, #1
 800027e:	607b      	str	r3, [r7, #4]
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2b02      	cmp	r3, #2
 8000284:	dd92      	ble.n	80001ac <getKeyInput+0xc>
				}

			}
		}
	}
}
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	3708      	adds	r7, #8
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000014 	.word	0x20000014
 8000294:	20000020 	.word	0x20000020
 8000298:	20000008 	.word	0x20000008
 800029c:	20000000 	.word	0x20000000
 80002a0:	40010c00 	.word	0x40010c00
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	20000038 	.word	0x20000038

080002ac <resetButton>:

void resetButton(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUTTON; i++){
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
 80002b6:	e005      	b.n	80002c4 <resetButton+0x18>
		isButtonPressed(i);
 80002b8:	6878      	ldr	r0, [r7, #4]
 80002ba:	f7ff ff47 	bl	800014c <isButtonPressed>
	for (int i = 0; i < NUM_BUTTON; i++){
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	3301      	adds	r3, #1
 80002c2:	607b      	str	r3, [r7, #4]
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	2b02      	cmp	r3, #2
 80002c8:	ddf6      	ble.n	80002b8 <resetButton+0xc>
	}
}
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <clearSignal>:
 *      Author: dinhq
 */

#include "display7SEG.h"

void clearSignal(){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(EN0_GPIO_Port,EN0_Pin,SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002de:	480b      	ldr	r0, [pc, #44]	; (800030c <clearSignal+0x38>)
 80002e0:	f001 fe2b 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port,EN1_Pin,SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002ea:	4808      	ldr	r0, [pc, #32]	; (800030c <clearSignal+0x38>)
 80002ec:	f001 fe25 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port,EN2_Pin,SET);
 80002f0:	2201      	movs	r2, #1
 80002f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002f6:	4805      	ldr	r0, [pc, #20]	; (800030c <clearSignal+0x38>)
 80002f8:	f001 fe1f 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port,EN3_Pin,SET);
 80002fc:	2201      	movs	r2, #1
 80002fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000302:	4802      	ldr	r0, [pc, #8]	; (800030c <clearSignal+0x38>)
 8000304:	f001 fe19 	bl	8001f3a <HAL_GPIO_WritePin>
}
 8000308:	bf00      	nop
 800030a:	bd80      	pop	{r7, pc}
 800030c:	40010800 	.word	0x40010800

08000310 <display7SEG>:

void display7SEG(int num){
 8000310:	b580      	push	{r7, lr}
 8000312:	b082      	sub	sp, #8
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
	if (num==0){
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d123      	bne.n	8000366 <display7SEG+0x56>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 800031e:	2200      	movs	r2, #0
 8000320:	2101      	movs	r1, #1
 8000322:	48c2      	ldr	r0, [pc, #776]	; (800062c <display7SEG+0x31c>)
 8000324:	f001 fe09 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	2102      	movs	r1, #2
 800032c:	48bf      	ldr	r0, [pc, #764]	; (800062c <display7SEG+0x31c>)
 800032e:	f001 fe04 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000332:	2200      	movs	r2, #0
 8000334:	2104      	movs	r1, #4
 8000336:	48bd      	ldr	r0, [pc, #756]	; (800062c <display7SEG+0x31c>)
 8000338:	f001 fdff 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2108      	movs	r1, #8
 8000340:	48ba      	ldr	r0, [pc, #744]	; (800062c <display7SEG+0x31c>)
 8000342:	f001 fdfa 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	2110      	movs	r1, #16
 800034a:	48b8      	ldr	r0, [pc, #736]	; (800062c <display7SEG+0x31c>)
 800034c:	f001 fdf5 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2120      	movs	r1, #32
 8000354:	48b5      	ldr	r0, [pc, #724]	; (800062c <display7SEG+0x31c>)
 8000356:	f001 fdf0 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2140      	movs	r1, #64	; 0x40
 800035e:	48b3      	ldr	r0, [pc, #716]	; (800062c <display7SEG+0x31c>)
 8000360:	f001 fdeb 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
	}
}
 8000364:	e15d      	b.n	8000622 <display7SEG+0x312>
	else if (num==1){
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2b01      	cmp	r3, #1
 800036a:	d123      	bne.n	80003b4 <display7SEG+0xa4>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2101      	movs	r1, #1
 8000370:	48ae      	ldr	r0, [pc, #696]	; (800062c <display7SEG+0x31c>)
 8000372:	f001 fde2 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2102      	movs	r1, #2
 800037a:	48ac      	ldr	r0, [pc, #688]	; (800062c <display7SEG+0x31c>)
 800037c:	f001 fddd 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000380:	2200      	movs	r2, #0
 8000382:	2104      	movs	r1, #4
 8000384:	48a9      	ldr	r0, [pc, #676]	; (800062c <display7SEG+0x31c>)
 8000386:	f001 fdd8 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2108      	movs	r1, #8
 800038e:	48a7      	ldr	r0, [pc, #668]	; (800062c <display7SEG+0x31c>)
 8000390:	f001 fdd3 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000394:	2201      	movs	r2, #1
 8000396:	2110      	movs	r1, #16
 8000398:	48a4      	ldr	r0, [pc, #656]	; (800062c <display7SEG+0x31c>)
 800039a:	f001 fdce 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 800039e:	2201      	movs	r2, #1
 80003a0:	2120      	movs	r1, #32
 80003a2:	48a2      	ldr	r0, [pc, #648]	; (800062c <display7SEG+0x31c>)
 80003a4:	f001 fdc9 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2140      	movs	r1, #64	; 0x40
 80003ac:	489f      	ldr	r0, [pc, #636]	; (800062c <display7SEG+0x31c>)
 80003ae:	f001 fdc4 	bl	8001f3a <HAL_GPIO_WritePin>
}
 80003b2:	e136      	b.n	8000622 <display7SEG+0x312>
	else if (num==2){
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b02      	cmp	r3, #2
 80003b8:	d123      	bne.n	8000402 <display7SEG+0xf2>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2101      	movs	r1, #1
 80003be:	489b      	ldr	r0, [pc, #620]	; (800062c <display7SEG+0x31c>)
 80003c0:	f001 fdbb 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	2102      	movs	r1, #2
 80003c8:	4898      	ldr	r0, [pc, #608]	; (800062c <display7SEG+0x31c>)
 80003ca:	f001 fdb6 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,SET);
 80003ce:	2201      	movs	r2, #1
 80003d0:	2104      	movs	r1, #4
 80003d2:	4896      	ldr	r0, [pc, #600]	; (800062c <display7SEG+0x31c>)
 80003d4:	f001 fdb1 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	2108      	movs	r1, #8
 80003dc:	4893      	ldr	r0, [pc, #588]	; (800062c <display7SEG+0x31c>)
 80003de:	f001 fdac 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80003e2:	2200      	movs	r2, #0
 80003e4:	2110      	movs	r1, #16
 80003e6:	4891      	ldr	r0, [pc, #580]	; (800062c <display7SEG+0x31c>)
 80003e8:	f001 fda7 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 80003ec:	2201      	movs	r2, #1
 80003ee:	2120      	movs	r1, #32
 80003f0:	488e      	ldr	r0, [pc, #568]	; (800062c <display7SEG+0x31c>)
 80003f2:	f001 fda2 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80003f6:	2200      	movs	r2, #0
 80003f8:	2140      	movs	r1, #64	; 0x40
 80003fa:	488c      	ldr	r0, [pc, #560]	; (800062c <display7SEG+0x31c>)
 80003fc:	f001 fd9d 	bl	8001f3a <HAL_GPIO_WritePin>
}
 8000400:	e10f      	b.n	8000622 <display7SEG+0x312>
	else if (num==3){
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	2b03      	cmp	r3, #3
 8000406:	d123      	bne.n	8000450 <display7SEG+0x140>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2101      	movs	r1, #1
 800040c:	4887      	ldr	r0, [pc, #540]	; (800062c <display7SEG+0x31c>)
 800040e:	f001 fd94 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000412:	2200      	movs	r2, #0
 8000414:	2102      	movs	r1, #2
 8000416:	4885      	ldr	r0, [pc, #532]	; (800062c <display7SEG+0x31c>)
 8000418:	f001 fd8f 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800041c:	2200      	movs	r2, #0
 800041e:	2104      	movs	r1, #4
 8000420:	4882      	ldr	r0, [pc, #520]	; (800062c <display7SEG+0x31c>)
 8000422:	f001 fd8a 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000426:	2200      	movs	r2, #0
 8000428:	2108      	movs	r1, #8
 800042a:	4880      	ldr	r0, [pc, #512]	; (800062c <display7SEG+0x31c>)
 800042c:	f001 fd85 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000430:	2201      	movs	r2, #1
 8000432:	2110      	movs	r1, #16
 8000434:	487d      	ldr	r0, [pc, #500]	; (800062c <display7SEG+0x31c>)
 8000436:	f001 fd80 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 800043a:	2201      	movs	r2, #1
 800043c:	2120      	movs	r1, #32
 800043e:	487b      	ldr	r0, [pc, #492]	; (800062c <display7SEG+0x31c>)
 8000440:	f001 fd7b 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	2140      	movs	r1, #64	; 0x40
 8000448:	4878      	ldr	r0, [pc, #480]	; (800062c <display7SEG+0x31c>)
 800044a:	f001 fd76 	bl	8001f3a <HAL_GPIO_WritePin>
}
 800044e:	e0e8      	b.n	8000622 <display7SEG+0x312>
	else if (num==4){
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2b04      	cmp	r3, #4
 8000454:	d123      	bne.n	800049e <display7SEG+0x18e>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,SET);
 8000456:	2201      	movs	r2, #1
 8000458:	2101      	movs	r1, #1
 800045a:	4874      	ldr	r0, [pc, #464]	; (800062c <display7SEG+0x31c>)
 800045c:	f001 fd6d 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	2102      	movs	r1, #2
 8000464:	4871      	ldr	r0, [pc, #452]	; (800062c <display7SEG+0x31c>)
 8000466:	f001 fd68 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 800046a:	2200      	movs	r2, #0
 800046c:	2104      	movs	r1, #4
 800046e:	486f      	ldr	r0, [pc, #444]	; (800062c <display7SEG+0x31c>)
 8000470:	f001 fd63 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 8000474:	2201      	movs	r2, #1
 8000476:	2108      	movs	r1, #8
 8000478:	486c      	ldr	r0, [pc, #432]	; (800062c <display7SEG+0x31c>)
 800047a:	f001 fd5e 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 800047e:	2201      	movs	r2, #1
 8000480:	2110      	movs	r1, #16
 8000482:	486a      	ldr	r0, [pc, #424]	; (800062c <display7SEG+0x31c>)
 8000484:	f001 fd59 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2120      	movs	r1, #32
 800048c:	4867      	ldr	r0, [pc, #412]	; (800062c <display7SEG+0x31c>)
 800048e:	f001 fd54 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	2140      	movs	r1, #64	; 0x40
 8000496:	4865      	ldr	r0, [pc, #404]	; (800062c <display7SEG+0x31c>)
 8000498:	f001 fd4f 	bl	8001f3a <HAL_GPIO_WritePin>
}
 800049c:	e0c1      	b.n	8000622 <display7SEG+0x312>
	else if (num==5){
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	2b05      	cmp	r3, #5
 80004a2:	d123      	bne.n	80004ec <display7SEG+0x1dc>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80004a4:	2200      	movs	r2, #0
 80004a6:	2101      	movs	r1, #1
 80004a8:	4860      	ldr	r0, [pc, #384]	; (800062c <display7SEG+0x31c>)
 80004aa:	f001 fd46 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 80004ae:	2201      	movs	r2, #1
 80004b0:	2102      	movs	r1, #2
 80004b2:	485e      	ldr	r0, [pc, #376]	; (800062c <display7SEG+0x31c>)
 80004b4:	f001 fd41 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	2104      	movs	r1, #4
 80004bc:	485b      	ldr	r0, [pc, #364]	; (800062c <display7SEG+0x31c>)
 80004be:	f001 fd3c 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2108      	movs	r1, #8
 80004c6:	4859      	ldr	r0, [pc, #356]	; (800062c <display7SEG+0x31c>)
 80004c8:	f001 fd37 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 80004cc:	2201      	movs	r2, #1
 80004ce:	2110      	movs	r1, #16
 80004d0:	4856      	ldr	r0, [pc, #344]	; (800062c <display7SEG+0x31c>)
 80004d2:	f001 fd32 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2120      	movs	r1, #32
 80004da:	4854      	ldr	r0, [pc, #336]	; (800062c <display7SEG+0x31c>)
 80004dc:	f001 fd2d 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2140      	movs	r1, #64	; 0x40
 80004e4:	4851      	ldr	r0, [pc, #324]	; (800062c <display7SEG+0x31c>)
 80004e6:	f001 fd28 	bl	8001f3a <HAL_GPIO_WritePin>
}
 80004ea:	e09a      	b.n	8000622 <display7SEG+0x312>
	else if (num==6){
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2b06      	cmp	r3, #6
 80004f0:	d123      	bne.n	800053a <display7SEG+0x22a>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2101      	movs	r1, #1
 80004f6:	484d      	ldr	r0, [pc, #308]	; (800062c <display7SEG+0x31c>)
 80004f8:	f001 fd1f 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,SET);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2102      	movs	r1, #2
 8000500:	484a      	ldr	r0, [pc, #296]	; (800062c <display7SEG+0x31c>)
 8000502:	f001 fd1a 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000506:	2200      	movs	r2, #0
 8000508:	2104      	movs	r1, #4
 800050a:	4848      	ldr	r0, [pc, #288]	; (800062c <display7SEG+0x31c>)
 800050c:	f001 fd15 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 8000510:	2200      	movs	r2, #0
 8000512:	2108      	movs	r1, #8
 8000514:	4845      	ldr	r0, [pc, #276]	; (800062c <display7SEG+0x31c>)
 8000516:	f001 fd10 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 800051a:	2200      	movs	r2, #0
 800051c:	2110      	movs	r1, #16
 800051e:	4843      	ldr	r0, [pc, #268]	; (800062c <display7SEG+0x31c>)
 8000520:	f001 fd0b 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 8000524:	2200      	movs	r2, #0
 8000526:	2120      	movs	r1, #32
 8000528:	4840      	ldr	r0, [pc, #256]	; (800062c <display7SEG+0x31c>)
 800052a:	f001 fd06 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 800052e:	2200      	movs	r2, #0
 8000530:	2140      	movs	r1, #64	; 0x40
 8000532:	483e      	ldr	r0, [pc, #248]	; (800062c <display7SEG+0x31c>)
 8000534:	f001 fd01 	bl	8001f3a <HAL_GPIO_WritePin>
}
 8000538:	e073      	b.n	8000622 <display7SEG+0x312>
	else if (num==7){
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b07      	cmp	r3, #7
 800053e:	d123      	bne.n	8000588 <display7SEG+0x278>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2101      	movs	r1, #1
 8000544:	4839      	ldr	r0, [pc, #228]	; (800062c <display7SEG+0x31c>)
 8000546:	f001 fcf8 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2102      	movs	r1, #2
 800054e:	4837      	ldr	r0, [pc, #220]	; (800062c <display7SEG+0x31c>)
 8000550:	f001 fcf3 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	2104      	movs	r1, #4
 8000558:	4834      	ldr	r0, [pc, #208]	; (800062c <display7SEG+0x31c>)
 800055a:	f001 fcee 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2108      	movs	r1, #8
 8000562:	4832      	ldr	r0, [pc, #200]	; (800062c <display7SEG+0x31c>)
 8000564:	f001 fce9 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000568:	2201      	movs	r2, #1
 800056a:	2110      	movs	r1, #16
 800056c:	482f      	ldr	r0, [pc, #188]	; (800062c <display7SEG+0x31c>)
 800056e:	f001 fce4 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,SET);
 8000572:	2201      	movs	r2, #1
 8000574:	2120      	movs	r1, #32
 8000576:	482d      	ldr	r0, [pc, #180]	; (800062c <display7SEG+0x31c>)
 8000578:	f001 fcdf 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	482a      	ldr	r0, [pc, #168]	; (800062c <display7SEG+0x31c>)
 8000582:	f001 fcda 	bl	8001f3a <HAL_GPIO_WritePin>
}
 8000586:	e04c      	b.n	8000622 <display7SEG+0x312>
	else if (num==8){
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b08      	cmp	r3, #8
 800058c:	d123      	bne.n	80005d6 <display7SEG+0x2c6>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 800058e:	2200      	movs	r2, #0
 8000590:	2101      	movs	r1, #1
 8000592:	4826      	ldr	r0, [pc, #152]	; (800062c <display7SEG+0x31c>)
 8000594:	f001 fcd1 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 8000598:	2200      	movs	r2, #0
 800059a:	2102      	movs	r1, #2
 800059c:	4823      	ldr	r0, [pc, #140]	; (800062c <display7SEG+0x31c>)
 800059e:	f001 fccc 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80005a2:	2200      	movs	r2, #0
 80005a4:	2104      	movs	r1, #4
 80005a6:	4821      	ldr	r0, [pc, #132]	; (800062c <display7SEG+0x31c>)
 80005a8:	f001 fcc7 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	481e      	ldr	r0, [pc, #120]	; (800062c <display7SEG+0x31c>)
 80005b2:	f001 fcc2 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2110      	movs	r1, #16
 80005ba:	481c      	ldr	r0, [pc, #112]	; (800062c <display7SEG+0x31c>)
 80005bc:	f001 fcbd 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2120      	movs	r1, #32
 80005c4:	4819      	ldr	r0, [pc, #100]	; (800062c <display7SEG+0x31c>)
 80005c6:	f001 fcb8 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 80005ca:	2200      	movs	r2, #0
 80005cc:	2140      	movs	r1, #64	; 0x40
 80005ce:	4817      	ldr	r0, [pc, #92]	; (800062c <display7SEG+0x31c>)
 80005d0:	f001 fcb3 	bl	8001f3a <HAL_GPIO_WritePin>
}
 80005d4:	e025      	b.n	8000622 <display7SEG+0x312>
	else if (num==9){
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	2b09      	cmp	r3, #9
 80005da:	d122      	bne.n	8000622 <display7SEG+0x312>
		HAL_GPIO_WritePin(SEG0_GPIO_Port,SEG0_Pin,RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4812      	ldr	r0, [pc, #72]	; (800062c <display7SEG+0x31c>)
 80005e2:	f001 fcaa 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG1_GPIO_Port,SEG1_Pin,RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2102      	movs	r1, #2
 80005ea:	4810      	ldr	r0, [pc, #64]	; (800062c <display7SEG+0x31c>)
 80005ec:	f001 fca5 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG2_GPIO_Port,SEG2_Pin,RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2104      	movs	r1, #4
 80005f4:	480d      	ldr	r0, [pc, #52]	; (800062c <display7SEG+0x31c>)
 80005f6:	f001 fca0 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG3_GPIO_Port,SEG3_Pin,RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2108      	movs	r1, #8
 80005fe:	480b      	ldr	r0, [pc, #44]	; (800062c <display7SEG+0x31c>)
 8000600:	f001 fc9b 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG4_GPIO_Port,SEG4_Pin,SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2110      	movs	r1, #16
 8000608:	4808      	ldr	r0, [pc, #32]	; (800062c <display7SEG+0x31c>)
 800060a:	f001 fc96 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG5_GPIO_Port,SEG5_Pin,RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2120      	movs	r1, #32
 8000612:	4806      	ldr	r0, [pc, #24]	; (800062c <display7SEG+0x31c>)
 8000614:	f001 fc91 	bl	8001f3a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEG6_GPIO_Port,SEG6_Pin,RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2140      	movs	r1, #64	; 0x40
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <display7SEG+0x31c>)
 800061e:	f001 fc8c 	bl	8001f3a <HAL_GPIO_WritePin>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40010c00 	.word	0x40010c00

08000630 <displaySignal>:

void displaySignal(){
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
	clearSignal();
 8000634:	f7ff fe4e 	bl	80002d4 <clearSignal>
	display7SEG(led_buffer[index_led]);
 8000638:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <displaySignal+0x90>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <displaySignal+0x94>)
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fe64 	bl	8000310 <display7SEG>
	switch(index_led){
 8000648:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <displaySignal+0x90>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b03      	cmp	r3, #3
 800064e:	d827      	bhi.n	80006a0 <displaySignal+0x70>
 8000650:	a201      	add	r2, pc, #4	; (adr r2, 8000658 <displaySignal+0x28>)
 8000652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000656:	bf00      	nop
 8000658:	08000669 	.word	0x08000669
 800065c:	08000677 	.word	0x08000677
 8000660:	08000685 	.word	0x08000685
 8000664:	08000693 	.word	0x08000693
	case 0:
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	4816      	ldr	r0, [pc, #88]	; (80006c8 <displaySignal+0x98>)
 8000670:	f001 fc63 	bl	8001f3a <HAL_GPIO_WritePin>
		break;
 8000674:	e015      	b.n	80006a2 <displaySignal+0x72>
	case 1:
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	f44f 7100 	mov.w	r1, #512	; 0x200
 800067c:	4812      	ldr	r0, [pc, #72]	; (80006c8 <displaySignal+0x98>)
 800067e:	f001 fc5c 	bl	8001f3a <HAL_GPIO_WritePin>
		break;
 8000682:	e00e      	b.n	80006a2 <displaySignal+0x72>
	case 2:
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800068a:	480f      	ldr	r0, [pc, #60]	; (80006c8 <displaySignal+0x98>)
 800068c:	f001 fc55 	bl	8001f3a <HAL_GPIO_WritePin>
		break;
 8000690:	e007      	b.n	80006a2 <displaySignal+0x72>
	case 3:
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000698:	480b      	ldr	r0, [pc, #44]	; (80006c8 <displaySignal+0x98>)
 800069a:	f001 fc4e 	bl	8001f3a <HAL_GPIO_WritePin>
		break;
 800069e:	e000      	b.n	80006a2 <displaySignal+0x72>
	default:
		break;
 80006a0:	bf00      	nop
	}
	index_led++;
 80006a2:	4b07      	ldr	r3, [pc, #28]	; (80006c0 <displaySignal+0x90>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4a05      	ldr	r2, [pc, #20]	; (80006c0 <displaySignal+0x90>)
 80006aa:	6013      	str	r3, [r2, #0]
	if (index_led >= 4) index_led=0;
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <displaySignal+0x90>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b03      	cmp	r3, #3
 80006b2:	dd02      	ble.n	80006ba <displaySignal+0x8a>
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <displaySignal+0x90>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000098 	.word	0x20000098
 80006c4:	20000088 	.word	0x20000088
 80006c8:	40010800 	.word	0x40010800

080006cc <fsm_manual_run>:
 *      Author: dinhq
 */

#include "fsm_manual.h"

void fsm_manual_run(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	switch(led_status){
 80006d0:	4b8c      	ldr	r3, [pc, #560]	; (8000904 <fsm_manual_run+0x238>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	2b0e      	cmp	r3, #14
 80006d6:	d053      	beq.n	8000780 <fsm_manual_run+0xb4>
 80006d8:	2b0e      	cmp	r3, #14
 80006da:	f300 810a 	bgt.w	80008f2 <fsm_manual_run+0x226>
 80006de:	2b0c      	cmp	r3, #12
 80006e0:	d003      	beq.n	80006ea <fsm_manual_run+0x1e>
 80006e2:	2b0d      	cmp	r3, #13
 80006e4:	f000 8098 	beq.w	8000818 <fsm_manual_run+0x14c>
			y_val=r_val-g_val;
		}
		break;

	default:
		break;
 80006e8:	e103      	b.n	80008f2 <fsm_manual_run+0x226>
		if (timer5_flag == 1){
 80006ea:	4b87      	ldr	r3, [pc, #540]	; (8000908 <fsm_manual_run+0x23c>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d113      	bne.n	800071a <fsm_manual_run+0x4e>
			setTimer5(25);
 80006f2:	2019      	movs	r0, #25
 80006f4:	f000 ffc6 	bl	8001684 <setTimer5>
			if (toogleFlag == 0){
 80006f8:	4b84      	ldr	r3, [pc, #528]	; (800090c <fsm_manual_run+0x240>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d104      	bne.n	800070a <fsm_manual_run+0x3e>
				onRED1();
 8000700:	f000 fbd0 	bl	8000ea4 <onRED1>
				onRED2();
 8000704:	f000 fc10 	bl	8000f28 <onRED2>
 8000708:	e001      	b.n	800070e <fsm_manual_run+0x42>
				offALL();
 800070a:	f000 fc4f 	bl	8000fac <offALL>
			toogleFlag = 1 - toogleFlag;
 800070e:	4b7f      	ldr	r3, [pc, #508]	; (800090c <fsm_manual_run+0x240>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f1c3 0301 	rsb	r3, r3, #1
 8000716:	4a7d      	ldr	r2, [pc, #500]	; (800090c <fsm_manual_run+0x240>)
 8000718:	6013      	str	r3, [r2, #0]
		if (isButtonPressed(0) == 1){
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff fd16 	bl	800014c <isButtonPressed>
 8000720:	4603      	mov	r3, r0
 8000722:	2b01      	cmp	r3, #1
 8000724:	d10e      	bne.n	8000744 <fsm_manual_run+0x78>
			setTimer5(1);
 8000726:	2001      	movs	r0, #1
 8000728:	f000 ffac 	bl	8001684 <setTimer5>
			led_status = YELLOW_MAN;
 800072c:	4b75      	ldr	r3, [pc, #468]	; (8000904 <fsm_manual_run+0x238>)
 800072e:	220e      	movs	r2, #14
 8000730:	601a      	str	r2, [r3, #0]
			timerRoad1 = y_val;
 8000732:	4b77      	ldr	r3, [pc, #476]	; (8000910 <fsm_manual_run+0x244>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a77      	ldr	r2, [pc, #476]	; (8000914 <fsm_manual_run+0x248>)
 8000738:	6013      	str	r3, [r2, #0]
			timerRoad2 = 3;
 800073a:	4b77      	ldr	r3, [pc, #476]	; (8000918 <fsm_manual_run+0x24c>)
 800073c:	2203      	movs	r2, #3
 800073e:	601a      	str	r2, [r3, #0]
			resetButton();
 8000740:	f7ff fdb4 	bl	80002ac <resetButton>
		if (isButtonPressed(1) == 1){
 8000744:	2001      	movs	r0, #1
 8000746:	f7ff fd01 	bl	800014c <isButtonPressed>
 800074a:	4603      	mov	r3, r0
 800074c:	2b01      	cmp	r3, #1
 800074e:	d10b      	bne.n	8000768 <fsm_manual_run+0x9c>
			timerRoad1++;
 8000750:	4b70      	ldr	r3, [pc, #448]	; (8000914 <fsm_manual_run+0x248>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	3301      	adds	r3, #1
 8000756:	4a6f      	ldr	r2, [pc, #444]	; (8000914 <fsm_manual_run+0x248>)
 8000758:	6013      	str	r3, [r2, #0]
			if (timerRoad1 >= 100) timerRoad1=2;
 800075a:	4b6e      	ldr	r3, [pc, #440]	; (8000914 <fsm_manual_run+0x248>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b63      	cmp	r3, #99	; 0x63
 8000760:	dd02      	ble.n	8000768 <fsm_manual_run+0x9c>
 8000762:	4b6c      	ldr	r3, [pc, #432]	; (8000914 <fsm_manual_run+0x248>)
 8000764:	2202      	movs	r2, #2
 8000766:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 8000768:	2002      	movs	r0, #2
 800076a:	f7ff fcef 	bl	800014c <isButtonPressed>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	f040 80c0 	bne.w	80008f6 <fsm_manual_run+0x22a>
			r_val=timerRoad1;
 8000776:	4b67      	ldr	r3, [pc, #412]	; (8000914 <fsm_manual_run+0x248>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a68      	ldr	r2, [pc, #416]	; (800091c <fsm_manual_run+0x250>)
 800077c:	6013      	str	r3, [r2, #0]
		break;
 800077e:	e0ba      	b.n	80008f6 <fsm_manual_run+0x22a>
		if (timer5_flag == 1){
 8000780:	4b61      	ldr	r3, [pc, #388]	; (8000908 <fsm_manual_run+0x23c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b01      	cmp	r3, #1
 8000786:	d113      	bne.n	80007b0 <fsm_manual_run+0xe4>
			setTimer5(25);
 8000788:	2019      	movs	r0, #25
 800078a:	f000 ff7b 	bl	8001684 <setTimer5>
			if (toogleFlag == 0){
 800078e:	4b5f      	ldr	r3, [pc, #380]	; (800090c <fsm_manual_run+0x240>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2b00      	cmp	r3, #0
 8000794:	d104      	bne.n	80007a0 <fsm_manual_run+0xd4>
				onYELLOW1();
 8000796:	f000 fb9b 	bl	8000ed0 <onYELLOW1>
				onYELLOW2();
 800079a:	f000 fbdb 	bl	8000f54 <onYELLOW2>
 800079e:	e001      	b.n	80007a4 <fsm_manual_run+0xd8>
				offALL();
 80007a0:	f000 fc04 	bl	8000fac <offALL>
			toogleFlag = 1 - toogleFlag;
 80007a4:	4b59      	ldr	r3, [pc, #356]	; (800090c <fsm_manual_run+0x240>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f1c3 0301 	rsb	r3, r3, #1
 80007ac:	4a57      	ldr	r2, [pc, #348]	; (800090c <fsm_manual_run+0x240>)
 80007ae:	6013      	str	r3, [r2, #0]
		if (isButtonPressed(0) == 1){
 80007b0:	2000      	movs	r0, #0
 80007b2:	f7ff fccb 	bl	800014c <isButtonPressed>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d10e      	bne.n	80007da <fsm_manual_run+0x10e>
			setTimer5(1);
 80007bc:	2001      	movs	r0, #1
 80007be:	f000 ff61 	bl	8001684 <setTimer5>
			led_status = GREEN_MAN;
 80007c2:	4b50      	ldr	r3, [pc, #320]	; (8000904 <fsm_manual_run+0x238>)
 80007c4:	220d      	movs	r2, #13
 80007c6:	601a      	str	r2, [r3, #0]
			timerRoad1 = g_val;
 80007c8:	4b55      	ldr	r3, [pc, #340]	; (8000920 <fsm_manual_run+0x254>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a51      	ldr	r2, [pc, #324]	; (8000914 <fsm_manual_run+0x248>)
 80007ce:	6013      	str	r3, [r2, #0]
			timerRoad2 = 4;
 80007d0:	4b51      	ldr	r3, [pc, #324]	; (8000918 <fsm_manual_run+0x24c>)
 80007d2:	2204      	movs	r2, #4
 80007d4:	601a      	str	r2, [r3, #0]
			resetButton();
 80007d6:	f7ff fd69 	bl	80002ac <resetButton>
		if (isButtonPressed(1) == 1){
 80007da:	2001      	movs	r0, #1
 80007dc:	f7ff fcb6 	bl	800014c <isButtonPressed>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d10d      	bne.n	8000802 <fsm_manual_run+0x136>
			timerRoad1++;
 80007e6:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <fsm_manual_run+0x248>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3301      	adds	r3, #1
 80007ec:	4a49      	ldr	r2, [pc, #292]	; (8000914 <fsm_manual_run+0x248>)
 80007ee:	6013      	str	r3, [r2, #0]
			if (timerRoad1 >= r_val) timerRoad1=1;
 80007f0:	4b48      	ldr	r3, [pc, #288]	; (8000914 <fsm_manual_run+0x248>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	4b49      	ldr	r3, [pc, #292]	; (800091c <fsm_manual_run+0x250>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	429a      	cmp	r2, r3
 80007fa:	db02      	blt.n	8000802 <fsm_manual_run+0x136>
 80007fc:	4b45      	ldr	r3, [pc, #276]	; (8000914 <fsm_manual_run+0x248>)
 80007fe:	2201      	movs	r2, #1
 8000800:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 8000802:	2002      	movs	r0, #2
 8000804:	f7ff fca2 	bl	800014c <isButtonPressed>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d175      	bne.n	80008fa <fsm_manual_run+0x22e>
			y_val=timerRoad1;
 800080e:	4b41      	ldr	r3, [pc, #260]	; (8000914 <fsm_manual_run+0x248>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a3f      	ldr	r2, [pc, #252]	; (8000910 <fsm_manual_run+0x244>)
 8000814:	6013      	str	r3, [r2, #0]
		break;
 8000816:	e070      	b.n	80008fa <fsm_manual_run+0x22e>
		if (timer5_flag == 1){
 8000818:	4b3b      	ldr	r3, [pc, #236]	; (8000908 <fsm_manual_run+0x23c>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d113      	bne.n	8000848 <fsm_manual_run+0x17c>
			setTimer5(25);
 8000820:	2019      	movs	r0, #25
 8000822:	f000 ff2f 	bl	8001684 <setTimer5>
			if (toogleFlag == 0){
 8000826:	4b39      	ldr	r3, [pc, #228]	; (800090c <fsm_manual_run+0x240>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d104      	bne.n	8000838 <fsm_manual_run+0x16c>
				onGREEN1();
 800082e:	f000 fb65 	bl	8000efc <onGREEN1>
				onGREEN2();
 8000832:	f000 fba5 	bl	8000f80 <onGREEN2>
 8000836:	e001      	b.n	800083c <fsm_manual_run+0x170>
				offALL();
 8000838:	f000 fbb8 	bl	8000fac <offALL>
			toogleFlag = 1 - toogleFlag;
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <fsm_manual_run+0x240>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f1c3 0301 	rsb	r3, r3, #1
 8000844:	4a31      	ldr	r2, [pc, #196]	; (800090c <fsm_manual_run+0x240>)
 8000846:	6013      	str	r3, [r2, #0]
		if (isButtonPressed(0) == 1){
 8000848:	2000      	movs	r0, #0
 800084a:	f7ff fc7f 	bl	800014c <isButtonPressed>
 800084e:	4603      	mov	r3, r0
 8000850:	2b01      	cmp	r3, #1
 8000852:	d128      	bne.n	80008a6 <fsm_manual_run+0x1da>
			led_status = RED_GREEN;
 8000854:	4b2b      	ldr	r3, [pc, #172]	; (8000904 <fsm_manual_run+0x238>)
 8000856:	2201      	movs	r2, #1
 8000858:	601a      	str	r2, [r3, #0]
			g_val = r_val-y_val;
 800085a:	4b30      	ldr	r3, [pc, #192]	; (800091c <fsm_manual_run+0x250>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	4b2c      	ldr	r3, [pc, #176]	; (8000910 <fsm_manual_run+0x244>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	4a2e      	ldr	r2, [pc, #184]	; (8000920 <fsm_manual_run+0x254>)
 8000866:	6013      	str	r3, [r2, #0]
			timerRoad1 = r_val;
 8000868:	4b2c      	ldr	r3, [pc, #176]	; (800091c <fsm_manual_run+0x250>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a29      	ldr	r2, [pc, #164]	; (8000914 <fsm_manual_run+0x248>)
 800086e:	6013      	str	r3, [r2, #0]
			timerRoad2 = g_val;
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <fsm_manual_run+0x254>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a28      	ldr	r2, [pc, #160]	; (8000918 <fsm_manual_run+0x24c>)
 8000876:	6013      	str	r3, [r2, #0]
			updateLedBuffer();
 8000878:	f000 f982 	bl	8000b80 <updateLedBuffer>
			setTimer1(g_val*100);
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <fsm_manual_run+0x254>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2264      	movs	r2, #100	; 0x64
 8000882:	fb02 f303 	mul.w	r3, r2, r3
 8000886:	4618      	mov	r0, r3
 8000888:	f000 feac 	bl	80015e4 <setTimer1>
			setTimer2(100);
 800088c:	2064      	movs	r0, #100	; 0x64
 800088e:	f000 febd 	bl	800160c <setTimer2>
			setTimer4(1);
 8000892:	2001      	movs	r0, #1
 8000894:	f000 fee2 	bl	800165c <setTimer4>
			index_led=0;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <fsm_manual_run+0x258>)
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
			clearSignal();
 800089e:	f7ff fd19 	bl	80002d4 <clearSignal>
			resetButton();
 80008a2:	f7ff fd03 	bl	80002ac <resetButton>
		if (isButtonPressed(1) == 1){
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fc50 	bl	800014c <isButtonPressed>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d10d      	bne.n	80008ce <fsm_manual_run+0x202>
			timerRoad1++;
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <fsm_manual_run+0x248>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3301      	adds	r3, #1
 80008b8:	4a16      	ldr	r2, [pc, #88]	; (8000914 <fsm_manual_run+0x248>)
 80008ba:	6013      	str	r3, [r2, #0]
			if (timerRoad1 >= r_val) timerRoad1=1;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <fsm_manual_run+0x248>)
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	4b16      	ldr	r3, [pc, #88]	; (800091c <fsm_manual_run+0x250>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	db02      	blt.n	80008ce <fsm_manual_run+0x202>
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <fsm_manual_run+0x248>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	601a      	str	r2, [r3, #0]
		if (isButtonPressed(2) == 1){
 80008ce:	2002      	movs	r0, #2
 80008d0:	f7ff fc3c 	bl	800014c <isButtonPressed>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d111      	bne.n	80008fe <fsm_manual_run+0x232>
			g_val=timerRoad1;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <fsm_manual_run+0x248>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <fsm_manual_run+0x254>)
 80008e0:	6013      	str	r3, [r2, #0]
			y_val=r_val-g_val;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <fsm_manual_run+0x250>)
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <fsm_manual_run+0x254>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	4a08      	ldr	r2, [pc, #32]	; (8000910 <fsm_manual_run+0x244>)
 80008ee:	6013      	str	r3, [r2, #0]
		break;
 80008f0:	e005      	b.n	80008fe <fsm_manual_run+0x232>
		break;
 80008f2:	bf00      	nop
 80008f4:	e004      	b.n	8000900 <fsm_manual_run+0x234>
		break;
 80008f6:	bf00      	nop
 80008f8:	e002      	b.n	8000900 <fsm_manual_run+0x234>
		break;
 80008fa:	bf00      	nop
 80008fc:	e000      	b.n	8000900 <fsm_manual_run+0x234>
		break;
 80008fe:	bf00      	nop
	}
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000084 	.word	0x20000084
 8000908:	2000019c 	.word	0x2000019c
 800090c:	200000a4 	.word	0x200000a4
 8000910:	20000048 	.word	0x20000048
 8000914:	2000009c 	.word	0x2000009c
 8000918:	200000a0 	.word	0x200000a0
 800091c:	20000044 	.word	0x20000044
 8000920:	2000004c 	.word	0x2000004c
 8000924:	20000098 	.word	0x20000098

08000928 <fsm_traffic_light>:
 */

#include "fsm_traffic_light.h"


void fsm_traffic_light(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	switch(led_status){
 800092c:	4b8c      	ldr	r3, [pc, #560]	; (8000b60 <fsm_traffic_light+0x238>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b04      	cmp	r3, #4
 8000932:	f200 80e3 	bhi.w	8000afc <fsm_traffic_light+0x1d4>
 8000936:	a201      	add	r2, pc, #4	; (adr r2, 800093c <fsm_traffic_light+0x14>)
 8000938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093c:	08000951 	.word	0x08000951
 8000940:	08000973 	.word	0x08000973
 8000944:	080009cf 	.word	0x080009cf
 8000948:	08000a39 	.word	0x08000a39
 800094c:	08000a93 	.word	0x08000a93
	case INIT:
		//TODO
		offALL();
 8000950:	f000 fb2c 	bl	8000fac <offALL>

		//INIT state
		led_status = RED_GREEN;
 8000954:	4b82      	ldr	r3, [pc, #520]	; (8000b60 <fsm_traffic_light+0x238>)
 8000956:	2201      	movs	r2, #1
 8000958:	601a      	str	r2, [r3, #0]
		setTimer1(g_val*100);
 800095a:	4b82      	ldr	r3, [pc, #520]	; (8000b64 <fsm_traffic_light+0x23c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	2264      	movs	r2, #100	; 0x64
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4618      	mov	r0, r3
 8000966:	f000 fe3d 	bl	80015e4 <setTimer1>
		setTimer2(100);
 800096a:	2064      	movs	r0, #100	; 0x64
 800096c:	f000 fe4e 	bl	800160c <setTimer2>
		break;
 8000970:	e0cd      	b.n	8000b0e <fsm_traffic_light+0x1e6>
	case RED_GREEN:
		//TODO
		onRED1();
 8000972:	f000 fa97 	bl	8000ea4 <onRED1>
		onGREEN2();
 8000976:	f000 fb03 	bl	8000f80 <onGREEN2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 800097a:	4b7b      	ldr	r3, [pc, #492]	; (8000b68 <fsm_traffic_light+0x240>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	2b01      	cmp	r3, #1
 8000980:	d114      	bne.n	80009ac <fsm_traffic_light+0x84>
			setTimer2(100);
 8000982:	2064      	movs	r0, #100	; 0x64
 8000984:	f000 fe42 	bl	800160c <setTimer2>
			timerRoad1--;
 8000988:	4b78      	ldr	r3, [pc, #480]	; (8000b6c <fsm_traffic_light+0x244>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	3b01      	subs	r3, #1
 800098e:	4a77      	ldr	r2, [pc, #476]	; (8000b6c <fsm_traffic_light+0x244>)
 8000990:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000992:	4b77      	ldr	r3, [pc, #476]	; (8000b70 <fsm_traffic_light+0x248>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	3b01      	subs	r3, #1
 8000998:	4a75      	ldr	r2, [pc, #468]	; (8000b70 <fsm_traffic_light+0x248>)
 800099a:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = y_val;
 800099c:	4b74      	ldr	r3, [pc, #464]	; (8000b70 <fsm_traffic_light+0x248>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	dc03      	bgt.n	80009ac <fsm_traffic_light+0x84>
 80009a4:	4b73      	ldr	r3, [pc, #460]	; (8000b74 <fsm_traffic_light+0x24c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a71      	ldr	r2, [pc, #452]	; (8000b70 <fsm_traffic_light+0x248>)
 80009aa:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 80009ac:	4b72      	ldr	r3, [pc, #456]	; (8000b78 <fsm_traffic_light+0x250>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b01      	cmp	r3, #1
 80009b2:	f040 80a5 	bne.w	8000b00 <fsm_traffic_light+0x1d8>
			setTimer1(y_val*100);
 80009b6:	4b6f      	ldr	r3, [pc, #444]	; (8000b74 <fsm_traffic_light+0x24c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	2264      	movs	r2, #100	; 0x64
 80009bc:	fb02 f303 	mul.w	r3, r2, r3
 80009c0:	4618      	mov	r0, r3
 80009c2:	f000 fe0f 	bl	80015e4 <setTimer1>
			led_status = RED_YELLOW;
 80009c6:	4b66      	ldr	r3, [pc, #408]	; (8000b60 <fsm_traffic_light+0x238>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	601a      	str	r2, [r3, #0]
		}
		break;
 80009cc:	e098      	b.n	8000b00 <fsm_traffic_light+0x1d8>
	case RED_YELLOW:
		//TODO
		onRED1();
 80009ce:	f000 fa69 	bl	8000ea4 <onRED1>
		onYELLOW2();
 80009d2:	f000 fabf 	bl	8000f54 <onYELLOW2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 80009d6:	4b64      	ldr	r3, [pc, #400]	; (8000b68 <fsm_traffic_light+0x240>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d11c      	bne.n	8000a18 <fsm_traffic_light+0xf0>
			setTimer2(100);
 80009de:	2064      	movs	r0, #100	; 0x64
 80009e0:	f000 fe14 	bl	800160c <setTimer2>
			timerRoad1--;
 80009e4:	4b61      	ldr	r3, [pc, #388]	; (8000b6c <fsm_traffic_light+0x244>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	4a60      	ldr	r2, [pc, #384]	; (8000b6c <fsm_traffic_light+0x244>)
 80009ec:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = g_val;
 80009ee:	4b5f      	ldr	r3, [pc, #380]	; (8000b6c <fsm_traffic_light+0x244>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	dc03      	bgt.n	80009fe <fsm_traffic_light+0xd6>
 80009f6:	4b5b      	ldr	r3, [pc, #364]	; (8000b64 <fsm_traffic_light+0x23c>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4a5c      	ldr	r2, [pc, #368]	; (8000b6c <fsm_traffic_light+0x244>)
 80009fc:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 80009fe:	4b5c      	ldr	r3, [pc, #368]	; (8000b70 <fsm_traffic_light+0x248>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	4a5a      	ldr	r2, [pc, #360]	; (8000b70 <fsm_traffic_light+0x248>)
 8000a06:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = r_val;
 8000a08:	4b59      	ldr	r3, [pc, #356]	; (8000b70 <fsm_traffic_light+0x248>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	dc03      	bgt.n	8000a18 <fsm_traffic_light+0xf0>
 8000a10:	4b5a      	ldr	r3, [pc, #360]	; (8000b7c <fsm_traffic_light+0x254>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a56      	ldr	r2, [pc, #344]	; (8000b70 <fsm_traffic_light+0x248>)
 8000a16:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 8000a18:	4b57      	ldr	r3, [pc, #348]	; (8000b78 <fsm_traffic_light+0x250>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d171      	bne.n	8000b04 <fsm_traffic_light+0x1dc>
			setTimer1(g_val*100);
 8000a20:	4b50      	ldr	r3, [pc, #320]	; (8000b64 <fsm_traffic_light+0x23c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2264      	movs	r2, #100	; 0x64
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fdda 	bl	80015e4 <setTimer1>
			led_status = GREEN_RED;
 8000a30:	4b4b      	ldr	r3, [pc, #300]	; (8000b60 <fsm_traffic_light+0x238>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a36:	e065      	b.n	8000b04 <fsm_traffic_light+0x1dc>
	case GREEN_RED:
		onGREEN1();
 8000a38:	f000 fa60 	bl	8000efc <onGREEN1>
		onRED2();
 8000a3c:	f000 fa74 	bl	8000f28 <onRED2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000a40:	4b49      	ldr	r3, [pc, #292]	; (8000b68 <fsm_traffic_light+0x240>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d114      	bne.n	8000a72 <fsm_traffic_light+0x14a>
			setTimer2(100);
 8000a48:	2064      	movs	r0, #100	; 0x64
 8000a4a:	f000 fddf 	bl	800160c <setTimer2>
			timerRoad1--;
 8000a4e:	4b47      	ldr	r3, [pc, #284]	; (8000b6c <fsm_traffic_light+0x244>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	4a45      	ldr	r2, [pc, #276]	; (8000b6c <fsm_traffic_light+0x244>)
 8000a56:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = y_val;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <fsm_traffic_light+0x244>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	dc03      	bgt.n	8000a68 <fsm_traffic_light+0x140>
 8000a60:	4b44      	ldr	r3, [pc, #272]	; (8000b74 <fsm_traffic_light+0x24c>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a41      	ldr	r2, [pc, #260]	; (8000b6c <fsm_traffic_light+0x244>)
 8000a66:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000a68:	4b41      	ldr	r3, [pc, #260]	; (8000b70 <fsm_traffic_light+0x248>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	4a40      	ldr	r2, [pc, #256]	; (8000b70 <fsm_traffic_light+0x248>)
 8000a70:	6013      	str	r3, [r2, #0]
		}

		//update state
		if(timer1_flag == 1){
 8000a72:	4b41      	ldr	r3, [pc, #260]	; (8000b78 <fsm_traffic_light+0x250>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d146      	bne.n	8000b08 <fsm_traffic_light+0x1e0>
			setTimer1(y_val*100);
 8000a7a:	4b3e      	ldr	r3, [pc, #248]	; (8000b74 <fsm_traffic_light+0x24c>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2264      	movs	r2, #100	; 0x64
 8000a80:	fb02 f303 	mul.w	r3, r2, r3
 8000a84:	4618      	mov	r0, r3
 8000a86:	f000 fdad 	bl	80015e4 <setTimer1>
			led_status = YELLOW_RED;
 8000a8a:	4b35      	ldr	r3, [pc, #212]	; (8000b60 <fsm_traffic_light+0x238>)
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a90:	e03a      	b.n	8000b08 <fsm_traffic_light+0x1e0>
	case YELLOW_RED:
		onYELLOW1();
 8000a92:	f000 fa1d 	bl	8000ed0 <onYELLOW1>
		onRED2();
 8000a96:	f000 fa47 	bl	8000f28 <onRED2>

		//decrement of counter of each road
		if (timer2_flag == 1){
 8000a9a:	4b33      	ldr	r3, [pc, #204]	; (8000b68 <fsm_traffic_light+0x240>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d11c      	bne.n	8000adc <fsm_traffic_light+0x1b4>
			setTimer2(100);
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f000 fdb2 	bl	800160c <setTimer2>
			timerRoad1--;
 8000aa8:	4b30      	ldr	r3, [pc, #192]	; (8000b6c <fsm_traffic_light+0x244>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	3b01      	subs	r3, #1
 8000aae:	4a2f      	ldr	r2, [pc, #188]	; (8000b6c <fsm_traffic_light+0x244>)
 8000ab0:	6013      	str	r3, [r2, #0]
			if (timerRoad1 <= 0) timerRoad1 = r_val;
 8000ab2:	4b2e      	ldr	r3, [pc, #184]	; (8000b6c <fsm_traffic_light+0x244>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	dc03      	bgt.n	8000ac2 <fsm_traffic_light+0x19a>
 8000aba:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <fsm_traffic_light+0x254>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	4a2b      	ldr	r2, [pc, #172]	; (8000b6c <fsm_traffic_light+0x244>)
 8000ac0:	6013      	str	r3, [r2, #0]
			timerRoad2--;
 8000ac2:	4b2b      	ldr	r3, [pc, #172]	; (8000b70 <fsm_traffic_light+0x248>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	4a29      	ldr	r2, [pc, #164]	; (8000b70 <fsm_traffic_light+0x248>)
 8000aca:	6013      	str	r3, [r2, #0]
			if (timerRoad2 <= 0) timerRoad2 = g_val;
 8000acc:	4b28      	ldr	r3, [pc, #160]	; (8000b70 <fsm_traffic_light+0x248>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	dc03      	bgt.n	8000adc <fsm_traffic_light+0x1b4>
 8000ad4:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <fsm_traffic_light+0x23c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a25      	ldr	r2, [pc, #148]	; (8000b70 <fsm_traffic_light+0x248>)
 8000ada:	6013      	str	r3, [r2, #0]
		}

		//update state
		if (timer1_flag == 1){
 8000adc:	4b26      	ldr	r3, [pc, #152]	; (8000b78 <fsm_traffic_light+0x250>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b01      	cmp	r3, #1
 8000ae2:	d113      	bne.n	8000b0c <fsm_traffic_light+0x1e4>
			setTimer1(g_val*100);
 8000ae4:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <fsm_traffic_light+0x23c>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2264      	movs	r2, #100	; 0x64
 8000aea:	fb02 f303 	mul.w	r3, r2, r3
 8000aee:	4618      	mov	r0, r3
 8000af0:	f000 fd78 	bl	80015e4 <setTimer1>
			led_status = RED_GREEN;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <fsm_traffic_light+0x238>)
 8000af6:	2201      	movs	r2, #1
 8000af8:	601a      	str	r2, [r3, #0]
		}
		break;
 8000afa:	e007      	b.n	8000b0c <fsm_traffic_light+0x1e4>
	default:
		break;
 8000afc:	bf00      	nop
 8000afe:	e006      	b.n	8000b0e <fsm_traffic_light+0x1e6>
		break;
 8000b00:	bf00      	nop
 8000b02:	e004      	b.n	8000b0e <fsm_traffic_light+0x1e6>
		break;
 8000b04:	bf00      	nop
 8000b06:	e002      	b.n	8000b0e <fsm_traffic_light+0x1e6>
		break;
 8000b08:	bf00      	nop
 8000b0a:	e000      	b.n	8000b0e <fsm_traffic_light+0x1e6>
		break;
 8000b0c:	bf00      	nop
	}
	//check mode (timer5 for toogle LED)
	if (isButtonPressed(0) == 1 && (led_status == RED_GREEN || led_status == RED_YELLOW || led_status == GREEN_RED || led_status == YELLOW_RED)){
 8000b0e:	2000      	movs	r0, #0
 8000b10:	f7ff fb1c 	bl	800014c <isButtonPressed>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d120      	bne.n	8000b5c <fsm_traffic_light+0x234>
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <fsm_traffic_light+0x238>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d00b      	beq.n	8000b3a <fsm_traffic_light+0x212>
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <fsm_traffic_light+0x238>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	2b02      	cmp	r3, #2
 8000b28:	d007      	beq.n	8000b3a <fsm_traffic_light+0x212>
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <fsm_traffic_light+0x238>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d003      	beq.n	8000b3a <fsm_traffic_light+0x212>
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <fsm_traffic_light+0x238>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d110      	bne.n	8000b5c <fsm_traffic_light+0x234>
		offALL();
 8000b3a:	f000 fa37 	bl	8000fac <offALL>
		led_status = RED_MAN;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <fsm_traffic_light+0x238>)
 8000b40:	220c      	movs	r2, #12
 8000b42:	601a      	str	r2, [r3, #0]
		setTimer5(1);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f000 fd9d 	bl	8001684 <setTimer5>

		timerRoad1 = r_val;
 8000b4a:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <fsm_traffic_light+0x254>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <fsm_traffic_light+0x244>)
 8000b50:	6013      	str	r3, [r2, #0]
		timerRoad2 = 2;
 8000b52:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <fsm_traffic_light+0x248>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	601a      	str	r2, [r3, #0]

		//reset button flag
		resetButton();
 8000b58:	f7ff fba8 	bl	80002ac <resetButton>
	}
}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20000084 	.word	0x20000084
 8000b64:	2000004c 	.word	0x2000004c
 8000b68:	20000184 	.word	0x20000184
 8000b6c:	2000009c 	.word	0x2000009c
 8000b70:	200000a0 	.word	0x200000a0
 8000b74:	20000048 	.word	0x20000048
 8000b78:	2000017c 	.word	0x2000017c
 8000b7c:	20000044 	.word	0x20000044

08000b80 <updateLedBuffer>:
int timerRoad1=0;
int timerRoad2=0;

int toogleFlag=0;

void updateLedBuffer(){
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
	led_buffer[0] = timerRoad1 / 10;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <updateLedBuffer+0x70>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <updateLedBuffer+0x74>)
 8000b8a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b8e:	1092      	asrs	r2, r2, #2
 8000b90:	17db      	asrs	r3, r3, #31
 8000b92:	1ad3      	subs	r3, r2, r3
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <updateLedBuffer+0x78>)
 8000b96:	6013      	str	r3, [r2, #0]
	led_buffer[1] = timerRoad1 % 10;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <updateLedBuffer+0x70>)
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <updateLedBuffer+0x74>)
 8000b9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba2:	109a      	asrs	r2, r3, #2
 8000ba4:	17cb      	asrs	r3, r1, #31
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	1aca      	subs	r2, r1, r3
 8000bb2:	4b11      	ldr	r3, [pc, #68]	; (8000bf8 <updateLedBuffer+0x78>)
 8000bb4:	605a      	str	r2, [r3, #4]
	led_buffer[2] = timerRoad2 / 10;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <updateLedBuffer+0x7c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a0e      	ldr	r2, [pc, #56]	; (8000bf4 <updateLedBuffer+0x74>)
 8000bbc:	fb82 1203 	smull	r1, r2, r2, r3
 8000bc0:	1092      	asrs	r2, r2, #2
 8000bc2:	17db      	asrs	r3, r3, #31
 8000bc4:	1ad3      	subs	r3, r2, r3
 8000bc6:	4a0c      	ldr	r2, [pc, #48]	; (8000bf8 <updateLedBuffer+0x78>)
 8000bc8:	6093      	str	r3, [r2, #8]
	led_buffer[3] = timerRoad2 % 10;
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <updateLedBuffer+0x7c>)
 8000bcc:	6819      	ldr	r1, [r3, #0]
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <updateLedBuffer+0x74>)
 8000bd0:	fb83 2301 	smull	r2, r3, r3, r1
 8000bd4:	109a      	asrs	r2, r3, #2
 8000bd6:	17cb      	asrs	r3, r1, #31
 8000bd8:	1ad2      	subs	r2, r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	4413      	add	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	1aca      	subs	r2, r1, r3
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <updateLedBuffer+0x78>)
 8000be6:	60da      	str	r2, [r3, #12]
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr
 8000bf0:	2000009c 	.word	0x2000009c
 8000bf4:	66666667 	.word	0x66666667
 8000bf8:	20000088 	.word	0x20000088
 8000bfc:	200000a0 	.word	0x200000a0

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c04:	f000 fe98 	bl	8001938 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c08:	f000 f84e 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c0c:	f000 f8d4 	bl	8000db8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c10:	f000 f886 	bl	8000d20 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c14:	4819      	ldr	r0, [pc, #100]	; (8000c7c <main+0x7c>)
 8000c16:	f001 fdd5 	bl	80027c4 <HAL_TIM_Base_Start_IT>

  setTimer3(1);
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	f000 fd0a 	bl	8001634 <setTimer3>
  setTimer4(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f000 fd1b 	bl	800165c <setTimer4>
  timerRoad1 = r_val;
 8000c26:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <main+0x80>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <main+0x84>)
 8000c2c:	6013      	str	r3, [r2, #0]
  timerRoad2 = g_val;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <main+0x88>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a16      	ldr	r2, [pc, #88]	; (8000c8c <main+0x8c>)
 8000c34:	6013      	str	r3, [r2, #0]

  SCH_Init();
 8000c36:	f000 f9dd 	bl	8000ff4 <SCH_Init>
  SCH_Add_Task(timerRun, 0, 1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4814      	ldr	r0, [pc, #80]	; (8000c90 <main+0x90>)
 8000c40:	f000 fa46 	bl	80010d0 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 0, 1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	2100      	movs	r1, #0
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <main+0x94>)
 8000c4a:	f000 fa41 	bl	80010d0 <SCH_Add_Task>
  SCH_Add_Task(fsm_manual_run, 0, 1);
 8000c4e:	2201      	movs	r2, #1
 8000c50:	2100      	movs	r1, #0
 8000c52:	4811      	ldr	r0, [pc, #68]	; (8000c98 <main+0x98>)
 8000c54:	f000 fa3c 	bl	80010d0 <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic_light, 0, 1);
 8000c58:	2201      	movs	r2, #1
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	480f      	ldr	r0, [pc, #60]	; (8000c9c <main+0x9c>)
 8000c5e:	f000 fa37 	bl	80010d0 <SCH_Add_Task>
  SCH_Add_Task(updateLedBuffer,1,10);
 8000c62:	220a      	movs	r2, #10
 8000c64:	2101      	movs	r1, #1
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <main+0xa0>)
 8000c68:	f000 fa32 	bl	80010d0 <SCH_Add_Task>
  SCH_Add_Task(displaySignal, 1, 25);
 8000c6c:	2219      	movs	r2, #25
 8000c6e:	2101      	movs	r1, #1
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <main+0xa4>)
 8000c72:	f000 fa2d 	bl	80010d0 <SCH_Add_Task>
//	  if (timer4_flag == 1){
//		  setTimer4(25);
//		  displaySignal(index_led++);
//		  if (index_led >= 4) index_led=0;
//	  }
	  SCH_Dispatch_Tasks();
 8000c76:	f000 fc75 	bl	8001564 <SCH_Dispatch_Tasks>
 8000c7a:	e7fc      	b.n	8000c76 <main+0x76>
 8000c7c:	200001b0 	.word	0x200001b0
 8000c80:	20000044 	.word	0x20000044
 8000c84:	2000009c 	.word	0x2000009c
 8000c88:	2000004c 	.word	0x2000004c
 8000c8c:	200000a0 	.word	0x200000a0
 8000c90:	080016ad 	.word	0x080016ad
 8000c94:	080001a1 	.word	0x080001a1
 8000c98:	080006cd 	.word	0x080006cd
 8000c9c:	08000929 	.word	0x08000929
 8000ca0:	08000b81 	.word	0x08000b81
 8000ca4:	08000631 	.word	0x08000631

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f002 f940 	bl	8002f3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cca:	2302      	movs	r3, #2
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cd2:	2310      	movs	r3, #16
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f944 	bl	8001f6c <HAL_RCC_OscConfig>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000cea:	f000 f8d5 	bl	8000e98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cee:	230f      	movs	r3, #15
 8000cf0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 fbb0 	bl	800246c <HAL_RCC_ClockConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d12:	f000 f8c1 	bl	8000e98 <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3740      	adds	r7, #64	; 0x40
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d26:	f107 0308 	add.w	r3, r7, #8
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d34:	463b      	mov	r3, r7
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d3c:	4b1d      	ldr	r3, [pc, #116]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d46:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000d4a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d54:	2209      	movs	r2, #9
 8000d56:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d58:	4b16      	ldr	r3, [pc, #88]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d64:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d66:	f001 fcdd 	bl	8002724 <HAL_TIM_Base_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000d70:	f000 f892 	bl	8000e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d7a:	f107 0308 	add.w	r3, r7, #8
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d82:	f001 fe73 	bl	8002a6c <HAL_TIM_ConfigClockSource>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000d8c:	f000 f884 	bl	8000e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_TIM2_Init+0x94>)
 8000d9e:	f002 f83f 	bl	8002e20 <HAL_TIMEx_MasterConfigSynchronization>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000da8:	f000 f876 	bl	8000e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	200001b0 	.word	0x200001b0

08000db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbe:	f107 0308 	add.w	r3, r7, #8
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]
 8000dc6:	605a      	str	r2, [r3, #4]
 8000dc8:	609a      	str	r2, [r3, #8]
 8000dca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	4b2a      	ldr	r3, [pc, #168]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	4a29      	ldr	r2, [pc, #164]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dd2:	f043 0304 	orr.w	r3, r3, #4
 8000dd6:	6193      	str	r3, [r2, #24]
 8000dd8:	4b27      	ldr	r3, [pc, #156]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dda:	699b      	ldr	r3, [r3, #24]
 8000ddc:	f003 0304 	and.w	r3, r3, #4
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de4:	4b24      	ldr	r3, [pc, #144]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000dea:	f043 0308 	orr.w	r3, r3, #8
 8000dee:	6193      	str	r3, [r2, #24]
 8000df0:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_GPIO_Init+0xc0>)
 8000df2:	699b      	ldr	r3, [r3, #24]
 8000df4:	f003 0308 	and.w	r3, r3, #8
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|GREEN1_Pin|YELLOW1_Pin|GREEN2_Pin
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f640 71dc 	movw	r1, #4060	; 0xfdc
 8000e02:	481e      	ldr	r0, [pc, #120]	; (8000e7c <MX_GPIO_Init+0xc4>)
 8000e04:	f001 f899 	bl	8001f3a <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|EN0_Pin|EN1_Pin|EN2_Pin
                          |EN3_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2120      	movs	r1, #32
 8000e0c:	481b      	ldr	r0, [pc, #108]	; (8000e7c <MX_GPIO_Init+0xc4>)
 8000e0e:	f001 f894 	bl	8001f3a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000e12:	2200      	movs	r2, #0
 8000e14:	217f      	movs	r1, #127	; 0x7f
 8000e16:	481a      	ldr	r0, [pc, #104]	; (8000e80 <MX_GPIO_Init+0xc8>)
 8000e18:	f001 f88f 	bl	8001f3a <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin GREEN1_Pin YELLOW1_Pin RED2_Pin
                           GREEN2_Pin YELLOW2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|GREEN1_Pin|YELLOW1_Pin|RED2_Pin
 8000e1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8000e20:	60bb      	str	r3, [r7, #8]
                          |GREEN2_Pin|YELLOW2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e22:	2301      	movs	r3, #1
 8000e24:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0308 	add.w	r3, r7, #8
 8000e32:	4619      	mov	r1, r3
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_GPIO_Init+0xc4>)
 8000e36:	f000 feef 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000e3a:	237f      	movs	r3, #127	; 0x7f
 8000e3c:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2302      	movs	r3, #2
 8000e48:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	4619      	mov	r1, r3
 8000e50:	480b      	ldr	r0, [pc, #44]	; (8000e80 <MX_GPIO_Init+0xc8>)
 8000e52:	f000 fee1 	bl	8001c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SET_MODE_Pin INC_Pin SET_VAL_Pin */
  GPIO_InitStruct.Pin = SET_MODE_Pin|INC_Pin|SET_VAL_Pin;
 8000e56:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000e5a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0308 	add.w	r3, r7, #8
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_GPIO_Init+0xc8>)
 8000e6c:	f000 fed4 	bl	8001c18 <HAL_GPIO_Init>

}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	40010800 	.word	0x40010800
 8000e80:	40010c00 	.word	0x40010c00

08000e84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8000e8c:	f000 f8f8 	bl	8001080 <SCH_Update>
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e9c:	b672      	cpsid	i
}
 8000e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea0:	e7fe      	b.n	8000ea0 <Error_Handler+0x8>
	...

08000ea4 <onRED1>:
 *      Author: dinhq
 */

#include "physical.h"

void onRED1(){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2104      	movs	r1, #4
 8000eac:	4807      	ldr	r0, [pc, #28]	; (8000ecc <onRED1+0x28>)
 8000eae:	f001 f844 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2108      	movs	r1, #8
 8000eb6:	4805      	ldr	r0, [pc, #20]	; (8000ecc <onRED1+0x28>)
 8000eb8:	f001 f83f 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	2110      	movs	r1, #16
 8000ec0:	4802      	ldr	r0, [pc, #8]	; (8000ecc <onRED1+0x28>)
 8000ec2:	f001 f83a 	bl	8001f3a <HAL_GPIO_WritePin>
};
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40010800 	.word	0x40010800

08000ed0 <onYELLOW1>:
void onYELLOW1(){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	2104      	movs	r1, #4
 8000ed8:	4807      	ldr	r0, [pc, #28]	; (8000ef8 <onYELLOW1+0x28>)
 8000eda:	f001 f82e 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <onYELLOW1+0x28>)
 8000ee4:	f001 f829 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000ee8:	2200      	movs	r2, #0
 8000eea:	2110      	movs	r1, #16
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <onYELLOW1+0x28>)
 8000eee:	f001 f824 	bl	8001f3a <HAL_GPIO_WritePin>
};
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40010800 	.word	0x40010800

08000efc <onGREEN1>:
void onGREEN1(){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	2104      	movs	r1, #4
 8000f04:	4807      	ldr	r0, [pc, #28]	; (8000f24 <onGREEN1+0x28>)
 8000f06:	f001 f818 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <onGREEN1+0x28>)
 8000f10:	f001 f813 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2110      	movs	r1, #16
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <onGREEN1+0x28>)
 8000f1a:	f001 f80e 	bl	8001f3a <HAL_GPIO_WritePin>
};
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40010800 	.word	0x40010800

08000f28 <onRED2>:

void onRED2(){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2120      	movs	r1, #32
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <onRED2+0x28>)
 8000f32:	f001 f802 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000f36:	2201      	movs	r2, #1
 8000f38:	2140      	movs	r1, #64	; 0x40
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <onRED2+0x28>)
 8000f3c:	f000 fffd 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2180      	movs	r1, #128	; 0x80
 8000f44:	4802      	ldr	r0, [pc, #8]	; (8000f50 <onRED2+0x28>)
 8000f46:	f000 fff8 	bl	8001f3a <HAL_GPIO_WritePin>
};
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40010800 	.word	0x40010800

08000f54 <onYELLOW2>:
void onYELLOW2(){
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2120      	movs	r1, #32
 8000f5c:	4807      	ldr	r0, [pc, #28]	; (8000f7c <onYELLOW2+0x28>)
 8000f5e:	f000 ffec 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2140      	movs	r1, #64	; 0x40
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <onYELLOW2+0x28>)
 8000f68:	f000 ffe7 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <onYELLOW2+0x28>)
 8000f72:	f000 ffe2 	bl	8001f3a <HAL_GPIO_WritePin>
};
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40010800 	.word	0x40010800

08000f80 <onGREEN2>:
void onGREEN2(){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000f84:	2201      	movs	r2, #1
 8000f86:	2120      	movs	r1, #32
 8000f88:	4807      	ldr	r0, [pc, #28]	; (8000fa8 <onGREEN2+0x28>)
 8000f8a:	f000 ffd6 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4805      	ldr	r0, [pc, #20]	; (8000fa8 <onGREEN2+0x28>)
 8000f94:	f000 ffd1 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <onGREEN2+0x28>)
 8000f9e:	f000 ffcc 	bl	8001f3a <HAL_GPIO_WritePin>
};
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40010800 	.word	0x40010800

08000fac <offALL>:

void offALL(){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2104      	movs	r1, #4
 8000fb4:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <offALL+0x44>)
 8000fb6:	f000 ffc0 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	480c      	ldr	r0, [pc, #48]	; (8000ff0 <offALL+0x44>)
 8000fc0:	f000 ffbb 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	2110      	movs	r1, #16
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <offALL+0x44>)
 8000fca:	f000 ffb6 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2120      	movs	r1, #32
 8000fd2:	4807      	ldr	r0, [pc, #28]	; (8000ff0 <offALL+0x44>)
 8000fd4:	f000 ffb1 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2140      	movs	r1, #64	; 0x40
 8000fdc:	4804      	ldr	r0, [pc, #16]	; (8000ff0 <offALL+0x44>)
 8000fde:	f000 ffac 	bl	8001f3a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2180      	movs	r1, #128	; 0x80
 8000fe6:	4802      	ldr	r0, [pc, #8]	; (8000ff0 <offALL+0x44>)
 8000fe8:	f000 ffa7 	bl	8001f3a <HAL_GPIO_WritePin>
};
 8000fec:	bf00      	nop
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010800 	.word	0x40010800

08000ff4 <SCH_Init>:

static uint32_t Get_New_Task_ID(void);
//static void TIMER_Init();


void SCH_Init(void){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	e034      	b.n	800106a <SCH_Init+0x76>
        SCH_tasks_G[i].pTask = 0;
 8001000:	491e      	ldr	r1, [pc, #120]	; (800107c <SCH_Init+0x88>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4613      	mov	r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	440b      	add	r3, r1
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Delay = 0;
 8001012:	491a      	ldr	r1, [pc, #104]	; (800107c <SCH_Init+0x88>)
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	440b      	add	r3, r1
 8001020:	3304      	adds	r3, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].Period = 0;
 8001026:	4915      	ldr	r1, [pc, #84]	; (800107c <SCH_Init+0x88>)
 8001028:	687a      	ldr	r2, [r7, #4]
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	440b      	add	r3, r1
 8001034:	3308      	adds	r3, #8
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
        SCH_tasks_G[i].RunMe = 0;
 800103a:	4910      	ldr	r1, [pc, #64]	; (800107c <SCH_Init+0x88>)
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	4413      	add	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	330c      	adds	r3, #12
 800104a:	2200      	movs	r2, #0
 800104c:	701a      	strb	r2, [r3, #0]

        SCH_tasks_G[i].TaskID = -1;
 800104e:	490b      	ldr	r1, [pc, #44]	; (800107c <SCH_Init+0x88>)
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	4413      	add	r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	440b      	add	r3, r1
 800105c:	3310      	adds	r3, #16
 800105e:	f04f 32ff 	mov.w	r2, #4294967295
 8001062:	601a      	str	r2, [r3, #0]
    for (int i=0; i<SCH_MAX_TASKS; i++){
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3301      	adds	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b09      	cmp	r3, #9
 800106e:	ddc7      	ble.n	8001000 <SCH_Init+0xc>
    }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	200000a8 	.word	0x200000a8

08001080 <SCH_Update>:

void SCH_Update(void){
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
	// Check if there is a task at this location
	count_SCH_Update ++;
 8001084:	4b10      	ldr	r3, [pc, #64]	; (80010c8 <SCH_Update+0x48>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <SCH_Update+0x48>)
 800108c:	6013      	str	r3, [r2, #0]
	if (SCH_tasks_G[0].pTask && SCH_tasks_G[0].RunMe == 0) {
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <SCH_Update+0x4c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d013      	beq.n	80010be <SCH_Update+0x3e>
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <SCH_Update+0x4c>)
 8001098:	7b1b      	ldrb	r3, [r3, #12]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d10f      	bne.n	80010be <SCH_Update+0x3e>
		if(SCH_tasks_G[0].Delay > 0){
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <SCH_Update+0x4c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d004      	beq.n	80010b0 <SCH_Update+0x30>
			SCH_tasks_G[0].Delay = SCH_tasks_G[0].Delay - 1;
 80010a6:	4b09      	ldr	r3, [pc, #36]	; (80010cc <SCH_Update+0x4c>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	4a07      	ldr	r2, [pc, #28]	; (80010cc <SCH_Update+0x4c>)
 80010ae:	6053      	str	r3, [r2, #4]
		}
		if (SCH_tasks_G[0].Delay == 0) {
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <SCH_Update+0x4c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d102      	bne.n	80010be <SCH_Update+0x3e>
			SCH_tasks_G[0].RunMe = 1;
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <SCH_Update+0x4c>)
 80010ba:	2201      	movs	r2, #1
 80010bc:	731a      	strb	r2, [r3, #12]
		}
	}
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000174 	.word	0x20000174
 80010cc:	200000a8 	.word	0x200000a8

080010d0 <SCH_Add_Task>:
uint32_t SCH_Add_Task(void (* pFunction)(), uint32_t DELAY, uint32_t PERIOD){
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b089      	sub	sp, #36	; 0x24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	uint8_t newTaskIndex = 0;
 80010dc:	2300      	movs	r3, #0
 80010de:	77fb      	strb	r3, [r7, #31]
	uint32_t sumDelay = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
	uint32_t newDelay = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	613b      	str	r3, [r7, #16]

	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 80010e8:	2300      	movs	r3, #0
 80010ea:	77fb      	strb	r3, [r7, #31]
 80010ec:	e133      	b.n	8001356 <SCH_Add_Task+0x286>
		sumDelay = sumDelay + SCH_tasks_G[newTaskIndex].Delay;
 80010ee:	7ffa      	ldrb	r2, [r7, #31]
 80010f0:	49a1      	ldr	r1, [pc, #644]	; (8001378 <SCH_Add_Task+0x2a8>)
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	3304      	adds	r3, #4
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4413      	add	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
		if(sumDelay > DELAY){
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	429a      	cmp	r2, r3
 800110c:	f240 80c1 	bls.w	8001292 <SCH_Add_Task+0x1c2>
			newDelay = DELAY - (sumDelay - SCH_tasks_G[newTaskIndex].Delay);
 8001110:	7ffa      	ldrb	r2, [r7, #31]
 8001112:	4999      	ldr	r1, [pc, #612]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001114:	4613      	mov	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	3304      	adds	r3, #4
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4413      	add	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
			SCH_tasks_G[newTaskIndex].Delay = sumDelay - DELAY;
 800112c:	7ffa      	ldrb	r2, [r7, #31]
 800112e:	69b9      	ldr	r1, [r7, #24]
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	1ac9      	subs	r1, r1, r3
 8001134:	4890      	ldr	r0, [pc, #576]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001136:	4613      	mov	r3, r2
 8001138:	009b      	lsls	r3, r3, #2
 800113a:	4413      	add	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4403      	add	r3, r0
 8001140:	3304      	adds	r3, #4
 8001142:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 8001144:	2309      	movs	r3, #9
 8001146:	75fb      	strb	r3, [r7, #23]
 8001148:	e04c      	b.n	80011e4 <SCH_Add_Task+0x114>
//				if(SCH_tasks_G[i - 1].pTask != 0)
				{
					SCH_tasks_G[i].pTask = SCH_tasks_G[i - 1].pTask;
 800114a:	7dfb      	ldrb	r3, [r7, #23]
 800114c:	1e59      	subs	r1, r3, #1
 800114e:	7dfa      	ldrb	r2, [r7, #23]
 8001150:	4889      	ldr	r0, [pc, #548]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001152:	460b      	mov	r3, r1
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4403      	add	r3, r0
 800115c:	6819      	ldr	r1, [r3, #0]
 800115e:	4886      	ldr	r0, [pc, #536]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001160:	4613      	mov	r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	4403      	add	r3, r0
 800116a:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Period = SCH_tasks_G[i - 1].Period;
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	1e59      	subs	r1, r3, #1
 8001170:	7dfa      	ldrb	r2, [r7, #23]
 8001172:	4881      	ldr	r0, [pc, #516]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001174:	460b      	mov	r3, r1
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4403      	add	r3, r0
 800117e:	3308      	adds	r3, #8
 8001180:	6819      	ldr	r1, [r3, #0]
 8001182:	487d      	ldr	r0, [pc, #500]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001184:	4613      	mov	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4403      	add	r3, r0
 800118e:	3308      	adds	r3, #8
 8001190:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[i].Delay = SCH_tasks_G[i - 1].Delay;
 8001192:	7dfb      	ldrb	r3, [r7, #23]
 8001194:	1e59      	subs	r1, r3, #1
 8001196:	7dfa      	ldrb	r2, [r7, #23]
 8001198:	4877      	ldr	r0, [pc, #476]	; (8001378 <SCH_Add_Task+0x2a8>)
 800119a:	460b      	mov	r3, r1
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	440b      	add	r3, r1
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4403      	add	r3, r0
 80011a4:	3304      	adds	r3, #4
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4873      	ldr	r0, [pc, #460]	; (8001378 <SCH_Add_Task+0x2a8>)
 80011aa:	4613      	mov	r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	4403      	add	r3, r0
 80011b4:	3304      	adds	r3, #4
 80011b6:	6019      	str	r1, [r3, #0]
//					SCH_tasks_G[i].RunMe = SCH_tasks_G[i - 1].RunMe;
					SCH_tasks_G[i].TaskID = SCH_tasks_G[i - 1].TaskID;
 80011b8:	7dfb      	ldrb	r3, [r7, #23]
 80011ba:	1e59      	subs	r1, r3, #1
 80011bc:	7dfa      	ldrb	r2, [r7, #23]
 80011be:	486e      	ldr	r0, [pc, #440]	; (8001378 <SCH_Add_Task+0x2a8>)
 80011c0:	460b      	mov	r3, r1
 80011c2:	009b      	lsls	r3, r3, #2
 80011c4:	440b      	add	r3, r1
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	4403      	add	r3, r0
 80011ca:	3310      	adds	r3, #16
 80011cc:	6819      	ldr	r1, [r3, #0]
 80011ce:	486a      	ldr	r0, [pc, #424]	; (8001378 <SCH_Add_Task+0x2a8>)
 80011d0:	4613      	mov	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4413      	add	r3, r2
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4403      	add	r3, r0
 80011da:	3310      	adds	r3, #16
 80011dc:	6019      	str	r1, [r3, #0]
			for(uint8_t i = SCH_MAX_TASKS - 1; i > newTaskIndex; i --){
 80011de:	7dfb      	ldrb	r3, [r7, #23]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	75fb      	strb	r3, [r7, #23]
 80011e4:	7dfa      	ldrb	r2, [r7, #23]
 80011e6:	7ffb      	ldrb	r3, [r7, #31]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d8ae      	bhi.n	800114a <SCH_Add_Task+0x7a>
				}
			}
			SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80011ec:	7ffa      	ldrb	r2, [r7, #31]
 80011ee:	4962      	ldr	r1, [pc, #392]	; (8001378 <SCH_Add_Task+0x2a8>)
 80011f0:	4613      	mov	r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Delay = newDelay;
 80011fe:	7ffa      	ldrb	r2, [r7, #31]
 8001200:	495d      	ldr	r1, [pc, #372]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	3304      	adds	r3, #4
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	601a      	str	r2, [r3, #0]
			SCH_tasks_G[newTaskIndex].Period = PERIOD;
 8001212:	7ffa      	ldrb	r2, [r7, #31]
 8001214:	4958      	ldr	r1, [pc, #352]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	3308      	adds	r3, #8
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	601a      	str	r2, [r3, #0]
			if(SCH_tasks_G[newTaskIndex].Delay == 0){
 8001226:	7ffa      	ldrb	r2, [r7, #31]
 8001228:	4953      	ldr	r1, [pc, #332]	; (8001378 <SCH_Add_Task+0x2a8>)
 800122a:	4613      	mov	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	440b      	add	r3, r1
 8001234:	3304      	adds	r3, #4
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d10a      	bne.n	8001252 <SCH_Add_Task+0x182>
				SCH_tasks_G[newTaskIndex].RunMe = 1;
 800123c:	7ffa      	ldrb	r2, [r7, #31]
 800123e:	494e      	ldr	r1, [pc, #312]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	330c      	adds	r3, #12
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e009      	b.n	8001266 <SCH_Add_Task+0x196>
			} else {
				SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001252:	7ffa      	ldrb	r2, [r7, #31]
 8001254:	4948      	ldr	r1, [pc, #288]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	330c      	adds	r3, #12
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
			}
			SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001266:	7ffc      	ldrb	r4, [r7, #31]
 8001268:	f000 f9a4 	bl	80015b4 <Get_New_Task_ID>
 800126c:	4602      	mov	r2, r0
 800126e:	4942      	ldr	r1, [pc, #264]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001270:	4623      	mov	r3, r4
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	4423      	add	r3, r4
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	440b      	add	r3, r1
 800127a:	3310      	adds	r3, #16
 800127c:	601a      	str	r2, [r3, #0]
			return SCH_tasks_G[newTaskIndex].TaskID;
 800127e:	7ffa      	ldrb	r2, [r7, #31]
 8001280:	493d      	ldr	r1, [pc, #244]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	440b      	add	r3, r1
 800128c:	3310      	adds	r3, #16
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	e06e      	b.n	8001370 <SCH_Add_Task+0x2a0>
		} else {
			if(SCH_tasks_G[newTaskIndex].pTask == 0x0000){
 8001292:	7ffa      	ldrb	r2, [r7, #31]
 8001294:	4938      	ldr	r1, [pc, #224]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001296:	4613      	mov	r3, r2
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	4413      	add	r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	440b      	add	r3, r1
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d154      	bne.n	8001350 <SCH_Add_Task+0x280>
				SCH_tasks_G[newTaskIndex].pTask = pFunction;
 80012a6:	7ffa      	ldrb	r2, [r7, #31]
 80012a8:	4933      	ldr	r1, [pc, #204]	; (8001378 <SCH_Add_Task+0x2a8>)
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[newTaskIndex].Delay = DELAY - sumDelay;
 80012b8:	7ffa      	ldrb	r2, [r7, #31]
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	1ac9      	subs	r1, r1, r3
 80012c0:	482d      	ldr	r0, [pc, #180]	; (8001378 <SCH_Add_Task+0x2a8>)
 80012c2:	4613      	mov	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	4413      	add	r3, r2
 80012c8:	009b      	lsls	r3, r3, #2
 80012ca:	4403      	add	r3, r0
 80012cc:	3304      	adds	r3, #4
 80012ce:	6019      	str	r1, [r3, #0]
				SCH_tasks_G[newTaskIndex].Period = PERIOD;
 80012d0:	7ffa      	ldrb	r2, [r7, #31]
 80012d2:	4929      	ldr	r1, [pc, #164]	; (8001378 <SCH_Add_Task+0x2a8>)
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	440b      	add	r3, r1
 80012de:	3308      	adds	r3, #8
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
				if(SCH_tasks_G[newTaskIndex].Delay == 0){
 80012e4:	7ffa      	ldrb	r2, [r7, #31]
 80012e6:	4924      	ldr	r1, [pc, #144]	; (8001378 <SCH_Add_Task+0x2a8>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	3304      	adds	r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10a      	bne.n	8001310 <SCH_Add_Task+0x240>
					SCH_tasks_G[newTaskIndex].RunMe = 1;
 80012fa:	7ffa      	ldrb	r2, [r7, #31]
 80012fc:	491e      	ldr	r1, [pc, #120]	; (8001378 <SCH_Add_Task+0x2a8>)
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	330c      	adds	r3, #12
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
 800130e:	e009      	b.n	8001324 <SCH_Add_Task+0x254>
				} else {
					SCH_tasks_G[newTaskIndex].RunMe = 0;
 8001310:	7ffa      	ldrb	r2, [r7, #31]
 8001312:	4919      	ldr	r1, [pc, #100]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001314:	4613      	mov	r3, r2
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	4413      	add	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	440b      	add	r3, r1
 800131e:	330c      	adds	r3, #12
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
				}
				SCH_tasks_G[newTaskIndex].TaskID = Get_New_Task_ID();
 8001324:	7ffc      	ldrb	r4, [r7, #31]
 8001326:	f000 f945 	bl	80015b4 <Get_New_Task_ID>
 800132a:	4602      	mov	r2, r0
 800132c:	4912      	ldr	r1, [pc, #72]	; (8001378 <SCH_Add_Task+0x2a8>)
 800132e:	4623      	mov	r3, r4
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4423      	add	r3, r4
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	3310      	adds	r3, #16
 800133a:	601a      	str	r2, [r3, #0]
				return SCH_tasks_G[newTaskIndex].TaskID;
 800133c:	7ffa      	ldrb	r2, [r7, #31]
 800133e:	490e      	ldr	r1, [pc, #56]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001340:	4613      	mov	r3, r2
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	4413      	add	r3, r2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	440b      	add	r3, r1
 800134a:	3310      	adds	r3, #16
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	e00f      	b.n	8001370 <SCH_Add_Task+0x2a0>
	for(newTaskIndex = 0; newTaskIndex < SCH_MAX_TASKS; newTaskIndex ++){
 8001350:	7ffb      	ldrb	r3, [r7, #31]
 8001352:	3301      	adds	r3, #1
 8001354:	77fb      	strb	r3, [r7, #31]
 8001356:	7ffb      	ldrb	r3, [r7, #31]
 8001358:	2b09      	cmp	r3, #9
 800135a:	f67f aec8 	bls.w	80010ee <SCH_Add_Task+0x1e>
			}
		}
	}
	return SCH_tasks_G[newTaskIndex].TaskID;
 800135e:	7ffa      	ldrb	r2, [r7, #31]
 8001360:	4905      	ldr	r1, [pc, #20]	; (8001378 <SCH_Add_Task+0x2a8>)
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	3310      	adds	r3, #16
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3724      	adds	r7, #36	; 0x24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	200000a8 	.word	0x200000a8

0800137c <SCH_Delete_Task>:


uint8_t SCH_Delete_Task(uint32_t taskID){
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	uint8_t Return_code  = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	737b      	strb	r3, [r7, #13]
	uint8_t taskIndex;
	uint8_t j;
	if(taskID != NO_TASK_ID){
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 80e2 	beq.w	8001554 <SCH_Delete_Task+0x1d8>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e0da      	b.n	800154c <SCH_Delete_Task+0x1d0>
			if(SCH_tasks_G[taskIndex].TaskID == taskID){
 8001396:	7bfa      	ldrb	r2, [r7, #15]
 8001398:	4971      	ldr	r1, [pc, #452]	; (8001560 <SCH_Delete_Task+0x1e4>)
 800139a:	4613      	mov	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	4413      	add	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	3310      	adds	r3, #16
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	f040 80cb 	bne.w	8001546 <SCH_Delete_Task+0x1ca>
				Return_code = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	737b      	strb	r3, [r7, #13]
				if(taskIndex != 0 && taskIndex < SCH_MAX_TASKS - 1){
 80013b4:	7bfb      	ldrb	r3, [r7, #15]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d02b      	beq.n	8001412 <SCH_Delete_Task+0x96>
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
 80013bc:	2b08      	cmp	r3, #8
 80013be:	d828      	bhi.n	8001412 <SCH_Delete_Task+0x96>
					if(SCH_tasks_G[taskIndex+1].pTask != 0x0000){
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	4966      	ldr	r1, [pc, #408]	; (8001560 <SCH_Delete_Task+0x1e4>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d01d      	beq.n	8001412 <SCH_Delete_Task+0x96>
						SCH_tasks_G[taskIndex+1].Delay += SCH_tasks_G[taskIndex].Delay;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	1c5a      	adds	r2, r3, #1
 80013da:	4961      	ldr	r1, [pc, #388]	; (8001560 <SCH_Delete_Task+0x1e4>)
 80013dc:	4613      	mov	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3304      	adds	r3, #4
 80013e8:	6819      	ldr	r1, [r3, #0]
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	485c      	ldr	r0, [pc, #368]	; (8001560 <SCH_Delete_Task+0x1e4>)
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	4403      	add	r3, r0
 80013f8:	3304      	adds	r3, #4
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	3201      	adds	r2, #1
 8001400:	4419      	add	r1, r3
 8001402:	4857      	ldr	r0, [pc, #348]	; (8001560 <SCH_Delete_Task+0x1e4>)
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4403      	add	r3, r0
 800140e:	3304      	adds	r3, #4
 8001410:	6019      	str	r1, [r3, #0]
					}
				}

				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	73bb      	strb	r3, [r7, #14]
 8001416:	e060      	b.n	80014da <SCH_Delete_Task+0x15e>
					SCH_tasks_G[j].pTask = SCH_tasks_G[j+1].pTask;
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	1c59      	adds	r1, r3, #1
 800141c:	7bba      	ldrb	r2, [r7, #14]
 800141e:	4850      	ldr	r0, [pc, #320]	; (8001560 <SCH_Delete_Task+0x1e4>)
 8001420:	460b      	mov	r3, r1
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	4403      	add	r3, r0
 800142a:	6819      	ldr	r1, [r3, #0]
 800142c:	484c      	ldr	r0, [pc, #304]	; (8001560 <SCH_Delete_Task+0x1e4>)
 800142e:	4613      	mov	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4403      	add	r3, r0
 8001438:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Period = SCH_tasks_G[j+1].Period;
 800143a:	7bbb      	ldrb	r3, [r7, #14]
 800143c:	1c59      	adds	r1, r3, #1
 800143e:	7bba      	ldrb	r2, [r7, #14]
 8001440:	4847      	ldr	r0, [pc, #284]	; (8001560 <SCH_Delete_Task+0x1e4>)
 8001442:	460b      	mov	r3, r1
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4403      	add	r3, r0
 800144c:	3308      	adds	r3, #8
 800144e:	6819      	ldr	r1, [r3, #0]
 8001450:	4843      	ldr	r0, [pc, #268]	; (8001560 <SCH_Delete_Task+0x1e4>)
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	4403      	add	r3, r0
 800145c:	3308      	adds	r3, #8
 800145e:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].Delay = SCH_tasks_G[j+1].Delay;
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	1c59      	adds	r1, r3, #1
 8001464:	7bba      	ldrb	r2, [r7, #14]
 8001466:	483e      	ldr	r0, [pc, #248]	; (8001560 <SCH_Delete_Task+0x1e4>)
 8001468:	460b      	mov	r3, r1
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4403      	add	r3, r0
 8001472:	3304      	adds	r3, #4
 8001474:	6819      	ldr	r1, [r3, #0]
 8001476:	483a      	ldr	r0, [pc, #232]	; (8001560 <SCH_Delete_Task+0x1e4>)
 8001478:	4613      	mov	r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	4403      	add	r3, r0
 8001482:	3304      	adds	r3, #4
 8001484:	6019      	str	r1, [r3, #0]
					SCH_tasks_G[j].RunMe = SCH_tasks_G[j+1].RunMe;
 8001486:	7bbb      	ldrb	r3, [r7, #14]
 8001488:	1c59      	adds	r1, r3, #1
 800148a:	7bba      	ldrb	r2, [r7, #14]
 800148c:	4834      	ldr	r0, [pc, #208]	; (8001560 <SCH_Delete_Task+0x1e4>)
 800148e:	460b      	mov	r3, r1
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	440b      	add	r3, r1
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4403      	add	r3, r0
 8001498:	330c      	adds	r3, #12
 800149a:	7818      	ldrb	r0, [r3, #0]
 800149c:	4930      	ldr	r1, [pc, #192]	; (8001560 <SCH_Delete_Task+0x1e4>)
 800149e:	4613      	mov	r3, r2
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	440b      	add	r3, r1
 80014a8:	330c      	adds	r3, #12
 80014aa:	4602      	mov	r2, r0
 80014ac:	701a      	strb	r2, [r3, #0]
					SCH_tasks_G[j].TaskID = SCH_tasks_G[j+1].TaskID;
 80014ae:	7bbb      	ldrb	r3, [r7, #14]
 80014b0:	1c59      	adds	r1, r3, #1
 80014b2:	7bba      	ldrb	r2, [r7, #14]
 80014b4:	482a      	ldr	r0, [pc, #168]	; (8001560 <SCH_Delete_Task+0x1e4>)
 80014b6:	460b      	mov	r3, r1
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	440b      	add	r3, r1
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4403      	add	r3, r0
 80014c0:	3310      	adds	r3, #16
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	4826      	ldr	r0, [pc, #152]	; (8001560 <SCH_Delete_Task+0x1e4>)
 80014c6:	4613      	mov	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4403      	add	r3, r0
 80014d0:	3310      	adds	r3, #16
 80014d2:	6019      	str	r1, [r3, #0]
				for( j = taskIndex; j < SCH_MAX_TASKS - 1; j ++){
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	3301      	adds	r3, #1
 80014d8:	73bb      	strb	r3, [r7, #14]
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	2b08      	cmp	r3, #8
 80014de:	d99b      	bls.n	8001418 <SCH_Delete_Task+0x9c>
				}
				SCH_tasks_G[j].pTask = 0;
 80014e0:	7bba      	ldrb	r2, [r7, #14]
 80014e2:	491f      	ldr	r1, [pc, #124]	; (8001560 <SCH_Delete_Task+0x1e4>)
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Period = 0;
 80014f2:	7bba      	ldrb	r2, [r7, #14]
 80014f4:	491a      	ldr	r1, [pc, #104]	; (8001560 <SCH_Delete_Task+0x1e4>)
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3308      	adds	r3, #8
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].Delay = 0;
 8001506:	7bba      	ldrb	r2, [r7, #14]
 8001508:	4915      	ldr	r1, [pc, #84]	; (8001560 <SCH_Delete_Task+0x1e4>)
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	440b      	add	r3, r1
 8001514:	3304      	adds	r3, #4
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
				SCH_tasks_G[j].RunMe = 0;
 800151a:	7bba      	ldrb	r2, [r7, #14]
 800151c:	4910      	ldr	r1, [pc, #64]	; (8001560 <SCH_Delete_Task+0x1e4>)
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	440b      	add	r3, r1
 8001528:	330c      	adds	r3, #12
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
				SCH_tasks_G[j].TaskID = 0;
 800152e:	7bba      	ldrb	r2, [r7, #14]
 8001530:	490b      	ldr	r1, [pc, #44]	; (8001560 <SCH_Delete_Task+0x1e4>)
 8001532:	4613      	mov	r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	4413      	add	r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	3310      	adds	r3, #16
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]
				return Return_code;
 8001542:	7b7b      	ldrb	r3, [r7, #13]
 8001544:	e007      	b.n	8001556 <SCH_Delete_Task+0x1da>
		for(taskIndex = 0; taskIndex < SCH_MAX_TASKS; taskIndex ++){
 8001546:	7bfb      	ldrb	r3, [r7, #15]
 8001548:	3301      	adds	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b09      	cmp	r3, #9
 8001550:	f67f af21 	bls.w	8001396 <SCH_Delete_Task+0x1a>
			}
		}
	}
	return Return_code; // return status
 8001554:	7b7b      	ldrb	r3, [r7, #13]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	200000a8 	.word	0x200000a8

08001564 <SCH_Dispatch_Tasks>:

void SCH_Dispatch_Tasks(void){
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
	if(SCH_tasks_G[0].RunMe > 0) {
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <SCH_Dispatch_Tasks+0x4c>)
 800156c:	7b1b      	ldrb	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d019      	beq.n	80015a6 <SCH_Dispatch_Tasks+0x42>
		(*SCH_tasks_G[0].pTask)(); // Run the task
 8001572:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <SCH_Dispatch_Tasks+0x4c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4798      	blx	r3
		SCH_tasks_G[0].RunMe = 0; // Reset / reduce RunMe flag
 8001578:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <SCH_Dispatch_Tasks+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	731a      	strb	r2, [r3, #12]
		sTask temtask = SCH_tasks_G[0];
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <SCH_Dispatch_Tasks+0x4c>)
 8001580:	1d3c      	adds	r4, r7, #4
 8001582:	461d      	mov	r5, r3
 8001584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	6023      	str	r3, [r4, #0]
		SCH_Delete_Task(temtask.TaskID);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4618      	mov	r0, r3
 8001590:	f7ff fef4 	bl	800137c <SCH_Delete_Task>
		if (temtask.Period != 0) {
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <SCH_Dispatch_Tasks+0x42>
			SCH_Add_Task(temtask.pTask, temtask.Period, temtask.Period);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68f9      	ldr	r1, [r7, #12]
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff fd95 	bl	80010d0 <SCH_Add_Task>
		}
	}
}
 80015a6:	bf00      	nop
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bdb0      	pop	{r4, r5, r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200000a8 	.word	0x200000a8

080015b4 <Get_New_Task_ID>:
//{
//    TCNT1 = COUNTER_START;
//	SCH_Update();
//}

static uint32_t Get_New_Task_ID(void){
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
	newTaskID++;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <Get_New_Task_ID+0x2c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3301      	adds	r3, #1
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <Get_New_Task_ID+0x2c>)
 80015c0:	6013      	str	r3, [r2, #0]
	if(newTaskID == NO_TASK_ID){
 80015c2:	4b07      	ldr	r3, [pc, #28]	; (80015e0 <Get_New_Task_ID+0x2c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d104      	bne.n	80015d4 <Get_New_Task_ID+0x20>
		newTaskID++;
 80015ca:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <Get_New_Task_ID+0x2c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	3301      	adds	r3, #1
 80015d0:	4a03      	ldr	r2, [pc, #12]	; (80015e0 <Get_New_Task_ID+0x2c>)
 80015d2:	6013      	str	r3, [r2, #0]
	}
	return newTaskID;
 80015d4:	4b02      	ldr	r3, [pc, #8]	; (80015e0 <Get_New_Task_ID+0x2c>)
 80015d6:	681b      	ldr	r3, [r3, #0]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	20000170 	.word	0x20000170

080015e4 <setTimer1>:

//timer7
int timer7_counter=0;
int timer7_flag=0;

void setTimer1(int duration){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <setTimer1+0x20>)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <setTimer1+0x24>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bc80      	pop	{r7}
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000178 	.word	0x20000178
 8001608:	2000017c 	.word	0x2000017c

0800160c <setTimer2>:

void setTimer2(int duration){
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001614:	4a05      	ldr	r2, [pc, #20]	; (800162c <setTimer2+0x20>)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 800161a:	4b05      	ldr	r3, [pc, #20]	; (8001630 <setTimer2+0x24>)
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000180 	.word	0x20000180
 8001630:	20000184 	.word	0x20000184

08001634 <setTimer3>:

void setTimer3(int duration){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 800163c:	4a05      	ldr	r2, [pc, #20]	; (8001654 <setTimer3+0x20>)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 8001642:	4b05      	ldr	r3, [pc, #20]	; (8001658 <setTimer3+0x24>)
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	bc80      	pop	{r7}
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000188 	.word	0x20000188
 8001658:	2000018c 	.word	0x2000018c

0800165c <setTimer4>:

void setTimer4(int duration){
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	timer4_counter=duration;
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <setTimer4+0x20>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6013      	str	r3, [r2, #0]
	timer4_flag=0;
 800166a:	4b05      	ldr	r3, [pc, #20]	; (8001680 <setTimer4+0x24>)
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000190 	.word	0x20000190
 8001680:	20000194 	.word	0x20000194

08001684 <setTimer5>:

void setTimer5(int duration){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	timer5_counter=duration;
 800168c:	4a05      	ldr	r2, [pc, #20]	; (80016a4 <setTimer5+0x20>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
	timer5_flag=0;
 8001692:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <setTimer5+0x24>)
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
}
 8001698:	bf00      	nop
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	20000198 	.word	0x20000198
 80016a8:	2000019c 	.word	0x2000019c

080016ac <timerRun>:
void setTimer7(int duration){
	timer7_counter=duration;
	timer7_flag=0;
}

void timerRun(){
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
	if (timer1_counter > 0){
 80016b0:	4b39      	ldr	r3, [pc, #228]	; (8001798 <timerRun+0xec>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	dd0b      	ble.n	80016d0 <timerRun+0x24>
		timer1_counter--;
 80016b8:	4b37      	ldr	r3, [pc, #220]	; (8001798 <timerRun+0xec>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3b01      	subs	r3, #1
 80016be:	4a36      	ldr	r2, [pc, #216]	; (8001798 <timerRun+0xec>)
 80016c0:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0){
 80016c2:	4b35      	ldr	r3, [pc, #212]	; (8001798 <timerRun+0xec>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	dc02      	bgt.n	80016d0 <timerRun+0x24>
			timer1_flag=1;
 80016ca:	4b34      	ldr	r3, [pc, #208]	; (800179c <timerRun+0xf0>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0){
 80016d0:	4b33      	ldr	r3, [pc, #204]	; (80017a0 <timerRun+0xf4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	dd0b      	ble.n	80016f0 <timerRun+0x44>
		timer2_counter--;
 80016d8:	4b31      	ldr	r3, [pc, #196]	; (80017a0 <timerRun+0xf4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3b01      	subs	r3, #1
 80016de:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <timerRun+0xf4>)
 80016e0:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0){
 80016e2:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <timerRun+0xf4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	dc02      	bgt.n	80016f0 <timerRun+0x44>
			timer2_flag=1;
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <timerRun+0xf8>)
 80016ec:	2201      	movs	r2, #1
 80016ee:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0){
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <timerRun+0xfc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	dd0b      	ble.n	8001710 <timerRun+0x64>
		timer3_counter--;
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <timerRun+0xfc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	4a2a      	ldr	r2, [pc, #168]	; (80017a8 <timerRun+0xfc>)
 8001700:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0){
 8001702:	4b29      	ldr	r3, [pc, #164]	; (80017a8 <timerRun+0xfc>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	dc02      	bgt.n	8001710 <timerRun+0x64>
			timer3_flag=1;
 800170a:	4b28      	ldr	r3, [pc, #160]	; (80017ac <timerRun+0x100>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0){
 8001710:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <timerRun+0x104>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	dd0b      	ble.n	8001730 <timerRun+0x84>
		timer4_counter--;
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <timerRun+0x104>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	3b01      	subs	r3, #1
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <timerRun+0x104>)
 8001720:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0){
 8001722:	4b23      	ldr	r3, [pc, #140]	; (80017b0 <timerRun+0x104>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	dc02      	bgt.n	8001730 <timerRun+0x84>
			timer4_flag=1;
 800172a:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <timerRun+0x108>)
 800172c:	2201      	movs	r2, #1
 800172e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer5_counter > 0){
 8001730:	4b21      	ldr	r3, [pc, #132]	; (80017b8 <timerRun+0x10c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dd0b      	ble.n	8001750 <timerRun+0xa4>
		timer5_counter--;
 8001738:	4b1f      	ldr	r3, [pc, #124]	; (80017b8 <timerRun+0x10c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	4a1e      	ldr	r2, [pc, #120]	; (80017b8 <timerRun+0x10c>)
 8001740:	6013      	str	r3, [r2, #0]
		if (timer5_counter <= 0){
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <timerRun+0x10c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	dc02      	bgt.n	8001750 <timerRun+0xa4>
			timer5_flag=1;
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <timerRun+0x110>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer6_counter > 0){
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <timerRun+0x114>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	dd0b      	ble.n	8001770 <timerRun+0xc4>
		timer6_counter--;
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <timerRun+0x114>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	3b01      	subs	r3, #1
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <timerRun+0x114>)
 8001760:	6013      	str	r3, [r2, #0]
		if (timer6_counter <= 0){
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <timerRun+0x114>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	dc02      	bgt.n	8001770 <timerRun+0xc4>
			timer6_flag=1;
 800176a:	4b16      	ldr	r3, [pc, #88]	; (80017c4 <timerRun+0x118>)
 800176c:	2201      	movs	r2, #1
 800176e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer7_counter > 0){
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <timerRun+0x11c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	dd0b      	ble.n	8001790 <timerRun+0xe4>
		timer7_counter--;
 8001778:	4b13      	ldr	r3, [pc, #76]	; (80017c8 <timerRun+0x11c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <timerRun+0x11c>)
 8001780:	6013      	str	r3, [r2, #0]
		if (timer7_counter <= 0){
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <timerRun+0x11c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	dc02      	bgt.n	8001790 <timerRun+0xe4>
			timer7_flag=1;
 800178a:	4b10      	ldr	r3, [pc, #64]	; (80017cc <timerRun+0x120>)
 800178c:	2201      	movs	r2, #1
 800178e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr
 8001798:	20000178 	.word	0x20000178
 800179c:	2000017c 	.word	0x2000017c
 80017a0:	20000180 	.word	0x20000180
 80017a4:	20000184 	.word	0x20000184
 80017a8:	20000188 	.word	0x20000188
 80017ac:	2000018c 	.word	0x2000018c
 80017b0:	20000190 	.word	0x20000190
 80017b4:	20000194 	.word	0x20000194
 80017b8:	20000198 	.word	0x20000198
 80017bc:	2000019c 	.word	0x2000019c
 80017c0:	200001a0 	.word	0x200001a0
 80017c4:	200001a4 	.word	0x200001a4
 80017c8:	200001a8 	.word	0x200001a8
 80017cc:	200001ac 	.word	0x200001ac

080017d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b085      	sub	sp, #20
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80017d6:	4b15      	ldr	r3, [pc, #84]	; (800182c <HAL_MspInit+0x5c>)
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	4a14      	ldr	r2, [pc, #80]	; (800182c <HAL_MspInit+0x5c>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6193      	str	r3, [r2, #24]
 80017e2:	4b12      	ldr	r3, [pc, #72]	; (800182c <HAL_MspInit+0x5c>)
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_MspInit+0x5c>)
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	4a0e      	ldr	r2, [pc, #56]	; (800182c <HAL_MspInit+0x5c>)
 80017f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017f8:	61d3      	str	r3, [r2, #28]
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <HAL_MspInit+0x5c>)
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001802:	607b      	str	r3, [r7, #4]
 8001804:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001806:	4b0a      	ldr	r3, [pc, #40]	; (8001830 <HAL_MspInit+0x60>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001812:	60fb      	str	r3, [r7, #12]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <HAL_MspInit+0x60>)
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001822:	bf00      	nop
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	40021000 	.word	0x40021000
 8001830:	40010000 	.word	0x40010000

08001834 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001844:	d113      	bne.n	800186e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <HAL_TIM_Base_MspInit+0x44>)
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <HAL_TIM_Base_MspInit+0x44>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	61d3      	str	r3, [r2, #28]
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_TIM_Base_MspInit+0x44>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	201c      	movs	r0, #28
 8001864:	f000 f9a1 	bl	8001baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001868:	201c      	movs	r0, #28
 800186a:	f000 f9ba 	bl	8001be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40021000 	.word	0x40021000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c2:	f000 f87f 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
	...

080018cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <TIM2_IRQHandler+0x10>)
 80018d2:	f000 ffc3 	bl	800285c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200001b0 	.word	0x200001b0

080018e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bc80      	pop	{r7}
 80018ea:	4770      	bx	lr

080018ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ec:	f7ff fff8 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018f0:	480b      	ldr	r0, [pc, #44]	; (8001920 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80018f2:	490c      	ldr	r1, [pc, #48]	; (8001924 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <LoopFillZerobss+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001908:	4c09      	ldr	r4, [pc, #36]	; (8001930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001916:	f001 faed 	bl	8002ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800191a:	f7ff f971 	bl	8000c00 <main>
  bx lr
 800191e:	4770      	bx	lr
  ldr r0, =_sdata
 8001920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001924:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001928:	08002f90 	.word	0x08002f90
  ldr r2, =_sbss
 800192c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001930:	200001fc 	.word	0x200001fc

08001934 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001934:	e7fe      	b.n	8001934 <ADC1_2_IRQHandler>
	...

08001938 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_Init+0x28>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	; (8001960 <HAL_Init+0x28>)
 8001942:	f043 0310 	orr.w	r3, r3, #16
 8001946:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f923 	bl	8001b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff ff3c 	bl	80017d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40022000 	.word	0x40022000

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	; (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f93b 	bl	8001bfe <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f903 	bl	8001baa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	; (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000050 	.word	0x20000050
 80019bc:	20000058 	.word	0x20000058
 80019c0:	20000054 	.word	0x20000054

080019c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x1c>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_IncTick+0x20>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a03      	ldr	r2, [pc, #12]	; (80019e4 <HAL_IncTick+0x20>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr
 80019e0:	20000058 	.word	0x20000058
 80019e4:	200001f8 	.word	0x200001f8

080019e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b02      	ldr	r3, [pc, #8]	; (80019f8 <HAL_GetTick+0x10>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bc80      	pop	{r7}
 80019f6:	4770      	bx	lr
 80019f8:	200001f8 	.word	0x200001f8

080019fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a2e:	4a04      	ldr	r2, [pc, #16]	; (8001a40 <__NVIC_SetPriorityGrouping+0x44>)
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	60d3      	str	r3, [r2, #12]
}
 8001a34:	bf00      	nop
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bc80      	pop	{r7}
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	e000ed00 	.word	0xe000ed00

08001a44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a48:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <__NVIC_GetPriorityGrouping+0x18>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	0a1b      	lsrs	r3, r3, #8
 8001a4e:	f003 0307 	and.w	r3, r3, #7
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	db0b      	blt.n	8001a8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	f003 021f 	and.w	r2, r3, #31
 8001a78:	4906      	ldr	r1, [pc, #24]	; (8001a94 <__NVIC_EnableIRQ+0x34>)
 8001a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7e:	095b      	lsrs	r3, r3, #5
 8001a80:	2001      	movs	r0, #1
 8001a82:	fa00 f202 	lsl.w	r2, r0, r2
 8001a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100

08001a98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	6039      	str	r1, [r7, #0]
 8001aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	db0a      	blt.n	8001ac2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	490c      	ldr	r1, [pc, #48]	; (8001ae4 <__NVIC_SetPriority+0x4c>)
 8001ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab6:	0112      	lsls	r2, r2, #4
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	440b      	add	r3, r1
 8001abc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ac0:	e00a      	b.n	8001ad8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4908      	ldr	r1, [pc, #32]	; (8001ae8 <__NVIC_SetPriority+0x50>)
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	f003 030f 	and.w	r3, r3, #15
 8001ace:	3b04      	subs	r3, #4
 8001ad0:	0112      	lsls	r2, r2, #4
 8001ad2:	b2d2      	uxtb	r2, r2
 8001ad4:	440b      	add	r3, r1
 8001ad6:	761a      	strb	r2, [r3, #24]
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	e000e100 	.word	0xe000e100
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b089      	sub	sp, #36	; 0x24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f1c3 0307 	rsb	r3, r3, #7
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	bf28      	it	cs
 8001b0a:	2304      	movcs	r3, #4
 8001b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3304      	adds	r3, #4
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d902      	bls.n	8001b1c <NVIC_EncodePriority+0x30>
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	3b03      	subs	r3, #3
 8001b1a:	e000      	b.n	8001b1e <NVIC_EncodePriority+0x32>
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	f04f 32ff 	mov.w	r2, #4294967295
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2a:	43da      	mvns	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	401a      	ands	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3e:	43d9      	mvns	r1, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b44:	4313      	orrs	r3, r2
         );
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3724      	adds	r7, #36	; 0x24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bc80      	pop	{r7}
 8001b4e:	4770      	bx	lr

08001b50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3b01      	subs	r3, #1
 8001b5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b60:	d301      	bcc.n	8001b66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00f      	b.n	8001b86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b66:	4a0a      	ldr	r2, [pc, #40]	; (8001b90 <SysTick_Config+0x40>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6e:	210f      	movs	r1, #15
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f7ff ff90 	bl	8001a98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <SysTick_Config+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7e:	4b04      	ldr	r3, [pc, #16]	; (8001b90 <SysTick_Config+0x40>)
 8001b80:	2207      	movs	r2, #7
 8001b82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b84:	2300      	movs	r3, #0
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010

08001b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff2d 	bl	80019fc <__NVIC_SetPriorityGrouping>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
 8001bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bbc:	f7ff ff42 	bl	8001a44 <__NVIC_GetPriorityGrouping>
 8001bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	6978      	ldr	r0, [r7, #20]
 8001bc8:	f7ff ff90 	bl	8001aec <NVIC_EncodePriority>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bd2:	4611      	mov	r1, r2
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7ff ff5f 	bl	8001a98 <__NVIC_SetPriority>
}
 8001bda:	bf00      	nop
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be2:	b580      	push	{r7, lr}
 8001be4:	b082      	sub	sp, #8
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	4603      	mov	r3, r0
 8001bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff ff35 	bl	8001a60 <__NVIC_EnableIRQ>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b082      	sub	sp, #8
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ffa2 	bl	8001b50 <SysTick_Config>
 8001c0c:	4603      	mov	r3, r0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b08b      	sub	sp, #44	; 0x2c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2a:	e148      	b.n	8001ebe <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	69fa      	ldr	r2, [r7, #28]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	f040 8137 	bne.w	8001eb8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	4aa3      	ldr	r2, [pc, #652]	; (8001edc <HAL_GPIO_Init+0x2c4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d05e      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c54:	4aa1      	ldr	r2, [pc, #644]	; (8001edc <HAL_GPIO_Init+0x2c4>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d875      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c5a:	4aa1      	ldr	r2, [pc, #644]	; (8001ee0 <HAL_GPIO_Init+0x2c8>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d058      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c60:	4a9f      	ldr	r2, [pc, #636]	; (8001ee0 <HAL_GPIO_Init+0x2c8>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d86f      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c66:	4a9f      	ldr	r2, [pc, #636]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d052      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c6c:	4a9d      	ldr	r2, [pc, #628]	; (8001ee4 <HAL_GPIO_Init+0x2cc>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d869      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c72:	4a9d      	ldr	r2, [pc, #628]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d04c      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c78:	4a9b      	ldr	r2, [pc, #620]	; (8001ee8 <HAL_GPIO_Init+0x2d0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d863      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c7e:	4a9b      	ldr	r2, [pc, #620]	; (8001eec <HAL_GPIO_Init+0x2d4>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d046      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
 8001c84:	4a99      	ldr	r2, [pc, #612]	; (8001eec <HAL_GPIO_Init+0x2d4>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d85d      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c8a:	2b12      	cmp	r3, #18
 8001c8c:	d82a      	bhi.n	8001ce4 <HAL_GPIO_Init+0xcc>
 8001c8e:	2b12      	cmp	r3, #18
 8001c90:	d859      	bhi.n	8001d46 <HAL_GPIO_Init+0x12e>
 8001c92:	a201      	add	r2, pc, #4	; (adr r2, 8001c98 <HAL_GPIO_Init+0x80>)
 8001c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c98:	08001d13 	.word	0x08001d13
 8001c9c:	08001ced 	.word	0x08001ced
 8001ca0:	08001cff 	.word	0x08001cff
 8001ca4:	08001d41 	.word	0x08001d41
 8001ca8:	08001d47 	.word	0x08001d47
 8001cac:	08001d47 	.word	0x08001d47
 8001cb0:	08001d47 	.word	0x08001d47
 8001cb4:	08001d47 	.word	0x08001d47
 8001cb8:	08001d47 	.word	0x08001d47
 8001cbc:	08001d47 	.word	0x08001d47
 8001cc0:	08001d47 	.word	0x08001d47
 8001cc4:	08001d47 	.word	0x08001d47
 8001cc8:	08001d47 	.word	0x08001d47
 8001ccc:	08001d47 	.word	0x08001d47
 8001cd0:	08001d47 	.word	0x08001d47
 8001cd4:	08001d47 	.word	0x08001d47
 8001cd8:	08001d47 	.word	0x08001d47
 8001cdc:	08001cf5 	.word	0x08001cf5
 8001ce0:	08001d09 	.word	0x08001d09
 8001ce4:	4a82      	ldr	r2, [pc, #520]	; (8001ef0 <HAL_GPIO_Init+0x2d8>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001cea:	e02c      	b.n	8001d46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	623b      	str	r3, [r7, #32]
          break;
 8001cf2:	e029      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	623b      	str	r3, [r7, #32]
          break;
 8001cfc:	e024      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	3308      	adds	r3, #8
 8001d04:	623b      	str	r3, [r7, #32]
          break;
 8001d06:	e01f      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	330c      	adds	r3, #12
 8001d0e:	623b      	str	r3, [r7, #32]
          break;
 8001d10:	e01a      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d102      	bne.n	8001d20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d1a:	2304      	movs	r3, #4
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e013      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d28:	2308      	movs	r3, #8
 8001d2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69fa      	ldr	r2, [r7, #28]
 8001d30:	611a      	str	r2, [r3, #16]
          break;
 8001d32:	e009      	b.n	8001d48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d34:	2308      	movs	r3, #8
 8001d36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	615a      	str	r2, [r3, #20]
          break;
 8001d3e:	e003      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d40:	2300      	movs	r3, #0
 8001d42:	623b      	str	r3, [r7, #32]
          break;
 8001d44:	e000      	b.n	8001d48 <HAL_GPIO_Init+0x130>
          break;
 8001d46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	2bff      	cmp	r3, #255	; 0xff
 8001d4c:	d801      	bhi.n	8001d52 <HAL_GPIO_Init+0x13a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	e001      	b.n	8001d56 <HAL_GPIO_Init+0x13e>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3304      	adds	r3, #4
 8001d56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	2bff      	cmp	r3, #255	; 0xff
 8001d5c:	d802      	bhi.n	8001d64 <HAL_GPIO_Init+0x14c>
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	e002      	b.n	8001d6a <HAL_GPIO_Init+0x152>
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	3b08      	subs	r3, #8
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	210f      	movs	r1, #15
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	fa01 f303 	lsl.w	r3, r1, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	6a39      	ldr	r1, [r7, #32]
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	431a      	orrs	r2, r3
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8090 	beq.w	8001eb8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d98:	4b56      	ldr	r3, [pc, #344]	; (8001ef4 <HAL_GPIO_Init+0x2dc>)
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	4a55      	ldr	r2, [pc, #340]	; (8001ef4 <HAL_GPIO_Init+0x2dc>)
 8001d9e:	f043 0301 	orr.w	r3, r3, #1
 8001da2:	6193      	str	r3, [r2, #24]
 8001da4:	4b53      	ldr	r3, [pc, #332]	; (8001ef4 <HAL_GPIO_Init+0x2dc>)
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
 8001dae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001db0:	4a51      	ldr	r2, [pc, #324]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db4:	089b      	lsrs	r3, r3, #2
 8001db6:	3302      	adds	r3, #2
 8001db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a49      	ldr	r2, [pc, #292]	; (8001efc <HAL_GPIO_Init+0x2e4>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d00d      	beq.n	8001df8 <HAL_GPIO_Init+0x1e0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <HAL_GPIO_Init+0x2e8>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d007      	beq.n	8001df4 <HAL_GPIO_Init+0x1dc>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a47      	ldr	r2, [pc, #284]	; (8001f04 <HAL_GPIO_Init+0x2ec>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d101      	bne.n	8001df0 <HAL_GPIO_Init+0x1d8>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e004      	b.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001df0:	2303      	movs	r3, #3
 8001df2:	e002      	b.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001df4:	2301      	movs	r3, #1
 8001df6:	e000      	b.n	8001dfa <HAL_GPIO_Init+0x1e2>
 8001df8:	2300      	movs	r3, #0
 8001dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dfc:	f002 0203 	and.w	r2, r2, #3
 8001e00:	0092      	lsls	r2, r2, #2
 8001e02:	4093      	lsls	r3, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e0a:	493b      	ldr	r1, [pc, #236]	; (8001ef8 <HAL_GPIO_Init+0x2e0>)
 8001e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0e:	089b      	lsrs	r3, r3, #2
 8001e10:	3302      	adds	r3, #2
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d006      	beq.n	8001e32 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e24:	4b38      	ldr	r3, [pc, #224]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	4937      	ldr	r1, [pc, #220]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	608b      	str	r3, [r1, #8]
 8001e30:	e006      	b.n	8001e40 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e32:	4b35      	ldr	r3, [pc, #212]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e34:	689a      	ldr	r2, [r3, #8]
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	4933      	ldr	r1, [pc, #204]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e4c:	4b2e      	ldr	r3, [pc, #184]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	492d      	ldr	r1, [pc, #180]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	60cb      	str	r3, [r1, #12]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e5a:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e5c:	68da      	ldr	r2, [r3, #12]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4929      	ldr	r1, [pc, #164]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4923      	ldr	r1, [pc, #140]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	604b      	str	r3, [r1, #4]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e82:	4b21      	ldr	r3, [pc, #132]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	491f      	ldr	r1, [pc, #124]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4919      	ldr	r1, [pc, #100]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4915      	ldr	r1, [pc, #84]	; (8001f08 <HAL_GPIO_Init+0x2f0>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	3301      	adds	r3, #1
 8001ebc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f47f aeaf 	bne.w	8001c2c <HAL_GPIO_Init+0x14>
  }
}
 8001ece:	bf00      	nop
 8001ed0:	bf00      	nop
 8001ed2:	372c      	adds	r7, #44	; 0x2c
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	10320000 	.word	0x10320000
 8001ee0:	10310000 	.word	0x10310000
 8001ee4:	10220000 	.word	0x10220000
 8001ee8:	10210000 	.word	0x10210000
 8001eec:	10120000 	.word	0x10120000
 8001ef0:	10110000 	.word	0x10110000
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40010800 	.word	0x40010800
 8001f00:	40010c00 	.word	0x40010c00
 8001f04:	40011000 	.word	0x40011000
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	887b      	ldrh	r3, [r7, #2]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	e001      	b.n	8001f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3714      	adds	r7, #20
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
 8001f42:	460b      	mov	r3, r1
 8001f44:	807b      	strh	r3, [r7, #2]
 8001f46:	4613      	mov	r3, r2
 8001f48:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f4a:	787b      	ldrb	r3, [r7, #1]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d003      	beq.n	8001f58 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f50:	887a      	ldrh	r2, [r7, #2]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f56:	e003      	b.n	8001f60 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f58:	887b      	ldrh	r3, [r7, #2]
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	611a      	str	r2, [r3, #16]
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr
	...

08001f6c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e26c      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f000 8087 	beq.w	800209a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f8c:	4b92      	ldr	r3, [pc, #584]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 030c 	and.w	r3, r3, #12
 8001f94:	2b04      	cmp	r3, #4
 8001f96:	d00c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f98:	4b8f      	ldr	r3, [pc, #572]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d112      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
 8001fa4:	4b8c      	ldr	r3, [pc, #560]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb0:	d10b      	bne.n	8001fca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb2:	4b89      	ldr	r3, [pc, #548]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d06c      	beq.n	8002098 <HAL_RCC_OscConfig+0x12c>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d168      	bne.n	8002098 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e246      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x76>
 8001fd4:	4b80      	ldr	r3, [pc, #512]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a7f      	ldr	r2, [pc, #508]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	e02e      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x98>
 8001fea:	4b7b      	ldr	r3, [pc, #492]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a7a      	ldr	r2, [pc, #488]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	4b78      	ldr	r3, [pc, #480]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a77      	ldr	r2, [pc, #476]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8001ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	e01d      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0xbc>
 800200e:	4b72      	ldr	r3, [pc, #456]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a71      	ldr	r2, [pc, #452]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b6f      	ldr	r3, [pc, #444]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6e      	ldr	r2, [pc, #440]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0xd4>
 8002028:	4b6b      	ldr	r3, [pc, #428]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a6a      	ldr	r2, [pc, #424]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800202e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b68      	ldr	r3, [pc, #416]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a67      	ldr	r2, [pc, #412]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800203e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7ff fcce 	bl	80019e8 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800204e:	e008      	b.n	8002062 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002050:	f7ff fcca 	bl	80019e8 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	2b64      	cmp	r3, #100	; 0x64
 800205c:	d901      	bls.n	8002062 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e1fa      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b5d      	ldr	r3, [pc, #372]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0f0      	beq.n	8002050 <HAL_RCC_OscConfig+0xe4>
 800206e:	e014      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7ff fcba 	bl	80019e8 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002078:	f7ff fcb6 	bl	80019e8 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b64      	cmp	r3, #100	; 0x64
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e1e6      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800208a:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f0      	bne.n	8002078 <HAL_RCC_OscConfig+0x10c>
 8002096:	e000      	b.n	800209a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d063      	beq.n	800216e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020a6:	4b4c      	ldr	r3, [pc, #304]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00b      	beq.n	80020ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80020b2:	4b49      	ldr	r3, [pc, #292]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 030c 	and.w	r3, r3, #12
 80020ba:	2b08      	cmp	r3, #8
 80020bc:	d11c      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
 80020be:	4b46      	ldr	r3, [pc, #280]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d116      	bne.n	80020f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	4b43      	ldr	r3, [pc, #268]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0302 	and.w	r3, r3, #2
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d005      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	691b      	ldr	r3, [r3, #16]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d001      	beq.n	80020e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1ba      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020e2:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4939      	ldr	r1, [pc, #228]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020f6:	e03a      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002100:	4b36      	ldr	r3, [pc, #216]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fc6f 	bl	80019e8 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210e:	f7ff fc6b 	bl	80019e8 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e19b      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002120:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212c:	4b2a      	ldr	r3, [pc, #168]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	695b      	ldr	r3, [r3, #20]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4927      	ldr	r1, [pc, #156]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
 8002140:	e015      	b.n	800216e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCC_OscConfig+0x270>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff fc4e 	bl	80019e8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002150:	f7ff fc4a 	bl	80019e8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b02      	cmp	r3, #2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e17a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002162:	4b1d      	ldr	r3, [pc, #116]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d03a      	beq.n	80021f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d019      	beq.n	80021b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002182:	4b17      	ldr	r3, [pc, #92]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 8002184:	2201      	movs	r2, #1
 8002186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002188:	f7ff fc2e 	bl	80019e8 <HAL_GetTick>
 800218c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002190:	f7ff fc2a 	bl	80019e8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e15a      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d0f0      	beq.n	8002190 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80021ae:	2001      	movs	r0, #1
 80021b0:	f000 fa9a 	bl	80026e8 <RCC_Delay>
 80021b4:	e01c      	b.n	80021f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021b6:	4b0a      	ldr	r3, [pc, #40]	; (80021e0 <HAL_RCC_OscConfig+0x274>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021bc:	f7ff fc14 	bl	80019e8 <HAL_GetTick>
 80021c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c2:	e00f      	b.n	80021e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021c4:	f7ff fc10 	bl	80019e8 <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d908      	bls.n	80021e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e140      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
 80021d6:	bf00      	nop
 80021d8:	40021000 	.word	0x40021000
 80021dc:	42420000 	.word	0x42420000
 80021e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021e4:	4b9e      	ldr	r3, [pc, #632]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80021e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e8:	f003 0302 	and.w	r3, r3, #2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d1e9      	bne.n	80021c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a6 	beq.w	800234a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b97      	ldr	r3, [pc, #604]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002204:	69db      	ldr	r3, [r3, #28]
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b94      	ldr	r3, [pc, #592]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a93      	ldr	r2, [pc, #588]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]
 800221a:	4b91      	ldr	r3, [pc, #580]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d118      	bne.n	8002268 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002240:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002242:	f7ff fbd1 	bl	80019e8 <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800224a:	f7ff fbcd 	bl	80019e8 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b64      	cmp	r3, #100	; 0x64
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e0fd      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x4f8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x312>
 8002270:	4b7b      	ldr	r3, [pc, #492]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	4a7a      	ldr	r2, [pc, #488]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	6213      	str	r3, [r2, #32]
 800227c:	e02d      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x334>
 8002286:	4b76      	ldr	r3, [pc, #472]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	4a75      	ldr	r2, [pc, #468]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800228c:	f023 0301 	bic.w	r3, r3, #1
 8002290:	6213      	str	r3, [r2, #32]
 8002292:	4b73      	ldr	r3, [pc, #460]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002294:	6a1b      	ldr	r3, [r3, #32]
 8002296:	4a72      	ldr	r2, [pc, #456]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002298:	f023 0304 	bic.w	r3, r3, #4
 800229c:	6213      	str	r3, [r2, #32]
 800229e:	e01c      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	2b05      	cmp	r3, #5
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_OscConfig+0x356>
 80022a8:	4b6d      	ldr	r3, [pc, #436]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	4a6c      	ldr	r2, [pc, #432]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6213      	str	r3, [r2, #32]
 80022b4:	4b6a      	ldr	r3, [pc, #424]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	4a69      	ldr	r2, [pc, #420]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022ba:	f043 0301 	orr.w	r3, r3, #1
 80022be:	6213      	str	r3, [r2, #32]
 80022c0:	e00b      	b.n	80022da <HAL_RCC_OscConfig+0x36e>
 80022c2:	4b67      	ldr	r3, [pc, #412]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	4a66      	ldr	r2, [pc, #408]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6213      	str	r3, [r2, #32]
 80022ce:	4b64      	ldr	r3, [pc, #400]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d0:	6a1b      	ldr	r3, [r3, #32]
 80022d2:	4a63      	ldr	r2, [pc, #396]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80022d4:	f023 0304 	bic.w	r3, r3, #4
 80022d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d015      	beq.n	800230e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fb81 	bl	80019e8 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022e8:	e00a      	b.n	8002300 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ea:	f7ff fb7d 	bl	80019e8 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e0ab      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002300:	4b57      	ldr	r3, [pc, #348]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0ee      	beq.n	80022ea <HAL_RCC_OscConfig+0x37e>
 800230c:	e014      	b.n	8002338 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800230e:	f7ff fb6b 	bl	80019e8 <HAL_GetTick>
 8002312:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002314:	e00a      	b.n	800232c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002316:	f7ff fb67 	bl	80019e8 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	f241 3288 	movw	r2, #5000	; 0x1388
 8002324:	4293      	cmp	r3, r2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e095      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800232c:	4b4c      	ldr	r3, [pc, #304]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	f003 0302 	and.w	r3, r3, #2
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	4a47      	ldr	r2, [pc, #284]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002348:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8081 	beq.w	8002456 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002354:	4b42      	ldr	r3, [pc, #264]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 030c 	and.w	r3, r3, #12
 800235c:	2b08      	cmp	r3, #8
 800235e:	d061      	beq.n	8002424 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d146      	bne.n	80023f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002368:	4b3f      	ldr	r3, [pc, #252]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800236e:	f7ff fb3b 	bl	80019e8 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002376:	f7ff fb37 	bl	80019e8 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e067      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002388:	4b35      	ldr	r3, [pc, #212]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1f0      	bne.n	8002376 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a1b      	ldr	r3, [r3, #32]
 8002398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239c:	d108      	bne.n	80023b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800239e:	4b30      	ldr	r3, [pc, #192]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	492d      	ldr	r1, [pc, #180]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b0:	4b2b      	ldr	r3, [pc, #172]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a19      	ldr	r1, [r3, #32]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	430b      	orrs	r3, r1
 80023c2:	4927      	ldr	r1, [pc, #156]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023c8:	4b27      	ldr	r3, [pc, #156]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023ca:	2201      	movs	r2, #1
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fb0b 	bl	80019e8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fb07 	bl	80019e8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e037      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023e8:	4b1d      	ldr	r3, [pc, #116]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d0f0      	beq.n	80023d6 <HAL_RCC_OscConfig+0x46a>
 80023f4:	e02f      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f6:	4b1c      	ldr	r3, [pc, #112]	; (8002468 <HAL_RCC_OscConfig+0x4fc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fc:	f7ff faf4 	bl	80019e8 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002404:	f7ff faf0 	bl	80019e8 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e020      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002416:	4b12      	ldr	r3, [pc, #72]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x498>
 8002422:	e018      	b.n	8002456 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d101      	bne.n	8002430 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e013      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <HAL_RCC_OscConfig+0x4f4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	429a      	cmp	r2, r3
 8002442:	d106      	bne.n	8002452 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800244e:	429a      	cmp	r2, r3
 8002450:	d001      	beq.n	8002456 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
 8002468:	42420060 	.word	0x42420060

0800246c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e0d0      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002480:	4b6a      	ldr	r3, [pc, #424]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	429a      	cmp	r2, r3
 800248c:	d910      	bls.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248e:	4b67      	ldr	r3, [pc, #412]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f023 0207 	bic.w	r2, r3, #7
 8002496:	4965      	ldr	r1, [pc, #404]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	4313      	orrs	r3, r2
 800249c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249e:	4b63      	ldr	r3, [pc, #396]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d001      	beq.n	80024b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e0b8      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d020      	beq.n	80024fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0304 	and.w	r3, r3, #4
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c8:	4b59      	ldr	r3, [pc, #356]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a58      	ldr	r2, [pc, #352]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80024d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0308 	and.w	r3, r3, #8
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d005      	beq.n	80024ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024e0:	4b53      	ldr	r3, [pc, #332]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4a52      	ldr	r2, [pc, #328]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80024ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ec:	4b50      	ldr	r3, [pc, #320]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	494d      	ldr	r1, [pc, #308]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d040      	beq.n	800258c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2b01      	cmp	r3, #1
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002512:	4b47      	ldr	r3, [pc, #284]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d115      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e07f      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b02      	cmp	r3, #2
 8002528:	d107      	bne.n	800253a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252a:	4b41      	ldr	r3, [pc, #260]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d109      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e073      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800253a:	4b3d      	ldr	r3, [pc, #244]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b39      	ldr	r3, [pc, #228]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4936      	ldr	r1, [pc, #216]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002558:	4313      	orrs	r3, r2
 800255a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800255c:	f7ff fa44 	bl	80019e8 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7ff fa40 	bl	80019e8 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e053      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b2d      	ldr	r3, [pc, #180]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	429a      	cmp	r2, r3
 8002598:	d210      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259a:	4b24      	ldr	r3, [pc, #144]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f023 0207 	bic.w	r2, r3, #7
 80025a2:	4922      	ldr	r1, [pc, #136]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e032      	b.n	8002622 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d008      	beq.n	80025da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025c8:	4b19      	ldr	r3, [pc, #100]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	4916      	ldr	r1, [pc, #88]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80025e6:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691b      	ldr	r3, [r3, #16]
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	490e      	ldr	r1, [pc, #56]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025fa:	f000 f821 	bl	8002640 <HAL_RCC_GetSysClockFreq>
 80025fe:	4602      	mov	r2, r0
 8002600:	4b0b      	ldr	r3, [pc, #44]	; (8002630 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	091b      	lsrs	r3, r3, #4
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	490a      	ldr	r1, [pc, #40]	; (8002634 <HAL_RCC_ClockConfig+0x1c8>)
 800260c:	5ccb      	ldrb	r3, [r1, r3]
 800260e:	fa22 f303 	lsr.w	r3, r2, r3
 8002612:	4a09      	ldr	r2, [pc, #36]	; (8002638 <HAL_RCC_ClockConfig+0x1cc>)
 8002614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002616:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_ClockConfig+0x1d0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff f9a2 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	08002f64 	.word	0x08002f64
 8002638:	20000050 	.word	0x20000050
 800263c:	20000054 	.word	0x20000054

08002640 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002640:	b480      	push	{r7}
 8002642:	b087      	sub	sp, #28
 8002644:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	2300      	movs	r3, #0
 800264c:	60bb      	str	r3, [r7, #8]
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	2300      	movs	r3, #0
 8002654:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002656:	2300      	movs	r3, #0
 8002658:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800265a:	4b1e      	ldr	r3, [pc, #120]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f003 030c 	and.w	r3, r3, #12
 8002666:	2b04      	cmp	r3, #4
 8002668:	d002      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x30>
 800266a:	2b08      	cmp	r3, #8
 800266c:	d003      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x36>
 800266e:	e027      	b.n	80026c0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002670:	4b19      	ldr	r3, [pc, #100]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002672:	613b      	str	r3, [r7, #16]
      break;
 8002674:	e027      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	0c9b      	lsrs	r3, r3, #18
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	4a17      	ldr	r2, [pc, #92]	; (80026dc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002680:	5cd3      	ldrb	r3, [r2, r3]
 8002682:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d010      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800268e:	4b11      	ldr	r3, [pc, #68]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	0c5b      	lsrs	r3, r3, #17
 8002694:	f003 0301 	and.w	r3, r3, #1
 8002698:	4a11      	ldr	r2, [pc, #68]	; (80026e0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a0d      	ldr	r2, [pc, #52]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026a2:	fb02 f203 	mul.w	r2, r2, r3
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e004      	b.n	80026ba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a0c      	ldr	r2, [pc, #48]	; (80026e4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	613b      	str	r3, [r7, #16]
      break;
 80026be:	e002      	b.n	80026c6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_RCC_GetSysClockFreq+0x98>)
 80026c2:	613b      	str	r3, [r7, #16]
      break;
 80026c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026c6:	693b      	ldr	r3, [r7, #16]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	371c      	adds	r7, #28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bc80      	pop	{r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000
 80026d8:	007a1200 	.word	0x007a1200
 80026dc:	08002f74 	.word	0x08002f74
 80026e0:	08002f84 	.word	0x08002f84
 80026e4:	003d0900 	.word	0x003d0900

080026e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f0:	4b0a      	ldr	r3, [pc, #40]	; (800271c <RCC_Delay+0x34>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <RCC_Delay+0x38>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0a5b      	lsrs	r3, r3, #9
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002704:	bf00      	nop
  }
  while (Delay --);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	60fa      	str	r2, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f9      	bne.n	8002704 <RCC_Delay+0x1c>
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	20000050 	.word	0x20000050
 8002720:	10624dd3 	.word	0x10624dd3

08002724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e041      	b.n	80027ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff f872 	bl	8001834 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2202      	movs	r2, #2
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3304      	adds	r3, #4
 8002760:	4619      	mov	r1, r3
 8002762:	4610      	mov	r0, r2
 8002764:	f000 fa6e 	bl	8002c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2201      	movs	r2, #1
 8002784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2201      	movs	r2, #1
 800279c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2201      	movs	r2, #1
 80027a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
	...

080027c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d001      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e035      	b.n	8002848 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f042 0201 	orr.w	r2, r2, #1
 80027f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a16      	ldr	r2, [pc, #88]	; (8002854 <HAL_TIM_Base_Start_IT+0x90>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_TIM_Base_Start_IT+0x4e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002806:	d004      	beq.n	8002812 <HAL_TIM_Base_Start_IT+0x4e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a12      	ldr	r2, [pc, #72]	; (8002858 <HAL_TIM_Base_Start_IT+0x94>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d111      	bne.n	8002836 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0307 	and.w	r3, r3, #7
 800281c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b06      	cmp	r3, #6
 8002822:	d010      	beq.n	8002846 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002834:	e007      	b.n	8002846 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	bc80      	pop	{r7}
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	40012c00 	.word	0x40012c00
 8002858:	40000400 	.word	0x40000400

0800285c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d122      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b02      	cmp	r3, #2
 800287e:	d11b      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f06f 0202 	mvn.w	r2, #2
 8002888:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d003      	beq.n	80028a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f9b4 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 80028a4:	e005      	b.n	80028b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 f9a7 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f000 f9b6 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0304 	and.w	r3, r3, #4
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d11b      	bne.n	800290c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0204 	mvn.w	r2, #4
 80028dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 f98a 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f97d 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f98c 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b08      	cmp	r3, #8
 8002918:	d122      	bne.n	8002960 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0308 	and.w	r3, r3, #8
 8002924:	2b08      	cmp	r3, #8
 8002926:	d11b      	bne.n	8002960 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0208 	mvn.w	r2, #8
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2204      	movs	r2, #4
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	69db      	ldr	r3, [r3, #28]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f960 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f953 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f962 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0310 	and.w	r3, r3, #16
 800296a:	2b10      	cmp	r3, #16
 800296c:	d122      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b10      	cmp	r3, #16
 800297a:	d11b      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0210 	mvn.w	r2, #16
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2208      	movs	r2, #8
 800298a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f936 	bl	8002c0c <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 f929 	bl	8002bfa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f938 	bl	8002c1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d10e      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d107      	bne.n	80029e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0201 	mvn.w	r2, #1
 80029d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7fe fa52 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691b      	ldr	r3, [r3, #16]
 80029e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ea:	2b80      	cmp	r3, #128	; 0x80
 80029ec:	d10e      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f8:	2b80      	cmp	r3, #128	; 0x80
 80029fa:	d107      	bne.n	8002a0c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa6b 	bl	8002ee2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d10e      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a24:	2b40      	cmp	r3, #64	; 0x40
 8002a26:	d107      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f8fc 	bl	8002c30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b20      	cmp	r3, #32
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0320 	and.w	r3, r3, #32
 8002a50:	2b20      	cmp	r3, #32
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0220 	mvn.w	r2, #32
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa36 	bl	8002ed0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b084      	sub	sp, #16
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_TIM_ConfigClockSource+0x1c>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e0b4      	b.n	8002bf2 <HAL_TIM_ConfigClockSource+0x186>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2202      	movs	r2, #2
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68ba      	ldr	r2, [r7, #8]
 8002ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac0:	d03e      	beq.n	8002b40 <HAL_TIM_ConfigClockSource+0xd4>
 8002ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ac6:	f200 8087 	bhi.w	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ace:	f000 8086 	beq.w	8002bde <HAL_TIM_ConfigClockSource+0x172>
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad6:	d87f      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ad8:	2b70      	cmp	r3, #112	; 0x70
 8002ada:	d01a      	beq.n	8002b12 <HAL_TIM_ConfigClockSource+0xa6>
 8002adc:	2b70      	cmp	r3, #112	; 0x70
 8002ade:	d87b      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae0:	2b60      	cmp	r3, #96	; 0x60
 8002ae2:	d050      	beq.n	8002b86 <HAL_TIM_ConfigClockSource+0x11a>
 8002ae4:	2b60      	cmp	r3, #96	; 0x60
 8002ae6:	d877      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002ae8:	2b50      	cmp	r3, #80	; 0x50
 8002aea:	d03c      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xfa>
 8002aec:	2b50      	cmp	r3, #80	; 0x50
 8002aee:	d873      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af0:	2b40      	cmp	r3, #64	; 0x40
 8002af2:	d058      	beq.n	8002ba6 <HAL_TIM_ConfigClockSource+0x13a>
 8002af4:	2b40      	cmp	r3, #64	; 0x40
 8002af6:	d86f      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002af8:	2b30      	cmp	r3, #48	; 0x30
 8002afa:	d064      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002afc:	2b30      	cmp	r3, #48	; 0x30
 8002afe:	d86b      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d060      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b04:	2b20      	cmp	r3, #32
 8002b06:	d867      	bhi.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d05c      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b0c:	2b10      	cmp	r3, #16
 8002b0e:	d05a      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0x15a>
 8002b10:	e062      	b.n	8002bd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	6899      	ldr	r1, [r3, #8]
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f000 f95e 	bl	8002de2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	609a      	str	r2, [r3, #8]
      break;
 8002b3e:	e04f      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	f000 f947 	bl	8002de2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b62:	609a      	str	r2, [r3, #8]
      break;
 8002b64:	e03c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6859      	ldr	r1, [r3, #4]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	461a      	mov	r2, r3
 8002b74:	f000 f8be 	bl	8002cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2150      	movs	r1, #80	; 0x50
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f000 f915 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002b84:	e02c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6818      	ldr	r0, [r3, #0]
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	6859      	ldr	r1, [r3, #4]
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f000 f8dc 	bl	8002d50 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2160      	movs	r1, #96	; 0x60
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 f905 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002ba4:	e01c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	6859      	ldr	r1, [r3, #4]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f000 f89e 	bl	8002cf4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2140      	movs	r1, #64	; 0x40
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f000 f8f5 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002bc4:	e00c      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f000 f8ec 	bl	8002dae <TIM_ITRx_SetConfig>
      break;
 8002bd6:	e003      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      break;
 8002bdc:	e000      	b.n	8002be0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002bde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b083      	sub	sp, #12
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bc80      	pop	{r7}
 8002c40:	4770      	bx	lr
	...

08002c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a25      	ldr	r2, [pc, #148]	; (8002cec <TIM_Base_SetConfig+0xa8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <TIM_Base_SetConfig+0x28>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c62:	d003      	beq.n	8002c6c <TIM_Base_SetConfig+0x28>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a22      	ldr	r2, [pc, #136]	; (8002cf0 <TIM_Base_SetConfig+0xac>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d108      	bne.n	8002c7e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a1a      	ldr	r2, [pc, #104]	; (8002cec <TIM_Base_SetConfig+0xa8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <TIM_Base_SetConfig+0x52>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d003      	beq.n	8002c96 <TIM_Base_SetConfig+0x52>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a17      	ldr	r2, [pc, #92]	; (8002cf0 <TIM_Base_SetConfig+0xac>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d108      	bne.n	8002ca8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	689a      	ldr	r2, [r3, #8]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <TIM_Base_SetConfig+0xa8>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d103      	bne.n	8002cdc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	615a      	str	r2, [r3, #20]
}
 8002ce2:	bf00      	nop
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr
 8002cec:	40012c00 	.word	0x40012c00
 8002cf0:	40000400 	.word	0x40000400

08002cf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b087      	sub	sp, #28
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f023 0201 	bic.w	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	f023 030a 	bic.w	r3, r3, #10
 8002d30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	621a      	str	r2, [r3, #32]
}
 8002d46:	bf00      	nop
 8002d48:	371c      	adds	r7, #28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bc80      	pop	{r7}
 8002d4e:	4770      	bx	lr

08002d50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1b      	ldr	r3, [r3, #32]
 8002d60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	6a1b      	ldr	r3, [r3, #32]
 8002d66:	f023 0210 	bic.w	r2, r3, #16
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	031b      	lsls	r3, r3, #12
 8002d80:	693a      	ldr	r2, [r7, #16]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d8c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	693a      	ldr	r2, [r7, #16]
 8002d9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	697a      	ldr	r2, [r7, #20]
 8002da2:	621a      	str	r2, [r3, #32]
}
 8002da4:	bf00      	nop
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bc80      	pop	{r7}
 8002dac:	4770      	bx	lr

08002dae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002dae:	b480      	push	{r7}
 8002db0:	b085      	sub	sp, #20
 8002db2:	af00      	add	r7, sp, #0
 8002db4:	6078      	str	r0, [r7, #4]
 8002db6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f043 0307 	orr.w	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	609a      	str	r2, [r3, #8]
}
 8002dd8:	bf00      	nop
 8002dda:	3714      	adds	r7, #20
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bc80      	pop	{r7}
 8002de0:	4770      	bx	lr

08002de2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002de2:	b480      	push	{r7}
 8002de4:	b087      	sub	sp, #28
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
 8002dee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689b      	ldr	r3, [r3, #8]
 8002df4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002dfc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	021a      	lsls	r2, r3, #8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	609a      	str	r2, [r3, #8]
}
 8002e16:	bf00      	nop
 8002e18:	371c      	adds	r7, #28
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bc80      	pop	{r7}
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e041      	b.n	8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d009      	beq.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e84:	d004      	beq.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a10      	ldr	r2, [pc, #64]	; (8002ecc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d10c      	bne.n	8002eaa <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68ba      	ldr	r2, [r7, #8]
 8002ea8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40012c00 	.word	0x40012c00
 8002ecc:	40000400 	.word	0x40000400

08002ed0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <__libc_init_array>:
 8002ef4:	b570      	push	{r4, r5, r6, lr}
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	4d0c      	ldr	r5, [pc, #48]	; (8002f2c <__libc_init_array+0x38>)
 8002efa:	4c0d      	ldr	r4, [pc, #52]	; (8002f30 <__libc_init_array+0x3c>)
 8002efc:	1b64      	subs	r4, r4, r5
 8002efe:	10a4      	asrs	r4, r4, #2
 8002f00:	42a6      	cmp	r6, r4
 8002f02:	d109      	bne.n	8002f18 <__libc_init_array+0x24>
 8002f04:	f000 f822 	bl	8002f4c <_init>
 8002f08:	2600      	movs	r6, #0
 8002f0a:	4d0a      	ldr	r5, [pc, #40]	; (8002f34 <__libc_init_array+0x40>)
 8002f0c:	4c0a      	ldr	r4, [pc, #40]	; (8002f38 <__libc_init_array+0x44>)
 8002f0e:	1b64      	subs	r4, r4, r5
 8002f10:	10a4      	asrs	r4, r4, #2
 8002f12:	42a6      	cmp	r6, r4
 8002f14:	d105      	bne.n	8002f22 <__libc_init_array+0x2e>
 8002f16:	bd70      	pop	{r4, r5, r6, pc}
 8002f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f1c:	4798      	blx	r3
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7ee      	b.n	8002f00 <__libc_init_array+0xc>
 8002f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f26:	4798      	blx	r3
 8002f28:	3601      	adds	r6, #1
 8002f2a:	e7f2      	b.n	8002f12 <__libc_init_array+0x1e>
 8002f2c:	08002f88 	.word	0x08002f88
 8002f30:	08002f88 	.word	0x08002f88
 8002f34:	08002f88 	.word	0x08002f88
 8002f38:	08002f8c 	.word	0x08002f8c

08002f3c <memset>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4402      	add	r2, r0
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d100      	bne.n	8002f46 <memset+0xa>
 8002f44:	4770      	bx	lr
 8002f46:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4a:	e7f9      	b.n	8002f40 <memset+0x4>

08002f4c <_init>:
 8002f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4e:	bf00      	nop
 8002f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f52:	bc08      	pop	{r3}
 8002f54:	469e      	mov	lr, r3
 8002f56:	4770      	bx	lr

08002f58 <_fini>:
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5a:	bf00      	nop
 8002f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f5e:	bc08      	pop	{r3}
 8002f60:	469e      	mov	lr, r3
 8002f62:	4770      	bx	lr
